/*
 *  Copyright 2025 Collate.
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * Create Agent Execution entity request
 */
export interface CreateAgentExecution {
    /**
     * Reference to the AI agent that executed
     */
    agent: EntityReference;
    /**
     * ID of the AI Agent
     */
    agentId: string;
    /**
     * Version of the agent at execution time
     */
    agentVersion?: string;
    /**
     * Compliance checks performed
     */
    complianceChecks?: ComplianceCheck[];
    /**
     * Data sources accessed during execution
     */
    dataAccessed?: DataAccess[];
    /**
     * Execution end timestamp
     */
    endTimestamp?: number;
    /**
     * Environment where execution occurred
     */
    environment?: Environment;
    /**
     * Error message if execution failed
     */
    errorMessage?: string;
    /**
     * Error stack trace
     */
    errorStack?: string;
    /**
     * User or system that triggered the execution
     */
    executedBy?: string;
    /**
     * Input provided to the agent
     */
    input?: string;
    /**
     * Additional execution metadata
     */
    metadata?: { [key: string]: string };
    /**
     * Performance and cost metrics
     */
    metrics?: ExecutionMetrics;
    /**
     * LLM model calls made during execution
     */
    modelCalls?: ModelCall[];
    /**
     * Output generated by the agent
     */
    output?: string;
    /**
     * Session ID for grouping related executions
     */
    sessionId?: string;
    /**
     * Execution status
     */
    status: ExecutionStatus;
    /**
     * Execution start timestamp
     */
    timestamp: number;
    /**
     * Tool calls made during execution
     */
    toolCalls?: ToolCall[];
}

/**
 * Reference to the AI agent that executed
 *
 * This schema defines the EntityReference type used for referencing an entity.
 * EntityReference is used for capturing relationships from one entity to another. For
 * example, a table has an attribute called database of type EntityReference that captures
 * the relationship of a table `belongs to a` database.
 *
 * Reference to the data source (Table, Dashboard, etc.)
 *
 * LLM Model used
 *
 * Reference to MCP Tool or custom tool
 */
export interface EntityReference {
    /**
     * If true the entity referred to has been soft-deleted.
     */
    deleted?: boolean;
    /**
     * Optional description of entity.
     */
    description?: string;
    /**
     * Display Name that identifies this entity.
     */
    displayName?: string;
    /**
     * Fully qualified name of the entity instance. For entities such as tables, databases
     * fullyQualifiedName is returned in this field. For entities that don't have name hierarchy
     * such as `user` and `team` this will be same as the `name` field.
     */
    fullyQualifiedName?: string;
    /**
     * Link to the entity resource.
     */
    href?: string;
    /**
     * Unique identifier that identifies an entity instance.
     */
    id: string;
    /**
     * If true the relationship indicated by this entity reference is inherited from the parent
     * entity.
     */
    inherited?: boolean;
    /**
     * Name of the entity instance.
     */
    name?: string;
    /**
     * Entity type/class name - Examples: `database`, `table`, `metrics`, `databaseService`,
     * `dashboardService`...
     */
    type: string;
}

/**
 * Compliance checks performed during execution
 */
export interface ComplianceCheck {
    /**
     * Name of the compliance check
     */
    checkName?: string;
    /**
     * Details about the check result
     */
    details?: string;
    /**
     * Whether the check passed
     */
    passed?:   boolean;
    severity?: Severity;
}

export enum Severity {
    Critical = "Critical",
    High = "High",
    Low = "Low",
    Medium = "Medium",
}

/**
 * Data accessed during execution - CRITICAL for lineage and impact analysis
 */
export interface DataAccess {
    /**
     * Type of access
     */
    accessType: AccessType;
    /**
     * Specific columns accessed
     */
    columns?: string[];
    /**
     * Reference to the data source (Table, Dashboard, etc.)
     */
    dataSource: EntityReference;
    /**
     * Whether PII data was accessed
     */
    piiAccessed?: boolean;
    /**
     * Query executed (if applicable)
     */
    query?: string;
    /**
     * Number of records accessed
     */
    recordCount?:      number;
    sensitivityLevel?: SensitivityLevel;
    timestamp?:        number;
}

/**
 * Type of access
 */
export enum AccessType {
    Delete = "Delete",
    Read = "Read",
    Update = "Update",
    Write = "Write",
}

export enum SensitivityLevel {
    Confidential = "Confidential",
    Internal = "Internal",
    Public = "Public",
    Restricted = "Restricted",
}

/**
 * Environment where execution occurred
 */
export enum Environment {
    Development = "Development",
    Production = "Production",
    Staging = "Staging",
}

/**
 * Performance and cost metrics
 *
 * Performance and cost metrics for the execution
 */
export interface ExecutionMetrics {
    /**
     * Number of unique data sources accessed
     */
    dataSourcesAccessed?: number;
    /**
     * Number of model calls made
     */
    modelCallCount?: number;
    /**
     * Whether any PII data was accessed
     */
    piiDataAccessed?: boolean;
    /**
     * Number of tool calls made
     */
    toolCallCount?: number;
    /**
     * Total cost in USD
     */
    totalCost?: number;
    /**
     * Total execution time in milliseconds
     */
    totalLatencyMs?: number;
    /**
     * Total tokens used across all model calls
     */
    totalTokens?: number;
}

/**
 * Individual LLM model call during execution
 */
export interface ModelCall {
    /**
     * Cost for this call
     */
    cost?: number;
    /**
     * Number of input tokens
     */
    inputTokens?: number;
    /**
     * Latency in milliseconds
     */
    latencyMs?: number;
    /**
     * LLM Model used
     */
    model?: EntityReference;
    /**
     * Number of output tokens
     */
    outputTokens?: number;
    /**
     * Prompt sent to the model
     */
    prompt?: string;
    /**
     * Purpose of this model call
     */
    purpose?: string;
    /**
     * Response from the model
     */
    response?:  string;
    timestamp?: number;
}

/**
 * Execution status
 */
export enum ExecutionStatus {
    Cancelled = "Cancelled",
    Failed = "Failed",
    PartialSuccess = "PartialSuccess",
    Running = "Running",
    Success = "Success",
    Timeout = "Timeout",
}

/**
 * Tool/function call made during execution
 */
export interface ToolCall {
    /**
     * Error message if failed
     */
    errorMessage?: string;
    /**
     * Latency in milliseconds
     */
    latencyMs?: number;
    /**
     * Parameters passed to the tool
     */
    parameters?: { [key: string]: any };
    /**
     * Result from the tool
     */
    result?: string;
    /**
     * Whether the tool call succeeded
     */
    success?:   boolean;
    timestamp?: number;
    /**
     * Reference to MCP Tool or custom tool
     */
    tool?: EntityReference;
}
