#  Copyright 2025 Collate
#  Licensed under the Collate Community License, Version 1.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#  https://github.com/open-metadata/OpenMetadata/blob/main/ingestion/LICENSE
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

"""
Test to verify that loggerLevel configuration affects deprecation warnings.

This test verifies that the workflowConfig.loggerLevel setting (DEBUG, INFO, WARN, ERROR)
properly controls the visibility of deprecation warnings generated by the @deprecated decorator.
"""

import logging
from io import StringIO
from unittest import TestCase

from metadata.generated.schema.metadataIngestion.workflow import LogLevels
from metadata.utils.deprecation import deprecated
from metadata.utils.logger import set_loggers_level


class TestDeprecationLoggerLevel(TestCase):
    """Test that deprecation warnings respect logger level configuration."""

    def setUp(self):
        """Set up test fixtures before each test method."""
        logging.getLogger().setLevel(logging.WARNING)

    def tearDown(self):
        """Clean up after each test method."""
        set_loggers_level(LogLevels.INFO.value)

    def test_deprecation_warnings_respect_logger_level(self):
        """Test that deprecation warnings are controlled by logger level."""
        logger_levels = [LogLevels.DEBUG, LogLevels.INFO, LogLevels.WARN, LogLevels.ERROR]
        log_counts = []

        for level in logger_levels:
            # Set logger level
            set_loggers_level(level.value)

            # Capture logging output
            log_capture = StringIO()
            handler = logging.StreamHandler(log_capture)
            metadata_logger = logging.getLogger("metadata")
            metadata_logger.addHandler(handler)

            # Create and call a deprecated function
            @deprecated("This is a test deprecated function", "1.5.0")
            def test_deprecated_function():
                return "deprecated_function_result"

            result = test_deprecated_function()
            self.assertEqual(result, "deprecated_function_result")

            # Count deprecation log messages
            log_output = log_capture.getvalue()
            log_lines = [line for line in log_output.split('\n') if 'will be deprecated' in line]
            log_counts.append(len(log_lines))

            # Clean up
            metadata_logger.removeHandler(handler)

        # ERROR level should suppress deprecation warnings, others should show them
        expected_logs = [1, 1, 1, 0]  # DEBUG, INFO, WARN show warnings, ERROR suppresses them

        self.assertEqual(
            log_counts,
            expected_logs,
            f"Expected {expected_logs} deprecation warnings for each level, got: {log_counts}"
        )
