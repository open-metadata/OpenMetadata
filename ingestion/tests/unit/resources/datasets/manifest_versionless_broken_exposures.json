{
    "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json",
        "dbt_version": "2024.9.246",
        "generated_at": "2024-09-25T11:33:33.892911Z",
        "invocation_id": "1b0de8c1-ea7f-4fe0-83fb-c2644a6b2c6f",
        "env": {
            "DBT_CLOUD_PROJECT_ID": "70403103964183",
            "DBT_CLOUD_RUN_ID": "70403122785100",
            "DBT_CLOUD_JOB_ID": "70403104202908",
            "DBT_CLOUD_RUN_REASON": "Kicked off from the UI by metadata_open@user",
            "DBT_CLOUD_RUN_REASON_CATEGORY": "other",
            "DBT_CLOUD_RUN_TRIGGER_CATEGORY": "RUN_REASON_CATEGORY_UI",
            "DBT_CLOUD_ENVIRONMENT_ID": "70403103965964",
            "DBT_CLOUD_ACCOUNT_ID": "70403103954677"
        },
        "project_name": "jaffle_shop",
        "project_id": "06e5b98c2db46f8a72cc4f66410e9b3b",
        "user_id": "35e66105-5ec5-4b92-a445-ee9e1608c451",
        "send_anonymous_usage_stats": true,
        "adapter_type": "redshift"
    },
    "nodes": {
        "model.jaffle_shop.customers": {
            "database": "dev",
            "schema": "schema_02d3bc11",
            "name": "customers",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "customers.sql",
            "original_file_path": "models/customers.sql",
            "unique_id": "model.jaffle_shop.customers",
            "fqn": [
                "jaffle_shop",
                "customers"
            ],
            "alias": "customers",
            "checksum": {
                "name": "sha256",
                "checksum": "60bd72e33da43fff3a7e7609135c17cd4468bd22afec0735dd36018bfb5af30a"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "model_tag_one",
                    "model_tag_two"
                ],
                "meta": {
                    "owner": "aaron_johnson0"
                },
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "batch_size": null,
                "lookback": 0,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "event_time": null,
                "access": "protected"
            },
            "tags": [
                "model_tag_one",
                "model_tag_two"
            ],
            "description": "This table has basic information about a customer, as well as some derived facts based on a customer's orders",
            "columns": {
                "customer_id": {
                    "name": "customer_id",
                    "description": "This is a unique identifier for a customer",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "first_name": {
                    "name": "first_name",
                    "description": "Customer's first name. PII.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "last_name": {
                    "name": "last_name",
                    "description": "Customer's last name. PII.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "first_order": {
                    "name": "first_order",
                    "description": "Date (UTC) of a customer's first order",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [
                        "tags_column_one"
                    ],
                    "granularity": null
                },
                "most_recent_order": {
                    "name": "most_recent_order",
                    "description": "Date (UTC) of a customer's most recent order",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "number_of_orders": {
                    "name": "number_of_orders",
                    "description": "Count of the number of orders a customer has placed",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [
                        "tags_column_one",
                        "tags_column_two"
                    ],
                    "granularity": null
                },
                "total_order_amount": {
                    "name": "total_order_amount",
                    "description": "Total value (AUD) of a customer's orders",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                }
            },
            "meta": {
                "owner": "aaron_johnson0"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models/schema.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "tags": [
                    "model_tag_one",
                    "model_tag_two"
                ],
                "meta": {
                    "owner": "aaron_johnson0"
                }
            },
            "created_at": 1727263992.4705563,
            "relation_name": "\"dev\".\"schema_02d3bc11\".\"customers\"",
            "raw_code": "sample customers raw code",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_customers",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_orders",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_payments",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_customers",
                    "model.jaffle_shop.stg_orders",
                    "model.jaffle_shop.stg_payments"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/customers.sql",
            "compiled": true,
            "compiled_code": "sample customers compile code",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null,
            "primary_key": [
                "customer_id"
            ],
            "time_spine": null
        },
        "model.jaffle_shop.orders": {
            "database": "dev",
            "schema": "schema_02d3bc11",
            "name": "orders",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "orders.sql",
            "original_file_path": "models/orders.sql",
            "unique_id": "model.jaffle_shop.orders",
            "fqn": [
                "jaffle_shop",
                "orders"
            ],
            "alias": "orders",
            "checksum": {
                "name": "sha256",
                "checksum": "27f8c79aad1cfd8411ab9c3d2ce8da1d787f7f05c58bbee1d247510dc426be0f"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "single_tag"
                ],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "batch_size": null,
                "lookback": 0,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "event_time": null,
                "access": "protected"
            },
            "tags": [
                "single_tag"
            ],
            "description": "This table has basic information about orders, as well as some derived facts based on payments",
            "columns": {
                "order_id": {
                    "name": "order_id",
                    "description": "This is a unique identifier for an order",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "customer_id": {
                    "name": "customer_id",
                    "description": "Foreign key to the customers table",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "order_date": {
                    "name": "order_date",
                    "description": "Date (UTC) that the order was placed",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "status": {
                    "name": "status",
                    "description": "Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [
                        "tags_column_one",
                        "tags_column_status"
                    ],
                    "granularity": null
                },
                "amount": {
                    "name": "amount",
                    "description": "Total amount (AUD) of the order",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "credit_card_amount": {
                    "name": "credit_card_amount",
                    "description": "Amount of the order (AUD) paid for by credit card",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "coupon_amount": {
                    "name": "coupon_amount",
                    "description": "Amount of the order (AUD) paid for by coupon",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "bank_transfer_amount": {
                    "name": "bank_transfer_amount",
                    "description": "Amount of the order (AUD) paid for by bank transfer",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "gift_card_amount": {
                    "name": "gift_card_amount",
                    "description": "Amount of the order (AUD) paid for by gift card",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models/schema.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "tags": "single_tag"
            },
            "created_at": 1727263992.4750965,
            "relation_name": "\"dev\".\"schema_02d3bc11\".\"orders\"",
            "raw_code": "{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        {% for payment_method in payment_methods -%}\n        sum(case when payment_method = '{{ payment_method }}' then amount else 0 end) as {{ payment_method }}_amount,\n        {% endfor -%}\n\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        {% for payment_method in payment_methods -%}\n\n        order_payments.{{ payment_method }}_amount,\n\n        {% endfor -%}\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_orders",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_payments",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.jaffle_shop.stg_orders",
                    "model.jaffle_shop.stg_payments"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/orders.sql",
            "compiled": true,
            "compiled_code": "\n\nwith orders as (\n\n    select * from \"dev\".\"schema_02d3bc11\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"dev\".\"schema_02d3bc11\".\"stg_payments\"\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null,
            "primary_key": [
                "order_id"
            ],
            "time_spine": null
        },
        "model.jaffle_shop.stg_payments": {
            "database": "dev",
            "schema": "schema_02d3bc11",
            "name": "stg_payments",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "staging/stg_payments.sql",
            "original_file_path": "models/staging/stg_payments.sql",
            "unique_id": "model.jaffle_shop.stg_payments",
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_payments"
            ],
            "alias": "stg_payments",
            "checksum": {
                "name": "sha256",
                "checksum": "9c1ee3bfb10e07c2dfc325d55925da0e521887136d9051768cb8acf09dc86bda"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "batch_size": null,
                "lookback": 0,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "event_time": null,
                "access": "protected"
            },
            "tags": [],
            "description": "",
            "columns": {
                "payment_id": {
                    "name": "payment_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "payment_method": {
                    "name": "payment_method",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models/staging/schema.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "view"
            },
            "created_at": 1727263992.5793736,
            "relation_name": "\"dev\".\"schema_02d3bc11\".\"stg_payments\"",
            "raw_code": "with source as (\n    \n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_payments') }}\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed",
            "language": "sql",
            "refs": [
                {
                    "name": "raw_payments",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "seed.jaffle_shop.raw_payments"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/staging/stg_payments.sql",
            "compiled": true,
            "compiled_code": "with source as (\n    select * from \"dev\".\"schema_02d3bc11\".\"raw_payments\"\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null,
            "primary_key": [
                "payment_id"
            ],
            "time_spine": null
        },
        "model.jaffle_shop.stg_orders": {
            "database": "dev",
            "schema": "schema_02d3bc11",
            "name": "stg_orders",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "staging/stg_orders.sql",
            "original_file_path": "models/staging/stg_orders.sql",
            "unique_id": "model.jaffle_shop.stg_orders",
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_orders"
            ],
            "alias": "stg_orders",
            "checksum": {
                "name": "sha256",
                "checksum": "f4f881cb09d2c4162200fc331d7401df6d1abd4fed492554a7db70dede347108"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "batch_size": null,
                "lookback": 0,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "event_time": null,
                "access": "protected"
            },
            "tags": [],
            "description": "",
            "columns": {
                "order_id": {
                    "name": "order_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                },
                "status": {
                    "name": "status",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models/staging/schema.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "view"
            },
            "created_at": 1727263992.57836,
            "relation_name": "\"dev\".\"schema_02d3bc11\".\"stg_orders\"",
            "raw_code": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_orders') }}\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed",
            "language": "sql",
            "refs": [
                {
                    "name": "raw_orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "seed.jaffle_shop.raw_orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/staging/stg_orders.sql",
            "compiled": true,
            "compiled_code": "with source as (\n    select * from \"dev\".\"schema_02d3bc11\".\"raw_orders\"\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null,
            "primary_key": [
                "order_id"
            ],
            "time_spine": null
        },
        "model.jaffle_shop.stg_customers": {
            "database": "dev",
            "schema": "schema_02d3bc11",
            "name": "stg_customers",
            "resource_type": "model",
            "package_name": "jaffle_shop",
            "path": "staging/stg_customers.sql",
            "original_file_path": "models/staging/stg_customers.sql",
            "unique_id": "model.jaffle_shop.stg_customers",
            "fqn": [
                "jaffle_shop",
                "staging",
                "stg_customers"
            ],
            "alias": "stg_customers",
            "checksum": {
                "name": "sha256",
                "checksum": "80e3223cd54387e11fa16cd0f4cbe15f8ff74dcd9900b93856b9e39416178c9d"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "batch_size": null,
                "lookback": 0,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "event_time": null,
                "access": "protected"
            },
            "tags": [],
            "description": "",
            "columns": {
                "customer_id": {
                    "name": "customer_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": [],
                    "granularity": null
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "jaffle_shop://models/staging/schema.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "view"
            },
            "created_at": 1727263992.5778124,
            "relation_name": "\"dev\".\"schema_02d3bc11\".\"stg_customers\"",
            "raw_code": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_customers') }}\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed",
            "language": "sql",
            "refs": [
                {
                    "name": "raw_customers",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "seed.jaffle_shop.raw_customers"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/staging/stg_customers.sql",
            "compiled": true,
            "compiled_code": "with source as (\n    select * from \"dev\".\"schema_02d3bc11\".\"raw_customers\"\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null,
            "primary_key": [
                "customer_id"
            ],
            "time_spine": null
        },
        "seed.jaffle_shop.raw_customers": {
            "database": "dev",
            "schema": "schema_02d3bc11",
            "name": "raw_customers",
            "resource_type": "seed",
            "package_name": "jaffle_shop",
            "path": "raw_customers.csv",
            "original_file_path": "seeds/raw_customers.csv",
            "unique_id": "seed.jaffle_shop.raw_customers",
            "fqn": [
                "jaffle_shop",
                "raw_customers"
            ],
            "alias": "raw_customers",
            "checksum": {
                "name": "sha256",
                "checksum": "357d173dda65a741ad97d6683502286cc2655bb396ab5f4dfad12b8c39bd2a63"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "seed",
                "incremental_strategy": null,
                "batch_size": null,
                "lookback": 0,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "event_time": null,
                "delimiter": ",",
                "quote_columns": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.4097621,
            "relation_name": "\"dev\".\"schema_02d3bc11\".\"raw_customers\"",
            "raw_code": "",
            "root_path": "/tmp/jobs/70403122785100/target",
            "depends_on": {
                "macros": []
            }
        },
        "seed.jaffle_shop.raw_orders": {
            "database": "dev",
            "schema": "schema_02d3bc11",
            "name": "raw_orders",
            "resource_type": "seed",
            "package_name": "jaffle_shop",
            "path": "raw_orders.csv",
            "original_file_path": "seeds/raw_orders.csv",
            "unique_id": "seed.jaffle_shop.raw_orders",
            "fqn": [
                "jaffle_shop",
                "raw_orders"
            ],
            "alias": "raw_orders",
            "checksum": {
                "name": "sha256",
                "checksum": "ddecd7adf70a07a88b9c302aec2a03fce615b925c2c06f2d5ef99a5c97b41250"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "seed",
                "incremental_strategy": null,
                "batch_size": null,
                "lookback": 0,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "event_time": null,
                "delimiter": ",",
                "quote_columns": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.4119287,
            "relation_name": "\"dev\".\"schema_02d3bc11\".\"raw_orders\"",
            "raw_code": "",
            "root_path": "/tmp/jobs/70403122785100/target",
            "depends_on": {
                "macros": []
            }
        },
        "seed.jaffle_shop.raw_payments": {
            "database": "dev",
            "schema": "schema_02d3bc11",
            "name": "raw_payments",
            "resource_type": "seed",
            "package_name": "jaffle_shop",
            "path": "raw_payments.csv",
            "original_file_path": "seeds/raw_payments.csv",
            "unique_id": "seed.jaffle_shop.raw_payments",
            "fqn": [
                "jaffle_shop",
                "raw_payments"
            ],
            "alias": "raw_payments",
            "checksum": {
                "name": "sha256",
                "checksum": "6de0626a8db9c1750eefd1b2e17fac4c2a4b9f778eb50532d8b377b90de395e6"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "seed",
                "incremental_strategy": null,
                "batch_size": null,
                "lookback": 0,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "event_time": null,
                "delimiter": ",",
                "quote_columns": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.4137912,
            "relation_name": "\"dev\".\"schema_02d3bc11\".\"raw_payments\"",
            "raw_code": "",
            "root_path": "/tmp/jobs/70403122785100/target",
            "depends_on": {
                "macros": []
            }
        },
        "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "unique_customers_customer_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_customers_customer_id.sql",
            "original_file_path": "models/schema.yml",
            "unique_id": "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1",
            "fqn": [
                "jaffle_shop",
                "unique_customers_customer_id"
            ],
            "alias": "unique_customers_customer_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.539866,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "customers",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.customers"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/unique_customers_customer_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"schema_02d3bc11\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "customer_id",
            "file_key_name": "models.customers",
            "attached_node": "model.jaffle_shop.customers",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('customers')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "not_null_customers_customer_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_customers_customer_id.sql",
            "original_file_path": "models/schema.yml",
            "unique_id": "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d",
            "fqn": [
                "jaffle_shop",
                "not_null_customers_customer_id"
            ],
            "alias": "not_null_customers_customer_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.541775,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "customers",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.customers"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/not_null_customers_customer_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"dev\".\"schema_02d3bc11\".\"customers\"\nwhere customer_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "customer_id",
            "file_key_name": "models.customers",
            "attached_node": "model.jaffle_shop.customers",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('customers')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_orders_order_id.fed79b3a6e": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "unique_orders_order_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_orders_order_id.sql",
            "original_file_path": "models/schema.yml",
            "unique_id": "test.jaffle_shop.unique_orders_order_id.fed79b3a6e",
            "fqn": [
                "jaffle_shop",
                "unique_orders_order_id"
            ],
            "alias": "unique_orders_order_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.5433855,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/unique_orders_order_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"schema_02d3bc11\".\"orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_id",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_orders_order_id.cf6c17daed": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "not_null_orders_order_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_orders_order_id.sql",
            "original_file_path": "models/schema.yml",
            "unique_id": "test.jaffle_shop.not_null_orders_order_id.cf6c17daed",
            "fqn": [
                "jaffle_shop",
                "not_null_orders_order_id"
            ],
            "alias": "not_null_orders_order_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.5449471,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/not_null_orders_order_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"dev\".\"schema_02d3bc11\".\"orders\"\nwhere order_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_id",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_orders_customer_id.c5f02694af": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "not_null_orders_customer_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_orders_customer_id.sql",
            "original_file_path": "models/schema.yml",
            "unique_id": "test.jaffle_shop.not_null_orders_customer_id.c5f02694af",
            "fqn": [
                "jaffle_shop",
                "not_null_orders_customer_id"
            ],
            "alias": "not_null_orders_customer_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.546715,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/not_null_orders_customer_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"dev\".\"schema_02d3bc11\".\"orders\"\nwhere customer_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "customer_id",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "relationships_orders_customer_id__customer_id__ref_customers_",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "relationships_orders_customer_id__customer_id__ref_customers_.sql",
            "original_file_path": "models/schema.yml",
            "unique_id": "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2",
            "fqn": [
                "jaffle_shop",
                "relationships_orders_customer_id__customer_id__ref_customers_"
            ],
            "alias": "relationships_orders_customer_id__customer_id__ref_customers_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.5482135,
            "relation_name": null,
            "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "customers",
                    "package": null,
                    "version": null
                },
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_relationships",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.customers",
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/relationships_orders_customer_id__customer_id__ref_customers_.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"dev\".\"schema_02d3bc11\".\"orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"dev\".\"schema_02d3bc11\".\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "customer_id",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "relationships",
                "kwargs": {
                    "to": "ref('customers')",
                    "field": "customer_id",
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "accepted_values_orders_status__placed__shipped__completed__return_pending__returned",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql",
            "original_file_path": "models/schema.yml",
            "unique_id": "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3",
            "fqn": [
                "jaffle_shop",
                "accepted_values_orders_status__placed__shipped__completed__return_pending__returned"
            ],
            "alias": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [
                "tags_column_one",
                "tags_column_status"
            ],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "alias": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758"
            },
            "created_at": 1727263992.5623538,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"dev\".\"schema_02d3bc11\".\"orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "status",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "placed",
                        "shipped",
                        "completed",
                        "return_pending",
                        "returned"
                    ],
                    "column_name": "status",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_orders_amount.106140f9fd": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "not_null_orders_amount",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_orders_amount.sql",
            "original_file_path": "models/schema.yml",
            "unique_id": "test.jaffle_shop.not_null_orders_amount.106140f9fd",
            "fqn": [
                "jaffle_shop",
                "not_null_orders_amount"
            ],
            "alias": "not_null_orders_amount",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.5701668,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/not_null_orders_amount.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect amount\nfrom \"dev\".\"schema_02d3bc11\".\"orders\"\nwhere amount is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "amount",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "amount",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "not_null_orders_credit_card_amount",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_orders_credit_card_amount.sql",
            "original_file_path": "models/schema.yml",
            "unique_id": "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59",
            "fqn": [
                "jaffle_shop",
                "not_null_orders_credit_card_amount"
            ],
            "alias": "not_null_orders_credit_card_amount",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.5716817,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/not_null_orders_credit_card_amount.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect credit_card_amount\nfrom \"dev\".\"schema_02d3bc11\".\"orders\"\nwhere credit_card_amount is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "credit_card_amount",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "credit_card_amount",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "not_null_orders_coupon_amount",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_orders_coupon_amount.sql",
            "original_file_path": "models/schema.yml",
            "unique_id": "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625",
            "fqn": [
                "jaffle_shop",
                "not_null_orders_coupon_amount"
            ],
            "alias": "not_null_orders_coupon_amount",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.573104,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/not_null_orders_coupon_amount.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect coupon_amount\nfrom \"dev\".\"schema_02d3bc11\".\"orders\"\nwhere coupon_amount is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "coupon_amount",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "coupon_amount",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "not_null_orders_bank_transfer_amount",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_orders_bank_transfer_amount.sql",
            "original_file_path": "models/schema.yml",
            "unique_id": "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49",
            "fqn": [
                "jaffle_shop",
                "not_null_orders_bank_transfer_amount"
            ],
            "alias": "not_null_orders_bank_transfer_amount",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.5745692,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/not_null_orders_bank_transfer_amount.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect bank_transfer_amount\nfrom \"dev\".\"schema_02d3bc11\".\"orders\"\nwhere bank_transfer_amount is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "bank_transfer_amount",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "bank_transfer_amount",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "not_null_orders_gift_card_amount",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_orders_gift_card_amount.sql",
            "original_file_path": "models/schema.yml",
            "unique_id": "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a",
            "fqn": [
                "jaffle_shop",
                "not_null_orders_gift_card_amount"
            ],
            "alias": "not_null_orders_gift_card_amount",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.5761898,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/not_null_orders_gift_card_amount.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect gift_card_amount\nfrom \"dev\".\"schema_02d3bc11\".\"orders\"\nwhere gift_card_amount is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "gift_card_amount",
            "file_key_name": "models.orders",
            "attached_node": "model.jaffle_shop.orders",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "gift_card_amount",
                    "model": "{{ get_where_subquery(ref('orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "unique_stg_customers_customer_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_stg_customers_customer_id.sql",
            "original_file_path": "models/staging/schema.yml",
            "unique_id": "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada",
            "fqn": [
                "jaffle_shop",
                "staging",
                "unique_stg_customers_customer_id"
            ],
            "alias": "unique_stg_customers_customer_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.5800312,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_customers",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_customers"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_customers_customer_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"schema_02d3bc11\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "customer_id",
            "file_key_name": "models.stg_customers",
            "attached_node": "model.jaffle_shop.stg_customers",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('stg_customers')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "not_null_stg_customers_customer_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_stg_customers_customer_id.sql",
            "original_file_path": "models/staging/schema.yml",
            "unique_id": "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_customers_customer_id"
            ],
            "alias": "not_null_stg_customers_customer_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.5815473,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_customers",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_customers"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_customers_customer_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"dev\".\"schema_02d3bc11\".\"stg_customers\"\nwhere customer_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "customer_id",
            "file_key_name": "models.stg_customers",
            "attached_node": "model.jaffle_shop.stg_customers",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "customer_id",
                    "model": "{{ get_where_subquery(ref('stg_customers')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "unique_stg_orders_order_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_stg_orders_order_id.sql",
            "original_file_path": "models/staging/schema.yml",
            "unique_id": "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a",
            "fqn": [
                "jaffle_shop",
                "staging",
                "unique_stg_orders_order_id"
            ],
            "alias": "unique_stg_orders_order_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.583025,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_orders_order_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"schema_02d3bc11\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_id",
            "file_key_name": "models.stg_orders",
            "attached_node": "model.jaffle_shop.stg_orders",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('stg_orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "not_null_stg_orders_order_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_stg_orders_order_id.sql",
            "original_file_path": "models/staging/schema.yml",
            "unique_id": "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_orders_order_id"
            ],
            "alias": "not_null_stg_orders_order_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.5846775,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_orders_order_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"dev\".\"schema_02d3bc11\".\"stg_orders\"\nwhere order_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "order_id",
            "file_key_name": "models.stg_orders",
            "attached_node": "model.jaffle_shop.stg_orders",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "order_id",
                    "model": "{{ get_where_subquery(ref('stg_orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql",
            "original_file_path": "models/staging/schema.yml",
            "unique_id": "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad",
            "fqn": [
                "jaffle_shop",
                "staging",
                "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned"
            ],
            "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58"
            },
            "created_at": 1727263992.5862248,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_orders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_orders"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"dev\".\"schema_02d3bc11\".\"stg_orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "status",
            "file_key_name": "models.stg_orders",
            "attached_node": "model.jaffle_shop.stg_orders",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "placed",
                        "shipped",
                        "completed",
                        "return_pending",
                        "returned"
                    ],
                    "column_name": "status",
                    "model": "{{ get_where_subquery(ref('stg_orders')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.unique_stg_payments_payment_id.3744510712": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "unique_stg_payments_payment_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "unique_stg_payments_payment_id.sql",
            "original_file_path": "models/staging/schema.yml",
            "unique_id": "test.jaffle_shop.unique_stg_payments_payment_id.3744510712",
            "fqn": [
                "jaffle_shop",
                "staging",
                "unique_stg_payments_payment_id"
            ],
            "alias": "unique_stg_payments_payment_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.5898745,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_payments",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_payments"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_payments_payment_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nselect\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"schema_02d3bc11\".\"stg_payments\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "payment_id",
            "file_key_name": "models.stg_payments",
            "attached_node": "model.jaffle_shop.stg_payments",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "payment_id",
                    "model": "{{ get_where_subquery(ref('stg_payments')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "not_null_stg_payments_payment_id",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "not_null_stg_payments_payment_id.sql",
            "original_file_path": "models/staging/schema.yml",
            "unique_id": "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075",
            "fqn": [
                "jaffle_shop",
                "staging",
                "not_null_stg_payments_payment_id"
            ],
            "alias": "not_null_stg_payments_payment_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1727263992.5915532,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_payments",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_payments"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_payments_payment_id.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"dev\".\"schema_02d3bc11\".\"stg_payments\"\nwhere payment_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "payment_id",
            "file_key_name": "models.stg_payments",
            "attached_node": "model.jaffle_shop.stg_payments",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "payment_id",
                    "model": "{{ get_where_subquery(ref('stg_payments')) }}"
                },
                "namespace": null
            }
        },
        "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": {
            "database": "dev",
            "schema": "schema_02d3bc11_dbt_test__audit",
            "name": "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card",
            "resource_type": "test",
            "package_name": "jaffle_shop",
            "path": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql",
            "original_file_path": "models/staging/schema.yml",
            "unique_id": "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278",
            "fqn": [
                "jaffle_shop",
                "staging",
                "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card"
            ],
            "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {
                    "test_suite_name": "DBT TEST SUITE",
                    "test_suite_desciption": "Dbt test suite description"
                },
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {
                "test_suite_name": "DBT TEST SUITE",
                "test_suite_desciption": "Dbt test suite description"
            },
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef"
            },
            "created_at": 1727263992.5930774,
            "relation_name": null,
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_payments",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.jaffle_shop.stg_payments"
                ]
            },
            "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql",
            "compiled": true,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from \"dev\".\"schema_02d3bc11\".\"stg_payments\"\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "payment_method",
            "file_key_name": "models.stg_payments",
            "attached_node": "model.jaffle_shop.stg_payments",
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "credit_card",
                        "coupon",
                        "bank_transfer",
                        "gift_card"
                    ],
                    "column_name": "payment_method",
                    "model": "{{ get_where_subquery(ref('stg_payments')) }}"
                },
                "namespace": null
            }
        }
    },
    "sources": {},
    "macros": {
        "macro.dbt_redshift.dist": {
            "name": "dist",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.dist",
            "macro_sql": "{% macro dist(dist) %}\n  {%- if dist is not none -%}\n      {%- set dist = dist.strip().lower() -%}\n\n      {%- if dist in ['all', 'even'] -%}\n        diststyle {{ dist }}\n      {%- elif dist == \"auto\" -%}\n      {%- else -%}\n        diststyle key distkey ({{ dist }})\n      {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.481086,
            "supported_languages": null
        },
        "macro.dbt_redshift.sort": {
            "name": "sort",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.sort",
            "macro_sql": "{% macro sort(sort_type, sort) %}\n  {%- if sort is not none %}\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\n      {%- if sort is string -%}\n        {%- set sort = [sort] -%}\n      {%- endif -%}\n      {%- for item in sort -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n  {%- endif %}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.48176,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__create_table_as": {
            "name": "redshift__create_table_as",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__create_table_as",
            "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\n\n  {%- set _dist = config.get('dist') -%}\n  {%- set _sort_type = config.get(\n          'sort_type',\n          validator=validation.any['compound', 'interleaved']) -%}\n  {%- set _sort = config.get(\n          'sort',\n          validator=validation.any[list, basestring]) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- set backup = config.get('backup') -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {{ get_table_columns_and_constraints() }}\n    {{ get_assert_columns_equivalent(sql) }}\n    {%- set sql = get_select_subquery(sql) %}\n    {% if backup == false -%}backup no{%- endif %}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n  ;\n\n  insert into {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    (\n      {{ sql }}\n    )\n  ;\n\n  {%- else %}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {% if backup == false -%}backup no{%- endif %}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n  as (\n    {{ sql }}\n  );\n\n  {%- endif %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_table_columns_and_constraints",
                    "macro.dbt.get_assert_columns_equivalent",
                    "macro.dbt.get_select_subquery",
                    "macro.dbt_redshift.dist",
                    "macro.dbt_redshift.sort"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4838083,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__create_view_as": {
            "name": "redshift__create_view_as",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__create_view_as",
            "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.484531,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__create_schema": {
            "name": "redshift__create_schema",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__create_schema",
            "macro_sql": "{% macro redshift__create_schema(relation) -%}\n  {{ postgres__create_schema(relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__create_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.484696,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__drop_schema": {
            "name": "redshift__drop_schema",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__drop_schema",
            "macro_sql": "{% macro redshift__drop_schema(relation) -%}\n  {{ postgres__drop_schema(relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__drop_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.484847,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_columns_in_relation": {
            "name": "redshift__get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation",
            "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with bound_views as (\n        select\n          ordinal_position,\n          table_schema,\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n        from information_schema.\"columns\"\n        where table_name = '{{ relation.identifier }}'\n    ),\n\n    unbound_views as (\n      select\n        ordinal_position,\n        view_schema,\n        col_name,\n        case\n          when col_type ilike 'character varying%' then\n            'character varying'\n          when col_type ilike 'numeric%' then 'numeric'\n          else col_type\n        end as col_type,\n        case\n          when col_type like 'character%'\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n\n      from pg_get_late_binding_view_cols()\n      cols(view_schema name, view_name name, col_name name,\n           col_type varchar, ordinal_position int)\n      where view_name = '{{ relation.identifier }}'\n    ),\n\n    external_views as (\n      select\n        columnnum,\n        schemaname,\n        columnname,\n        case\n          when external_type ilike 'character varying%' or external_type ilike 'varchar%'\n          then 'character varying'\n          when external_type ilike 'numeric%' then 'numeric'\n          else external_type\n        end as external_type,\n        case\n          when external_type like 'character%' or external_type like 'varchar%'\n          then nullif(\n            REGEXP_SUBSTR(external_type, '[0-9]+'),\n            '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n      from\n        pg_catalog.svv_external_columns\n      where\n        schemaname = '{{ relation.schema }}'\n        and tablename = '{{ relation.identifier }}'\n\n    ),\n\n    unioned as (\n      select * from bound_views\n      union all\n      select * from unbound_views\n      union all\n      select * from external_views\n    )\n\n    select\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n    from unioned\n    {% if relation.schema %}\n    where table_schema = '{{ relation.schema }}'\n    {% endif %}\n    order by ordinal_position\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.sql_convert_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.48567,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__list_relations_without_caching": {
            "name": "redshift__list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching",
            "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n        table_catalog as database,\n        table_name as name,\n        table_schema as schema,\n        'table' as type\n    from information_schema.tables\n    where table_schema ilike '{{ schema_relation.schema }}'\n    and table_type = 'BASE TABLE'\n    union all\n    select\n      table_catalog as database,\n      table_name as name,\n      table_schema as schema,\n      case\n        when view_definition ilike '%create materialized view%'\n          then 'materialized_view'\n        else 'view'\n      end as type\n    from information_schema.views\n    where table_schema ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.48607,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__information_schema_name": {
            "name": "redshift__information_schema_name",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__information_schema_name",
            "macro_sql": "{% macro redshift__information_schema_name(database) -%}\n  {{ return(postgres__information_schema_name(database)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.48624,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__list_schemas": {
            "name": "redshift__list_schemas",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__list_schemas",
            "macro_sql": "{% macro redshift__list_schemas(database) -%}\n  {{ return(postgres__list_schemas(database)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__list_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4864028,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__check_schema_exists": {
            "name": "redshift__check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__check_schema_exists",
            "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__check_schema_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4865906,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__persist_docs": {
            "name": "redshift__persist_docs",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__persist_docs",
            "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {# Override: do not set column comments for LBVs #}\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4873564,
            "supported_languages": null
        },
        "macro.dbt_redshift.escape_comment": {
            "name": "escape_comment",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.escape_comment",
            "macro_sql": "{% macro escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4878714,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__alter_relation_comment": {
            "name": "redshift__alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__alter_relation_comment",
            "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\n  {%- set escaped_comment = escape_comment(comment) -%}\n  {%- set relation_type = 'view' if relation.type == 'materialized_view' else relation.type -%}\n  comment on {{ relation_type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.escape_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4882271,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__alter_column_comment": {
            "name": "redshift__alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__alter_column_comment",
            "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4884324,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__alter_relation_add_remove_columns": {
            "name": "redshift__alter_relation_add_remove_columns",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_redshift.redshift__alter_relation_add_remove_columns",
            "macro_sql": "{% macro redshift__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% for column in add_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} add column {{ column.name }} {{ column.data_type }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% for column in remove_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} drop column {{ column.name }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4892488,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_relations": {
            "name": "redshift__get_relations",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/relations.sql",
            "original_file_path": "macros/relations.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_relations",
            "macro_sql": "{% macro redshift__get_relations() -%}\n\n{%- call statement('relations', fetch_result=True) -%}\n\nwith\n    relation as (\n        select\n            pg_class.oid as relation_id,\n            pg_class.relname as relation_name,\n            pg_class.relnamespace as schema_id,\n            pg_namespace.nspname as schema_name,\n            pg_class.relkind as relation_type\n        from pg_class\n        join pg_namespace\n          on pg_class.relnamespace = pg_namespace.oid\n        where pg_namespace.nspname != 'information_schema'\n          and pg_namespace.nspname not like 'pg\\_%'\n    ),\n    dependency as (\n        select distinct\n            coalesce(pg_rewrite.ev_class, pg_depend.objid) as dep_relation_id,\n            pg_depend.refobjid as ref_relation_id,\n            pg_depend.refclassid as ref_class_id\n        from pg_depend\n        left join pg_rewrite\n          on pg_depend.objid = pg_rewrite.oid\n        where coalesce(pg_rewrite.ev_class, pg_depend.objid) != pg_depend.refobjid\n    )\n\nselect distinct\n    dep.schema_name as dependent_schema,\n    dep.relation_name as dependent_name,\n    ref.schema_name as referenced_schema,\n    ref.relation_name as referenced_name\nfrom dependency\njoin relation ref\n    on dependency.ref_relation_id = ref.relation_id\njoin relation dep\n    on dependency.dep_relation_id = dep.relation_id\n\n{%- endcall -%}\n\n{{ return(load_result('relations').table) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4897878,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__current_timestamp": {
            "name": "redshift__current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/timestamps.sql",
            "original_file_path": "macros/timestamps.sql",
            "unique_id": "macro.dbt_redshift.redshift__current_timestamp",
            "macro_sql": "{% macro redshift__current_timestamp() -%}\n    getdate()\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.490019,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__snapshot_get_time": {
            "name": "redshift__snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/timestamps.sql",
            "original_file_path": "macros/timestamps.sql",
            "unique_id": "macro.dbt_redshift.redshift__snapshot_get_time",
            "macro_sql": "{% macro redshift__snapshot_get_time() -%}\n    {{ current_timestamp() }}::timestamp\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4901478,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__snapshot_string_as_time": {
            "name": "redshift__snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/timestamps.sql",
            "original_file_path": "macros/timestamps.sql",
            "unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time",
            "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4903631,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__current_timestamp_backcompat": {
            "name": "redshift__current_timestamp_backcompat",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/timestamps.sql",
            "original_file_path": "macros/timestamps.sql",
            "unique_id": "macro.dbt_redshift.redshift__current_timestamp_backcompat",
            "macro_sql": "{% macro redshift__current_timestamp_backcompat() -%}\n    getdate()\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.490461,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat": {
            "name": "redshift__current_timestamp_in_utc_backcompat",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/timestamps.sql",
            "original_file_path": "macros/timestamps.sql",
            "unique_id": "macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro redshift__current_timestamp_in_utc_backcompat() -%}\n    getdate()\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4905581,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__snapshot_merge_sql": {
            "name": "redshift__snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/materializations/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshot_merge.sql",
            "unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql",
            "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4908178,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_merge_sql": {
            "name": "redshift__get_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/materializations/incremental_merge.sql",
            "original_file_path": "macros/materializations/incremental_merge.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_merge_sql",
            "macro_sql": "{% macro redshift__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] -%}\n    {% if incremental_predicates is not none %}\n        {%- set incremental_predicates_list = [] + incremental_predicates -%}\n        {%- for pred in incremental_predicates_list -%}\n            {% if \"DBT_INTERNAL_DEST.\" in pred %}\n                {%- set pred =  pred | replace(\"DBT_INTERNAL_DEST.\", target ~ \".\" ) -%}\n            {% endif %}\n            {% if \"dbt_internal_dest.\" in pred %}\n                {%- set pred =  pred | replace(\"dbt_internal_dest.\", target ~ \".\" ) -%}\n            {% endif %}\n            {% do predicates.append(pred) %}\n        {% endfor %}\n    {% endif %}\n\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set insert_columns = get_merge_update_columns(none, none, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = {{ target }}.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = {{ target }}.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }}\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {% endif %}\n        {% endfor %}\n    {% endif %}\n\n    when not matched then insert (\n        {% for column_name in insert_columns -%}\n            {{ column_name }}\n            {%- if not loop.last %}, {% endif %}\n        {% endfor %}\n    )\n    values (\n        {% for column_name in insert_columns -%}\n            DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {% endif %}\n        {% endfor %}\n    )\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4942455,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_materialized_view_configuration_changes": {
            "name": "redshift__get_materialized_view_configuration_changes",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/materializations/materialized_view.sql",
            "original_file_path": "macros/materializations/materialized_view.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_materialized_view_configuration_changes",
            "macro_sql": "{% macro redshift__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = redshift__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__describe_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.4947069,
            "supported_languages": null
        },
        "macro.dbt_redshift.materialization_view_redshift": {
            "name": "materialization_view_redshift",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/materializations/view.sql",
            "original_file_path": "macros/materializations/view.sql",
            "unique_id": "macro.dbt_redshift.materialization_view_redshift",
            "macro_sql": "{%- materialization view, adapter='redshift' -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {% if existing_relation.can_be_renamed %}\n            {{ adapter.rename_relation(existing_relation, backup_relation) }}\n        {% else  %}\n            {{ drop_relation_if_exists(existing_relation) }}\n        {% endif %}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.497471,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_redshift.materialization_table_redshift": {
            "name": "materialization_table_redshift",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/materializations/table.sql",
            "original_file_path": "macros/materializations/table.sql",
            "unique_id": "macro.dbt_redshift.materialization_table_redshift",
            "macro_sql": "{% materialization table, adapter='redshift' %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {% if existing_relation.can_be_renamed %}\n            {{ adapter.rename_relation(existing_relation, backup_relation) }}\n        {% else  %}\n            {{ drop_relation_if_exists(existing_relation) }}\n        {% endif %}\n    {% endif %}\n  {% endif %}\n\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5001745,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_redshift.redshift__create_csv_table": {
            "name": "redshift__create_csv_table",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt_redshift.redshift__create_csv_table",
            "macro_sql": "{% macro redshift__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n  {%- set _dist = model['config'].get('dist', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n    {{ dist(_dist) }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.dist",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5016675,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_batch_size": {
            "name": "redshift__get_batch_size",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_batch_size",
            "macro_sql": "{% macro redshift__get_batch_size() %}\n  {{ return(500) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.501831,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__drop_table": {
            "name": "redshift__drop_table",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/relations/table/drop.sql",
            "original_file_path": "macros/relations/table/drop.sql",
            "unique_id": "macro.dbt_redshift.redshift__drop_table",
            "macro_sql": "{%- macro redshift__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5020177,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_rename_table_sql": {
            "name": "redshift__get_rename_table_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/relations/table/rename.sql",
            "original_file_path": "macros/relations/table/rename.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_rename_table_sql",
            "macro_sql": "{% macro redshift__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5022287,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_replace_view_sql": {
            "name": "redshift__get_replace_view_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_replace_view_sql",
            "macro_sql": "{% macro redshift__get_replace_view_sql(relation, sql) -%}\n\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %} as (\n    {{ sql }}\n  ) {{ bind_qualifier }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5030534,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__drop_view": {
            "name": "redshift__drop_view",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/relations/view/drop.sql",
            "original_file_path": "macros/relations/view/drop.sql",
            "unique_id": "macro.dbt_redshift.redshift__drop_view",
            "macro_sql": "{%- macro redshift__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5032444,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_rename_view_sql": {
            "name": "redshift__get_rename_view_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/relations/view/rename.sql",
            "original_file_path": "macros/relations/view/rename.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_rename_view_sql",
            "macro_sql": "{% macro redshift__get_rename_view_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.503454,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__drop_materialized_view": {
            "name": "redshift__drop_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/relations/materialized_view/drop.sql",
            "original_file_path": "macros/relations/materialized_view/drop.sql",
            "unique_id": "macro.dbt_redshift.redshift__drop_materialized_view",
            "macro_sql": "{% macro redshift__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5036232,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_create_materialized_view_as_sql": {
            "name": "redshift__get_create_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/relations/materialized_view/create.sql",
            "original_file_path": "macros/relations/materialized_view/create.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_create_materialized_view_as_sql",
            "macro_sql": "{% macro redshift__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = relation.from_config(config.model) -%}\n\n    create materialized view {{ materialized_view.path }}\n        backup {% if materialized_view.backup %}yes{% else %}no{% endif %}\n        diststyle {{ materialized_view.dist.diststyle }}\n        {% if materialized_view.dist.distkey %}distkey ({{ materialized_view.dist.distkey }}){% endif %}\n        {% if materialized_view.sort.sortkey %}sortkey ({{ ','.join(materialized_view.sort.sortkey) }}){% endif %}\n        auto refresh {% if materialized_view.autorefresh %}yes{% else %}no{% endif %}\n    as (\n        {{ materialized_view.query }}\n    )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.504492,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__describe_materialized_view": {
            "name": "redshift__describe_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/relations/materialized_view/describe.sql",
            "original_file_path": "macros/relations/materialized_view/describe.sql",
            "unique_id": "macro.dbt_redshift.redshift__describe_materialized_view",
            "macro_sql": "{% macro redshift__describe_materialized_view(relation) %}\n    {#-\n        These need to be separate queries because redshift will not let you run queries\n        against svv_table_info and pg_views in the same query. The same is true of svv_redshift_columns.\n    -#}\n\n    {%- set _materialized_view_sql -%}\n        select\n            tb.database,\n            tb.schema,\n            tb.table,\n            tb.diststyle,\n            tb.sortkey1,\n            mv.autorefresh\n        from svv_table_info tb\n        -- svv_mv_info is queryable by Redshift Serverless, but stv_mv_info is not\n        left join svv_mv_info mv\n            on mv.database_name = tb.database\n            and mv.schema_name = tb.schema\n            and mv.name = tb.table\n        where tb.table ilike '{{ relation.identifier }}'\n        and tb.schema ilike '{{ relation.schema }}'\n        and tb.database ilike '{{ relation.database }}'\n    {%- endset %}\n    {% set _materialized_view = run_query(_materialized_view_sql) %}\n\n    {%- set _column_descriptor_sql -%}\n        SELECT\n            a.attname as column,\n            a.attisdistkey as is_dist_key,\n            a.attsortkeyord as sort_key_position\n        FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        JOIN pg_attribute a ON a.attrelid = c.oid\n        WHERE\n            n.nspname ilike '{{ relation.schema }}'\n            AND c.relname LIKE 'mv_tbl__{{ relation.identifier }}__%'\n    {%- endset %}\n    {% set _column_descriptor = run_query(_column_descriptor_sql) %}\n\n    {%- set _query_sql -%}\n        select\n            vw.definition\n        from pg_views vw\n        where vw.viewname = '{{ relation.identifier }}'\n        and vw.schemaname = '{{ relation.schema }}'\n        and vw.definition ilike '%create materialized view%'\n    {%- endset %}\n    {% set _query = run_query(_query_sql) %}\n\n    {% do return({\n       'materialized_view': _materialized_view,\n       'query': _query,\n       'columns': _column_descriptor,\n    })%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5057085,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_alter_materialized_view_as_sql": {
            "name": "redshift__get_alter_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_alter_materialized_view_as_sql",
            "macro_sql": "{% macro redshift__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation,  sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {%- set autorefresh = configuration_changes.autorefresh -%}\n        {%- if autorefresh -%}{{- log('Applying UPDATE AUTOREFRESH to: ' ~ relation) -}}{%- endif -%}\n\n        alter materialized view {{ relation }}\n            auto refresh {% if autorefresh.context %}yes{% else %}no{% endif %}\n\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_replace_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.506462,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__refresh_materialized_view": {
            "name": "redshift__refresh_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/relations/materialized_view/refresh.sql",
            "original_file_path": "macros/relations/materialized_view/refresh.sql",
            "unique_id": "macro.dbt_redshift.redshift__refresh_materialized_view",
            "macro_sql": "{% macro redshift__refresh_materialized_view(relation) -%}\n    refresh materialized view {{ relation }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5066416,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_relation_last_modified": {
            "name": "redshift__get_relation_last_modified",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/metadata/relation_last_modified.sql",
            "original_file_path": "macros/metadata/relation_last_modified.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_relation_last_modified",
            "macro_sql": "{% macro redshift__get_relation_last_modified(information_schema, relations) -%}\n\n    {%- call statement('last_modified', fetch_result=True) -%}\n        select\n            ns.nspname as \"schema\",\n            c.relname as identifier,\n            max(qd.start_time) as last_modified,\n            {{ current_timestamp() }} as snapshotted_at\n        from pg_class c\n        join pg_namespace ns\n            on ns.oid = c.relnamespace\n        join sys_query_detail qd\n            on qd.table_id = c.oid\n        where qd.step_name = 'insert'\n        and (\n            {%- for relation in relations -%}\n                (\n                    upper(ns.nspname) = upper('{{ relation.schema }}')\n                and upper(c.relname) = upper('{{ relation.identifier }}')\n                )\n                {%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n        )\n        group by 1, 2, 4\n    {%- endcall -%}\n\n    {{ return(load_result('last_modified')) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5073566,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_catalog": {
            "name": "redshift__get_catalog",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/by_schema.sql",
            "original_file_path": "macros/catalog/by_schema.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_catalog",
            "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\n\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = _redshift__get_base_catalog_by_schema(database, schemas) %}\n\n    {% set select_extended = redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = _redshift__get_extended_catalog_by_schema(schemas) %}\n        {% set catalog = catalog.join(extended_catalog, ['table_schema', 'table_name']) %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift._redshift__get_base_catalog_by_schema",
                    "macro.dbt_redshift.redshift__can_select_from",
                    "macro.dbt_redshift._redshift__get_extended_catalog_by_schema",
                    "macro.dbt_redshift.redshift__no_svv_table_info_warning"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.508531,
            "supported_languages": null
        },
        "macro.dbt_redshift._redshift__get_base_catalog_by_schema": {
            "name": "_redshift__get_base_catalog_by_schema",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/by_schema.sql",
            "original_file_path": "macros/catalog/by_schema.sql",
            "unique_id": "macro.dbt_redshift._redshift__get_base_catalog_by_schema",
            "macro_sql": "{% macro _redshift__get_base_catalog_by_schema(database, schemas) -%}\n    {%- call statement('base_catalog', fetch_result=True) -%}\n        with\n            late_binding as ({{ _redshift__get_late_binding_by_schema_sql(schemas) }}),\n            early_binding as ({{ _redshift__get_early_binding_by_schema_sql(database, schemas) }}),\n            unioned as (select * from early_binding union all select * from late_binding),\n            table_owners as ({{ redshift__get_table_owners_sql() }})\n        select '{{ database }}' as table_database, *\n        from unioned\n        join table_owners using (table_schema, table_name)\n        order by \"column_index\"\n    {%- endcall -%}\n    {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_redshift._redshift__get_late_binding_by_schema_sql",
                    "macro.dbt_redshift._redshift__get_early_binding_by_schema_sql",
                    "macro.dbt_redshift.redshift__get_table_owners_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5090044,
            "supported_languages": null
        },
        "macro.dbt_redshift._redshift__get_late_binding_by_schema_sql": {
            "name": "_redshift__get_late_binding_by_schema_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/by_schema.sql",
            "original_file_path": "macros/catalog/by_schema.sql",
            "unique_id": "macro.dbt_redshift._redshift__get_late_binding_by_schema_sql",
            "macro_sql": "{% macro _redshift__get_late_binding_by_schema_sql(schemas) %}\n    {{ redshift__get_late_binding_sql() }}\n    where (\n        {%- for schema in schemas -%}\n            upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_late_binding_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5093608,
            "supported_languages": null
        },
        "macro.dbt_redshift._redshift__get_early_binding_by_schema_sql": {
            "name": "_redshift__get_early_binding_by_schema_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/by_schema.sql",
            "original_file_path": "macros/catalog/by_schema.sql",
            "unique_id": "macro.dbt_redshift._redshift__get_early_binding_by_schema_sql",
            "macro_sql": "{% macro _redshift__get_early_binding_by_schema_sql(database, schemas) %}\n    {{ redshift__get_early_binding_sql(database) }}\n    and (\n        {%- for schema in schemas -%}\n            upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_early_binding_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5096908,
            "supported_languages": null
        },
        "macro.dbt_redshift._redshift__get_extended_catalog_by_schema": {
            "name": "_redshift__get_extended_catalog_by_schema",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/by_schema.sql",
            "original_file_path": "macros/catalog/by_schema.sql",
            "unique_id": "macro.dbt_redshift._redshift__get_extended_catalog_by_schema",
            "macro_sql": "{% macro _redshift__get_extended_catalog_by_schema(schemas) %}\n    {%- call statement('extended_catalog', fetch_result=True) -%}\n        {{ redshift__get_extended_catalog_sql() }}\n        where (\n            {%- for schema in schemas -%}\n                upper(\"schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n        )\n    {%- endcall -%}\n    {{ return(load_result('extended_catalog').table) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_redshift.redshift__get_extended_catalog_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5101557,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_catalog_relations": {
            "name": "redshift__get_catalog_relations",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/by_relation.sql",
            "original_file_path": "macros/catalog/by_relation.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_catalog_relations",
            "macro_sql": "{% macro redshift__get_catalog_relations(information_schema, relations) -%}\n\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = _redshift__get_base_catalog_by_relation(database, relations) %}\n\n    {% set select_extended = redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = _redshift__get_extended_catalog_by_relation(relations) %}\n        {% set catalog = catalog.join(extended_catalog, ['table_schema', 'table_name']) %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift._redshift__get_base_catalog_by_relation",
                    "macro.dbt_redshift.redshift__can_select_from",
                    "macro.dbt_redshift._redshift__get_extended_catalog_by_relation",
                    "macro.dbt_redshift.redshift__no_svv_table_info_warning"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5114079,
            "supported_languages": null
        },
        "macro.dbt_redshift._redshift__get_base_catalog_by_relation": {
            "name": "_redshift__get_base_catalog_by_relation",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/by_relation.sql",
            "original_file_path": "macros/catalog/by_relation.sql",
            "unique_id": "macro.dbt_redshift._redshift__get_base_catalog_by_relation",
            "macro_sql": "{% macro _redshift__get_base_catalog_by_relation(database, relations) -%}\n    {%- call statement('base_catalog', fetch_result=True) -%}\n        with\n            late_binding as ({{ _redshift__get_late_binding_by_relation_sql(relations) }}),\n            early_binding as ({{ _redshift__get_early_binding_by_relation_sql(database, relations) }}),\n            unioned as (select * from early_binding union all select * from late_binding),\n            table_owners as ({{ redshift__get_table_owners_sql() }})\n        select '{{ database }}' as table_database, *\n        from unioned\n        join table_owners using (table_schema, table_name)\n        order by \"column_index\"\n    {%- endcall -%}\n    {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_redshift._redshift__get_late_binding_by_relation_sql",
                    "macro.dbt_redshift._redshift__get_early_binding_by_relation_sql",
                    "macro.dbt_redshift.redshift__get_table_owners_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5120103,
            "supported_languages": null
        },
        "macro.dbt_redshift._redshift__get_late_binding_by_relation_sql": {
            "name": "_redshift__get_late_binding_by_relation_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/by_relation.sql",
            "original_file_path": "macros/catalog/by_relation.sql",
            "unique_id": "macro.dbt_redshift._redshift__get_late_binding_by_relation_sql",
            "macro_sql": "{% macro _redshift__get_late_binding_by_relation_sql(relations) %}\n    {{ redshift__get_late_binding_sql() }}\n    where (\n        {%- for relation in relations -%}\n            (\n                upper(table_schema) = upper('{{ relation.schema }}')\n            and upper(table_name) = upper('{{ relation.identifier }}')\n            )\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_late_binding_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.51237,
            "supported_languages": null
        },
        "macro.dbt_redshift._redshift__get_early_binding_by_relation_sql": {
            "name": "_redshift__get_early_binding_by_relation_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/by_relation.sql",
            "original_file_path": "macros/catalog/by_relation.sql",
            "unique_id": "macro.dbt_redshift._redshift__get_early_binding_by_relation_sql",
            "macro_sql": "{% macro _redshift__get_early_binding_by_relation_sql(database, relations) %}\n    {{ redshift__get_early_binding_sql(database) }}\n    and (\n        {%- for relation in relations -%}\n            (\n                upper(sch.nspname) = upper('{{ relation.schema }}')\n            and upper(tbl.relname) = upper('{{ relation.identifier }}')\n            )\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_early_binding_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.512742,
            "supported_languages": null
        },
        "macro.dbt_redshift._redshift__get_extended_catalog_by_relation": {
            "name": "_redshift__get_extended_catalog_by_relation",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/by_relation.sql",
            "original_file_path": "macros/catalog/by_relation.sql",
            "unique_id": "macro.dbt_redshift._redshift__get_extended_catalog_by_relation",
            "macro_sql": "{% macro _redshift__get_extended_catalog_by_relation(relations) %}\n    {%- call statement('extended_catalog', fetch_result=True) -%}\n        {{ redshift__get_extended_catalog_sql() }}\n        where (\n            {%- for relation in relations -%}\n                (\n                    upper(\"schema\") = upper('{{ relation.schema }}')\n                and upper(\"table\") = upper('{{ relation.identifier }}')\n                )\n            {%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n        )\n    {%- endcall -%}\n    {{ return(load_result('extended_catalog').table) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_redshift.redshift__get_extended_catalog_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5132744,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_late_binding_sql": {
            "name": "redshift__get_late_binding_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/catalog.sql",
            "original_file_path": "macros/catalog/catalog.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_late_binding_sql",
            "macro_sql": "{% macro redshift__get_late_binding_sql() %}\n    select\n        table_schema,\n        table_name,\n        'LATE BINDING VIEW'::varchar as table_type,\n        null::text as table_comment,\n        column_name,\n        column_index,\n        column_type,\n        null::text as column_comment\n    from pg_get_late_binding_view_cols()\n        cols(\n            table_schema name,\n            table_name name,\n            column_name name,\n            column_type varchar,\n            column_index int\n        )\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5139005,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_early_binding_sql": {
            "name": "redshift__get_early_binding_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/catalog.sql",
            "original_file_path": "macros/catalog/catalog.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_early_binding_sql",
            "macro_sql": "{% macro redshift__get_early_binding_sql(database) %}\n    select\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case\n            when tbl.relkind = 'v' and mat_views.table_name is not null then 'MATERIALIZED VIEW'\n            when tbl.relkind = 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl\n        on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col\n        on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc\n        on tbl_desc.objoid = tbl.oid\n        and tbl_desc.objsubid = 0\n    left outer join pg_catalog.pg_description col_desc\n        on col_desc.objoid = tbl.oid\n        and col_desc.objsubid = col.attnum\n    left outer join information_schema.views mat_views\n        on mat_views.table_schema = sch.nspname\n        and mat_views.table_name = tbl.relname\n        and mat_views.view_definition ilike '%create materialized view%'\n        and mat_views.table_catalog = '{{ database }}'\n    where tbl.relkind in ('r', 'v', 'f', 'p')\n    and col.attnum > 0\n    and not col.attisdropped\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5141265,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_table_owners_sql": {
            "name": "redshift__get_table_owners_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/catalog.sql",
            "original_file_path": "macros/catalog/catalog.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_table_owners_sql",
            "macro_sql": "{% macro redshift__get_table_owners_sql() %}\n    select\n        schemaname as table_schema,\n        tablename as table_name,\n        tableowner as table_owner\n    from pg_tables\n    union all\n    select\n        schemaname as table_schema,\n        viewname as table_name,\n        viewowner as table_owner\n    from pg_views\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.514245,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_extended_catalog_sql": {
            "name": "redshift__get_extended_catalog_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/catalog.sql",
            "original_file_path": "macros/catalog/catalog.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_extended_catalog_sql",
            "macro_sql": "{% macro redshift__get_extended_catalog_sql() %}\n    select\n        \"schema\" as table_schema,\n        \"table\" as table_name,\n\n        'Encoded'::text as \"stats:encoded:label\",\n        encoded as \"stats:encoded:value\",\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\n        true as \"stats:encoded:include\",\n\n        'Dist Style' as \"stats:diststyle:label\",\n        diststyle as \"stats:diststyle:value\",\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\n        true as \"stats:diststyle:include\",\n\n        'Sort Key 1' as \"stats:sortkey1:label\",\n        -- handle 0xFF byte in response for interleaved sort styles\n        case\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\n            else sortkey1\n        end as \"stats:sortkey1:value\",\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\n\n        'Max Varchar' as \"stats:max_varchar:label\",\n        max_varchar as \"stats:max_varchar:value\",\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\n        true as \"stats:max_varchar:include\",\n\n        -- exclude this, as the data is strangely returned with null-byte characters\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\n        false as \"stats:sortkey1_enc:include\",\n\n        '# Sort Keys' as \"stats:sortkey_num:label\",\n        sortkey_num as \"stats:sortkey_num:value\",\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\n\n        'Approximate Size' as \"stats:size:label\",\n        size * 1000000 as \"stats:size:value\",\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\n        true as \"stats:size:include\",\n\n        'Disk Utilization' as \"stats:pct_used:label\",\n        pct_used / 100.0 as \"stats:pct_used:value\",\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\n        true as \"stats:pct_used:include\",\n\n        'Unsorted %' as \"stats:unsorted:label\",\n        unsorted / 100.0 as \"stats:unsorted:value\",\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\n        (unsorted is not null) as \"stats:unsorted:include\",\n\n        'Stats Off' as \"stats:stats_off:label\",\n        stats_off as \"stats:stats_off:value\",\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\n        true as \"stats:stats_off:include\",\n\n        'Approximate Row Count' as \"stats:rows:label\",\n        tbl_rows as \"stats:rows:value\",\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\n        true as \"stats:rows:include\",\n\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\n\n        'Skew Rows' as \"stats:skew_rows:label\",\n        skew_rows as \"stats:skew_rows:value\",\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\n        (skew_rows is not null) as \"stats:skew_rows:include\"\n\n    from svv_table_info\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5146155,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__can_select_from": {
            "name": "redshift__can_select_from",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/catalog.sql",
            "original_file_path": "macros/catalog/catalog.sql",
            "unique_id": "macro.dbt_redshift.redshift__can_select_from",
            "macro_sql": "{% macro redshift__can_select_from(table_name) %}\n\n    {%- call statement('has_table_privilege', fetch_result=True) -%}\n        select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\n    {%- endcall -%}\n\n    {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\n    {{ return(can_select) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5150237,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__no_svv_table_info_warning": {
            "name": "redshift__no_svv_table_info_warning",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/catalog/catalog.sql",
            "original_file_path": "macros/catalog/catalog.sql",
            "unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning",
            "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\n\n    {% set msg %}\n\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\n\n    {% endset %}\n\n    {{ log(msg, info=True) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.515327,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__validate_fixture_rows": {
            "name": "redshift__validate_fixture_rows",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters/unit_testing.sql",
            "original_file_path": "macros/adapters/unit_testing.sql",
            "unique_id": "macro.dbt_redshift.redshift__validate_fixture_rows",
            "macro_sql": "{%- macro redshift__validate_fixture_rows(rows, row_number) -%}\n  {%- if rows is not none and rows|length > 0 -%}\n    {%- set row = rows[0] -%}\n    {%- for key, value in row.items() -%}\n      {%- if value is none -%}\n          {%- set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") -%}\n          {{ exceptions.raise_compiler_error(\"Unit test fixture \" ~ fixture_name ~ \" in \" ~ model.name ~ \" does not have any row free of null values, which may cause type mismatch errors during unit test execution.\") }}\n      {%- endif -%}\n    {%- endfor -%}\n  {%- endif -%}\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.516189,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__get_show_grant_sql": {
            "name": "redshift__get_show_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt_redshift.redshift__get_show_grant_sql",
            "macro_sql": "{% macro redshift__get_show_grant_sql(relation) %}\n\nwith privileges as (\n\n    -- valid options per https://docs.aws.amazon.com/redshift/latest/dg/r_HAS_TABLE_PRIVILEGE.html\n    select 'select' as privilege_type\n    union all\n    select 'insert' as privilege_type\n    union all\n    select 'update' as privilege_type\n    union all\n    select 'delete' as privilege_type\n    union all\n    select 'references' as privilege_type\n\n)\n\nselect\n    u.usename as grantee,\n    p.privilege_type\nfrom pg_user u\ncross join privileges p\nwhere has_table_privilege(u.usename, '{{ relation }}', privilege_type)\n    and u.usename != current_user\n    and not u.usesuper\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5164423,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__datediff": {
            "name": "redshift__datediff",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "unique_id": "macro.dbt_redshift.redshift__datediff",
            "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5166974,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__cast_bool_to_text": {
            "name": "redshift__cast_bool_to_text",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "unique_id": "macro.dbt_redshift.redshift__cast_bool_to_text",
            "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5169039,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__last_day": {
            "name": "redshift__last_day",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "unique_id": "macro.dbt_redshift.redshift__last_day",
            "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5172877,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__split_part": {
            "name": "redshift__split_part",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "unique_id": "macro.dbt_redshift.redshift__split_part",
            "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__split_part",
                    "macro.dbt._split_part_negative"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5177512,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__array_concat": {
            "name": "redshift__array_concat",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "unique_id": "macro.dbt_redshift.redshift__array_concat",
            "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5179653,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__array_append": {
            "name": "redshift__array_append",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "unique_id": "macro.dbt_redshift.redshift__array_append",
            "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.array_concat",
                    "macro.dbt_utils.array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.518209,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__array_construct": {
            "name": "redshift__array_construct",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "unique_id": "macro.dbt_redshift.redshift__array_construct",
            "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5184247,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__dateadd": {
            "name": "redshift__dateadd",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "unique_id": "macro.dbt_redshift.redshift__dateadd",
            "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5186741,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__length": {
            "name": "redshift__length",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "unique_id": "macro.dbt_redshift.redshift__length",
            "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.518856,
            "supported_languages": null
        },
        "macro.dbt_redshift.redshift__listagg": {
            "name": "redshift__listagg",
            "resource_type": "macro",
            "package_name": "dbt_redshift",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "unique_id": "macro.dbt_redshift.redshift__listagg",
            "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}\n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5202289,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__create_table_as": {
            "name": "postgres__create_table_as",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__create_table_as",
            "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent",
                    "macro.dbt.get_table_columns_and_constraints",
                    "macro.dbt.default__get_column_names",
                    "macro.dbt.get_select_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5227277,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_create_index_sql": {
            "name": "postgres__get_create_index_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql",
            "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5234604,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__create_schema": {
            "name": "postgres__create_schema",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__create_schema",
            "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.523829,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__drop_schema": {
            "name": "postgres__drop_schema",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__drop_schema",
            "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5241914,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_columns_in_relation": {
            "name": "postgres__get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation",
            "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.sql_convert_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5247302,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__list_relations_without_caching": {
            "name": "postgres__list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching",
            "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5252588,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__information_schema_name": {
            "name": "postgres__information_schema_name",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__information_schema_name",
            "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5254674,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__list_schemas": {
            "name": "postgres__list_schemas",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__list_schemas",
            "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5258663,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__check_schema_exists": {
            "name": "postgres__check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__check_schema_exists",
            "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5263045,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__make_relation_with_suffix": {
            "name": "postgres__make_relation_with_suffix",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix",
            "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5272634,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__make_intermediate_relation": {
            "name": "postgres__make_intermediate_relation",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation",
            "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_relation_with_suffix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5274863,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__make_temp_relation": {
            "name": "postgres__make_temp_relation",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__make_temp_relation",
            "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_relation_with_suffix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5278428,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__make_backup_relation": {
            "name": "postgres__make_backup_relation",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__make_backup_relation",
            "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_relation_with_suffix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5281508,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres_escape_comment": {
            "name": "postgres_escape_comment",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres_escape_comment",
            "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.528646,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__alter_relation_comment": {
            "name": "postgres__alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment",
            "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  {% if relation.type == 'materialized_view' -%}\n    {% set relation_type = \"materialized view\" %}\n  {%- else -%}\n    {%- set relation_type = relation.type -%}\n  {%- endif -%}\n  comment on {{ relation_type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres_escape_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5290902,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__alter_column_comment": {
            "name": "postgres__alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__alter_column_comment",
            "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres_escape_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5297902,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_show_grant_sql": {
            "name": "postgres__get_show_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql",
            "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.530033,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__copy_grants": {
            "name": "postgres__copy_grants",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__copy_grants",
            "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.530176,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_show_indexes_sql": {
            "name": "postgres__get_show_indexes_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql",
            "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.530399,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_drop_index_sql": {
            "name": "postgres__get_drop_index_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql",
            "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5305676,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_relations": {
            "name": "postgres__get_relations",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations.sql",
            "original_file_path": "macros/relations.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_relations",
            "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5312607,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres_get_relations": {
            "name": "postgres_get_relations",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations.sql",
            "original_file_path": "macros/relations.sql",
            "unique_id": "macro.dbt_postgres.postgres_get_relations",
            "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5314116,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__current_timestamp": {
            "name": "postgres__current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/timestamps.sql",
            "original_file_path": "macros/timestamps.sql",
            "unique_id": "macro.dbt_postgres.postgres__current_timestamp",
            "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5316508,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__snapshot_string_as_time": {
            "name": "postgres__snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/timestamps.sql",
            "original_file_path": "macros/timestamps.sql",
            "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time",
            "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5318675,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__snapshot_get_time": {
            "name": "postgres__snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/timestamps.sql",
            "original_file_path": "macros/timestamps.sql",
            "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time",
            "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5319989,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__current_timestamp_backcompat": {
            "name": "postgres__current_timestamp_backcompat",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/timestamps.sql",
            "original_file_path": "macros/timestamps.sql",
            "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat",
            "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5321283,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {
            "name": "postgres__current_timestamp_in_utc_backcompat",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/timestamps.sql",
            "original_file_path": "macros/timestamps.sql",
            "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5322618,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_catalog_relations": {
            "name": "postgres__get_catalog_relations",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations",
            "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.533452,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_catalog": {
            "name": "postgres__get_catalog",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_catalog",
            "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_catalog_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5343783,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_incremental_default_sql": {
            "name": "postgres__get_incremental_default_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/materializations/incremental_strategies.sql",
            "original_file_path": "macros/materializations/incremental_strategies.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql",
            "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_delete_insert_sql",
                    "macro.dbt.get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5349317,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_incremental_microbatch_sql": {
            "name": "postgres__get_incremental_microbatch_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/materializations/incremental_strategies.sql",
            "original_file_path": "macros/materializations/incremental_strategies.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_incremental_microbatch_sql",
            "macro_sql": "{% macro postgres__get_incremental_microbatch_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) %}\n  {% else %}\n    {{ exceptions.raise_compiler_error(\"dbt-postgres 'microbatch' requires a `unique_key` config\") }}\n  {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_merge_sql",
                    "macro.dbt.default__get_incremental_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5353115,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__snapshot_merge_sql": {
            "name": "postgres__snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/materializations/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshot_merge.sql",
            "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql",
            "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5359938,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_replace_table_sql": {
            "name": "postgres__get_replace_table_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/table/replace.sql",
            "original_file_path": "macros/relations/table/replace.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql",
            "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent",
                    "macro.dbt.get_table_columns_and_constraints",
                    "macro.dbt.get_select_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5367117,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__drop_table": {
            "name": "postgres__drop_table",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/table/drop.sql",
            "original_file_path": "macros/relations/table/drop.sql",
            "unique_id": "macro.dbt_postgres.postgres__drop_table",
            "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5368857,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_rename_table_sql": {
            "name": "postgres__get_rename_table_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/table/rename.sql",
            "original_file_path": "macros/relations/table/rename.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql",
            "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5370893,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_replace_view_sql": {
            "name": "postgres__get_replace_view_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql",
            "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5377142,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__drop_view": {
            "name": "postgres__drop_view",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/view/drop.sql",
            "original_file_path": "macros/relations/view/drop.sql",
            "unique_id": "macro.dbt_postgres.postgres__drop_view",
            "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.537888,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_rename_view_sql": {
            "name": "postgres__get_rename_view_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/view/rename.sql",
            "original_file_path": "macros/relations/view/rename.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql",
            "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5380895,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__drop_materialized_view": {
            "name": "postgres__drop_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/materialized_view/drop.sql",
            "original_file_path": "macros/relations/materialized_view/drop.sql",
            "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view",
            "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5382555,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {
            "name": "postgres__get_rename_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/materialized_view/rename.sql",
            "original_file_path": "macros/relations/materialized_view/rename.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql",
            "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5384567,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {
            "name": "postgres__get_create_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/materialized_view/create.sql",
            "original_file_path": "macros/relations/materialized_view/create.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql",
            "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5389569,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__describe_materialized_view": {
            "name": "postgres__describe_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/materialized_view/describe.sql",
            "original_file_path": "macros/relations/materialized_view/describe.sql",
            "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view",
            "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.get_show_indexes_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5393019,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {
            "name": "postgres__get_alter_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql",
            "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_replace_sql",
                    "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5399241,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {
            "name": "postgres__update_indexes_on_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view",
            "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\t{{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_drop_index_sql",
                    "macro.dbt_postgres.postgres__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5405471,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {
            "name": "postgres__get_materialized_view_configuration_changes",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes",
            "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__describe_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5408943,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__refresh_materialized_view": {
            "name": "postgres__refresh_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/relations/materialized_view/refresh.sql",
            "original_file_path": "macros/relations/materialized_view/refresh.sql",
            "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view",
            "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5410707,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__datediff": {
            "name": "postgres__datediff",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "unique_id": "macro.dbt_postgres.postgres__datediff",
            "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5433857,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__last_day": {
            "name": "postgres__last_day",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "unique_id": "macro.dbt_postgres.postgres__last_day",
            "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc",
                    "macro.dbt.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5439389,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__split_part": {
            "name": "postgres__split_part",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "unique_id": "macro.dbt_postgres.postgres__split_part",
            "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__split_part",
                    "macro.dbt._split_part_negative"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5443876,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__any_value": {
            "name": "postgres__any_value",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "unique_id": "macro.dbt_postgres.postgres__any_value",
            "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5445662,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__dateadd": {
            "name": "postgres__dateadd",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "unique_id": "macro.dbt_postgres.postgres__dateadd",
            "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5448196,
            "supported_languages": null
        },
        "macro.dbt_postgres.postgres__listagg": {
            "name": "postgres__listagg",
            "resource_type": "macro",
            "package_name": "dbt_postgres",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "unique_id": "macro.dbt_postgres.postgres__listagg",
            "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5454316,
            "supported_languages": null
        },
        "macro.dbt.set_sql_header": {
            "name": "set_sql_header",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "unique_id": "macro.dbt.set_sql_header",
            "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5457644,
            "supported_languages": null
        },
        "macro.dbt.should_full_refresh": {
            "name": "should_full_refresh",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "unique_id": "macro.dbt.should_full_refresh",
            "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5462399,
            "supported_languages": null
        },
        "macro.dbt.should_store_failures": {
            "name": "should_store_failures",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "unique_id": "macro.dbt.should_store_failures",
            "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5466015,
            "supported_languages": null
        },
        "macro.dbt.run_hooks": {
            "name": "run_hooks",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.run_hooks",
            "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5475972,
            "supported_languages": null
        },
        "macro.dbt.make_hook_config": {
            "name": "make_hook_config",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.make_hook_config",
            "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5478241,
            "supported_languages": null
        },
        "macro.dbt.before_begin": {
            "name": "before_begin",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.before_begin",
            "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5479944,
            "supported_languages": null
        },
        "macro.dbt.in_transaction": {
            "name": "in_transaction",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.in_transaction",
            "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.548164,
            "supported_languages": null
        },
        "macro.dbt.after_commit": {
            "name": "after_commit",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.after_commit",
            "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5483322,
            "supported_languages": null
        },
        "macro.dbt.materialization_materialized_view_default": {
            "name": "materialization_materialized_view_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialization_materialized_view_default",
            "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.materialized_view_setup",
                    "macro.dbt.materialized_view_get_build_sql",
                    "macro.dbt.materialized_view_execute_no_op",
                    "macro.dbt.materialized_view_execute_build_sql",
                    "macro.dbt.materialized_view_teardown"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.550101,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialized_view_setup": {
            "name": "materialized_view_setup",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_setup",
            "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5505667,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_teardown": {
            "name": "materialized_view_teardown",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_teardown",
            "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5508697,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_get_build_sql": {
            "name": "materialized_view_get_build_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_get_build_sql",
            "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.get_create_materialized_view_as_sql",
                    "macro.dbt.get_replace_sql",
                    "macro.dbt.get_materialized_view_configuration_changes",
                    "macro.dbt.refresh_materialized_view",
                    "macro.dbt.get_alter_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5523968,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_execute_no_op": {
            "name": "materialized_view_execute_no_op",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_execute_no_op",
            "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5526645,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_execute_build_sql": {
            "name": "materialized_view_execute_build_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_execute_build_sql",
            "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5534415,
            "supported_languages": null
        },
        "macro.dbt.materialization_view_default": {
            "name": "materialization_view_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/view.sql",
            "original_file_path": "macros/materializations/models/view.sql",
            "unique_id": "macro.dbt.materialization_view_default",
            "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5558681,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialization_table_default": {
            "name": "materialization_table_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/table.sql",
            "original_file_path": "macros/materializations/models/table.sql",
            "unique_id": "macro.dbt.materialization_table_default",
            "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5582867,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.can_clone_table": {
            "name": "can_clone_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/can_clone_table.sql",
            "original_file_path": "macros/materializations/models/clone/can_clone_table.sql",
            "unique_id": "macro.dbt.can_clone_table",
            "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__can_clone_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5585806,
            "supported_languages": null
        },
        "macro.dbt.default__can_clone_table": {
            "name": "default__can_clone_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/can_clone_table.sql",
            "original_file_path": "macros/materializations/models/clone/can_clone_table.sql",
            "unique_id": "macro.dbt.default__can_clone_table",
            "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5587265,
            "supported_languages": null
        },
        "macro.dbt.create_or_replace_clone": {
            "name": "create_or_replace_clone",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/create_or_replace_clone.sql",
            "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql",
            "unique_id": "macro.dbt.create_or_replace_clone",
            "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_or_replace_clone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5590658,
            "supported_languages": null
        },
        "macro.dbt.default__create_or_replace_clone": {
            "name": "default__create_or_replace_clone",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/create_or_replace_clone.sql",
            "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql",
            "unique_id": "macro.dbt.default__create_or_replace_clone",
            "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5592656,
            "supported_languages": null
        },
        "macro.dbt.materialization_clone_default": {
            "name": "materialization_clone_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/clone.sql",
            "original_file_path": "macros/materializations/models/clone/clone.sql",
            "unique_id": "macro.dbt.materialization_clone_default",
            "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.can_clone_table",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.create_or_replace_clone",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5621953,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.is_incremental": {
            "name": "is_incremental",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/is_incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
            "unique_id": "macro.dbt.is_incremental",
            "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5629084,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_append_sql": {
            "name": "get_incremental_append_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_append_sql",
            "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5635998,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_append_sql": {
            "name": "default__get_incremental_append_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_append_sql",
            "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_into_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.563868,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_delete_insert_sql": {
            "name": "get_incremental_delete_insert_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
            "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_delete_insert_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5640833,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_delete_insert_sql": {
            "name": "default__get_incremental_delete_insert_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
            "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5644104,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_merge_sql": {
            "name": "get_incremental_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_merge_sql",
            "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5646243,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_merge_sql": {
            "name": "default__get_incremental_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_merge_sql",
            "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.564954,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_insert_overwrite_sql": {
            "name": "get_incremental_insert_overwrite_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_insert_overwrite_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5651658,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_insert_overwrite_sql": {
            "name": "default__get_incremental_insert_overwrite_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5654814,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_default_sql": {
            "name": "get_incremental_default_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_default_sql",
            "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_incremental_default_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5656946,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_default_sql": {
            "name": "default__get_incremental_default_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_default_sql",
            "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5658703,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_microbatch_sql": {
            "name": "get_incremental_microbatch_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_microbatch_sql",
            "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_incremental_microbatch_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5660815,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_microbatch_sql": {
            "name": "default__get_incremental_microbatch_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_microbatch_sql",
            "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5662723,
            "supported_languages": null
        },
        "macro.dbt.get_insert_into_sql": {
            "name": "get_insert_into_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_insert_into_sql",
            "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5665944,
            "supported_languages": null
        },
        "macro.dbt.get_merge_sql": {
            "name": "get_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.get_merge_sql",
            "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5678804,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_sql": {
            "name": "default__get_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.default__get_merge_sql",
            "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv",
                    "macro.dbt.get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5697634,
            "supported_languages": null
        },
        "macro.dbt.get_delete_insert_merge_sql": {
            "name": "get_delete_insert_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.get_delete_insert_merge_sql",
            "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5700703,
            "supported_languages": null
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
            "name": "default__get_delete_insert_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
            "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5712583,
            "supported_languages": null
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
            "name": "get_insert_overwrite_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5715616,
            "supported_languages": null
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
            "name": "default__get_insert_overwrite_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5723047,
            "supported_languages": null
        },
        "macro.dbt.get_quoted_csv": {
            "name": "get_quoted_csv",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.get_quoted_csv",
            "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5732536,
            "supported_languages": null
        },
        "macro.dbt.diff_columns": {
            "name": "diff_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.diff_columns",
            "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.57389,
            "supported_languages": null
        },
        "macro.dbt.diff_column_data_types": {
            "name": "diff_column_data_types",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.diff_column_data_types",
            "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5747838,
            "supported_languages": null
        },
        "macro.dbt.get_merge_update_columns": {
            "name": "get_merge_update_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.get_merge_update_columns",
            "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5750594,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_update_columns": {
            "name": "default__get_merge_update_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.default__get_merge_update_columns",
            "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5758996,
            "supported_languages": null
        },
        "macro.dbt.materialization_incremental_default": {
            "name": "materialization_incremental_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/incremental.sql",
            "unique_id": "macro.dbt.materialization_incremental_default",
            "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.run_query",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.580601,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.incremental_validate_on_schema_change": {
            "name": "incremental_validate_on_schema_change",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "unique_id": "macro.dbt.incremental_validate_on_schema_change",
            "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5819614,
            "supported_languages": null
        },
        "macro.dbt.check_for_schema_changes": {
            "name": "check_for_schema_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "unique_id": "macro.dbt.check_for_schema_changes",
            "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.diff_columns",
                    "macro.dbt.diff_column_data_types"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5833638,
            "supported_languages": null
        },
        "macro.dbt.sync_column_schemas": {
            "name": "sync_column_schemas",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "unique_id": "macro.dbt.sync_column_schemas",
            "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_relation_add_remove_columns",
                    "macro.dbt.alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5847623,
            "supported_languages": null
        },
        "macro.dbt.process_schema_changes": {
            "name": "process_schema_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "unique_id": "macro.dbt.process_schema_changes",
            "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.check_for_schema_changes",
                    "macro.dbt.sync_column_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5857744,
            "supported_languages": null
        },
        "macro.dbt.materialization_seed_default": {
            "name": "materialization_seed_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/seed.sql",
            "original_file_path": "macros/materializations/seeds/seed.sql",
            "unique_id": "macro.dbt.materialization_seed_default",
            "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_hooks",
                    "macro.dbt.reset_csv_table",
                    "macro.dbt.create_csv_table",
                    "macro.dbt.load_csv_rows",
                    "macro.dbt.noop_statement",
                    "macro.dbt.get_csv_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5887585,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_csv_table": {
            "name": "create_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.create_csv_table",
            "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5898445,
            "supported_languages": null
        },
        "macro.dbt.default__create_csv_table": {
            "name": "default__create_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__create_csv_table",
            "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5909135,
            "supported_languages": null
        },
        "macro.dbt.reset_csv_table": {
            "name": "reset_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.reset_csv_table",
            "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__reset_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5911827,
            "supported_languages": null
        },
        "macro.dbt.default__reset_csv_table": {
            "name": "default__reset_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__reset_csv_table",
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5917625,
            "supported_languages": null
        },
        "macro.dbt.get_csv_sql": {
            "name": "get_csv_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.get_csv_sql",
            "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_csv_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.591988,
            "supported_languages": null
        },
        "macro.dbt.default__get_csv_sql": {
            "name": "default__get_csv_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__get_csv_sql",
            "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5921552,
            "supported_languages": null
        },
        "macro.dbt.get_binding_char": {
            "name": "get_binding_char",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.get_binding_char",
            "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5923269,
            "supported_languages": null
        },
        "macro.dbt.default__get_binding_char": {
            "name": "default__get_binding_char",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__get_binding_char",
            "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.59247,
            "supported_languages": null
        },
        "macro.dbt.get_batch_size": {
            "name": "get_batch_size",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.get_batch_size",
            "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_batch_size"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5926576,
            "supported_languages": null
        },
        "macro.dbt.default__get_batch_size": {
            "name": "default__get_batch_size",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__get_batch_size",
            "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5928006,
            "supported_languages": null
        },
        "macro.dbt.get_seed_column_quoted_csv": {
            "name": "get_seed_column_quoted_csv",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.get_seed_column_quoted_csv",
            "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5933785,
            "supported_languages": null
        },
        "macro.dbt.load_csv_rows": {
            "name": "load_csv_rows",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.load_csv_rows",
            "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.593598,
            "supported_languages": null
        },
        "macro.dbt.default__load_csv_rows": {
            "name": "default__load_csv_rows",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__load_csv_rows",
            "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5950487,
            "supported_languages": null
        },
        "macro.dbt.materialization_unit_default": {
            "name": "materialization_unit_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/unit.sql",
            "original_file_path": "macros/materializations/tests/unit.sql",
            "unique_id": "macro.dbt.materialization_unit_default",
            "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.run_query",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.get_empty_subquery_sql",
                    "macro.dbt.get_expected_sql",
                    "macro.dbt.get_unit_test_sql",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5968287,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_where_subquery": {
            "name": "get_where_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/where_subquery.sql",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "unique_id": "macro.dbt.get_where_subquery",
            "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_where_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5972054,
            "supported_languages": null
        },
        "macro.dbt.default__get_where_subquery": {
            "name": "default__get_where_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/where_subquery.sql",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "unique_id": "macro.dbt.default__get_where_subquery",
            "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.5976834,
            "supported_languages": null
        },
        "macro.dbt.materialization_test_default": {
            "name": "materialization_test_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/test.sql",
            "original_file_path": "macros/materializations/tests/test.sql",
            "unique_id": "macro.dbt.materialization_test_default",
            "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_sql",
                    "macro.dbt.get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.600262,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_test_sql": {
            "name": "get_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "unique_id": "macro.dbt.get_test_sql",
            "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6009018,
            "supported_languages": null
        },
        "macro.dbt.default__get_test_sql": {
            "name": "default__get_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "unique_id": "macro.dbt.default__get_test_sql",
            "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6012857,
            "supported_languages": null
        },
        "macro.dbt.get_unit_test_sql": {
            "name": "get_unit_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "unique_id": "macro.dbt.get_unit_test_sql",
            "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_unit_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.601531,
            "supported_languages": null
        },
        "macro.dbt.default__get_unit_test_sql": {
            "name": "default__get_unit_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "unique_id": "macro.dbt.default__get_unit_test_sql",
            "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6022544,
            "supported_languages": null
        },
        "macro.dbt.snapshot_merge_sql": {
            "name": "snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "unique_id": "macro.dbt.snapshot_merge_sql",
            "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6026776,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_merge_sql": {
            "name": "default__snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "unique_id": "macro.dbt.default__snapshot_merge_sql",
            "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_snapshot_table_column_names"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6032834,
            "supported_languages": null
        },
        "macro.dbt.strategy_dispatch": {
            "name": "strategy_dispatch",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.strategy_dispatch",
            "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6055634,
            "supported_languages": null
        },
        "macro.dbt.snapshot_hash_arguments": {
            "name": "snapshot_hash_arguments",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_hash_arguments",
            "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6057673,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_hash_arguments": {
            "name": "default__snapshot_hash_arguments",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.default__snapshot_hash_arguments",
            "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6060393,
            "supported_languages": null
        },
        "macro.dbt.snapshot_timestamp_strategy": {
            "name": "snapshot_timestamp_strategy",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_timestamp_strategy",
            "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_snapshot_table_column_names",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.607032,
            "supported_languages": null
        },
        "macro.dbt.snapshot_string_as_time": {
            "name": "snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_string_as_time",
            "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__snapshot_string_as_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6072297,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_string_as_time": {
            "name": "default__snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.default__snapshot_string_as_time",
            "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6074324,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
            "name": "snapshot_check_all_get_existing_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.609046,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_strategy": {
            "name": "snapshot_check_strategy",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_check_strategy",
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.snapshot_check_all_get_existing_columns",
                    "macro.dbt.get_true_sql",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.610571,
            "supported_languages": null
        },
        "macro.dbt.materialization_snapshot_default": {
            "name": "materialization_snapshot_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/snapshot.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot.sql",
            "unique_id": "macro.dbt.materialization_snapshot_default",
            "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.valid_snapshot_target(target_relation, columns) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt.get_snapshot_table_column_names",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.build_snapshot_staging_table",
                    "macro.dbt.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.check_time_data_types",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes",
                    "macro.dbt.post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6152172,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_columns": {
            "name": "create_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.create_columns",
            "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6164942,
            "supported_languages": null
        },
        "macro.dbt.default__create_columns": {
            "name": "default__create_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__create_columns",
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.616851,
            "supported_languages": null
        },
        "macro.dbt.post_snapshot": {
            "name": "post_snapshot",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.post_snapshot",
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.617049,
            "supported_languages": null
        },
        "macro.dbt.default__post_snapshot": {
            "name": "default__post_snapshot",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__post_snapshot",
            "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.617161,
            "supported_languages": null
        },
        "macro.dbt.get_true_sql": {
            "name": "get_true_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.get_true_sql",
            "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_true_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6173577,
            "supported_languages": null
        },
        "macro.dbt.default__get_true_sql": {
            "name": "default__get_true_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__get_true_sql",
            "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.617499,
            "supported_languages": null
        },
        "macro.dbt.snapshot_staging_table": {
            "name": "snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.snapshot_staging_table",
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_staging_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6177337,
            "supported_languages": null
        },
        "macro.dbt.get_snapshot_table_column_names": {
            "name": "get_snapshot_table_column_names",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.get_snapshot_table_column_names",
            "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at'}) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6179926,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_staging_table": {
            "name": "default__snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__snapshot_staging_table",
            "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where {{ columns.dbt_valid_to }} is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as {{ columns.dbt_valid_to }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_snapshot_table_column_names",
                    "macro.dbt.snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6194904,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_table": {
            "name": "build_snapshot_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.build_snapshot_table",
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__build_snapshot_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6197147,
            "supported_languages": null
        },
        "macro.dbt.default__build_snapshot_table": {
            "name": "default__build_snapshot_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__build_snapshot_table",
            "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as {{ columns.dbt_valid_to }}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_snapshot_table_column_names"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6202211,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_staging_table": {
            "name": "build_snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6207073,
            "supported_languages": null
        },
        "macro.dbt.get_updated_at_column_data_type": {
            "name": "get_updated_at_column_data_type",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.get_updated_at_column_data_type",
            "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_column_schema_from_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6214044,
            "supported_languages": null
        },
        "macro.dbt.check_time_data_types": {
            "name": "check_time_data_types",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.check_time_data_types",
            "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_updated_at_column_data_type",
                    "macro.dbt.get_snapshot_get_time_data_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.621901,
            "supported_languages": null
        },
        "macro.dbt.get_replace_sql": {
            "name": "get_replace_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/replace.sql",
            "original_file_path": "macros/relations/replace.sql",
            "unique_id": "macro.dbt.get_replace_sql",
            "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_replace_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6225276,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_sql": {
            "name": "default__get_replace_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/replace.sql",
            "original_file_path": "macros/relations/replace.sql",
            "unique_id": "macro.dbt.default__get_replace_sql",
            "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_replace_view_sql",
                    "macro.dbt.get_replace_table_sql",
                    "macro.dbt.get_replace_materialized_view_sql",
                    "macro.dbt.get_create_intermediate_sql",
                    "macro.dbt.get_create_backup_sql",
                    "macro.dbt.get_rename_intermediate_sql",
                    "macro.dbt.get_drop_backup_sql",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6238868,
            "supported_languages": null
        },
        "macro.dbt.get_create_intermediate_sql": {
            "name": "get_create_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create_intermediate.sql",
            "original_file_path": "macros/relations/create_intermediate.sql",
            "unique_id": "macro.dbt.get_create_intermediate_sql",
            "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_intermediate_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.624276,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_intermediate_sql": {
            "name": "default__get_create_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create_intermediate.sql",
            "original_file_path": "macros/relations/create_intermediate.sql",
            "unique_id": "macro.dbt.default__get_create_intermediate_sql",
            "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6245716,
            "supported_languages": null
        },
        "macro.dbt.drop_schema_named": {
            "name": "drop_schema_named",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/schema.sql",
            "original_file_path": "macros/relations/schema.sql",
            "unique_id": "macro.dbt.drop_schema_named",
            "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_schema_named"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6248705,
            "supported_languages": null
        },
        "macro.dbt.default__drop_schema_named": {
            "name": "default__drop_schema_named",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/schema.sql",
            "original_file_path": "macros/relations/schema.sql",
            "unique_id": "macro.dbt.default__drop_schema_named",
            "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6251228,
            "supported_languages": null
        },
        "macro.dbt.get_drop_sql": {
            "name": "get_drop_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.get_drop_sql",
            "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6256402,
            "supported_languages": null
        },
        "macro.dbt.default__get_drop_sql": {
            "name": "default__get_drop_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.default__get_drop_sql",
            "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_view",
                    "macro.dbt.drop_table",
                    "macro.dbt.drop_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6260953,
            "supported_languages": null
        },
        "macro.dbt.drop_relation": {
            "name": "drop_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.drop_relation",
            "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.626307,
            "supported_languages": null
        },
        "macro.dbt.default__drop_relation": {
            "name": "default__drop_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.default__drop_relation",
            "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6265483,
            "supported_languages": null
        },
        "macro.dbt.drop_relation_if_exists": {
            "name": "drop_relation_if_exists",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.drop_relation_if_exists",
            "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6267858,
            "supported_languages": null
        },
        "macro.dbt.get_rename_sql": {
            "name": "get_rename_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt.get_rename_sql",
            "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6274211,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_sql": {
            "name": "default__get_rename_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt.default__get_rename_sql",
            "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_rename_view_sql",
                    "macro.dbt.get_rename_table_sql",
                    "macro.dbt.get_rename_materialized_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6279294,
            "supported_languages": null
        },
        "macro.dbt.rename_relation": {
            "name": "rename_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt.rename_relation",
            "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__rename_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.628165,
            "supported_languages": null
        },
        "macro.dbt.default__rename_relation": {
            "name": "default__rename_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt.default__rename_relation",
            "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.628511,
            "supported_languages": null
        },
        "macro.dbt.get_rename_intermediate_sql": {
            "name": "get_rename_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename_intermediate.sql",
            "original_file_path": "macros/relations/rename_intermediate.sql",
            "unique_id": "macro.dbt.get_rename_intermediate_sql",
            "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_rename_intermediate_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.628855,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_intermediate_sql": {
            "name": "default__get_rename_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename_intermediate.sql",
            "original_file_path": "macros/relations/rename_intermediate.sql",
            "unique_id": "macro.dbt.default__get_rename_intermediate_sql",
            "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6290953,
            "supported_languages": null
        },
        "macro.dbt.get_create_sql": {
            "name": "get_create_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create.sql",
            "original_file_path": "macros/relations/create.sql",
            "unique_id": "macro.dbt.get_create_sql",
            "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6295452,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_sql": {
            "name": "default__get_create_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create.sql",
            "original_file_path": "macros/relations/create.sql",
            "unique_id": "macro.dbt.default__get_create_sql",
            "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.get_create_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6300623,
            "supported_languages": null
        },
        "macro.dbt.get_drop_backup_sql": {
            "name": "get_drop_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop_backup.sql",
            "original_file_path": "macros/relations/drop_backup.sql",
            "unique_id": "macro.dbt.get_drop_backup_sql",
            "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_drop_backup_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6304054,
            "supported_languages": null
        },
        "macro.dbt.default__get_drop_backup_sql": {
            "name": "default__get_drop_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop_backup.sql",
            "original_file_path": "macros/relations/drop_backup.sql",
            "unique_id": "macro.dbt.default__get_drop_backup_sql",
            "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6306486,
            "supported_languages": null
        },
        "macro.dbt.get_create_backup_sql": {
            "name": "get_create_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create_backup.sql",
            "original_file_path": "macros/relations/create_backup.sql",
            "unique_id": "macro.dbt.get_create_backup_sql",
            "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_backup_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6310096,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_backup_sql": {
            "name": "default__get_create_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create_backup.sql",
            "original_file_path": "macros/relations/create_backup.sql",
            "unique_id": "macro.dbt.default__get_create_backup_sql",
            "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6313186,
            "supported_languages": null
        },
        "macro.dbt.get_replace_table_sql": {
            "name": "get_replace_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/replace.sql",
            "original_file_path": "macros/relations/table/replace.sql",
            "unique_id": "macro.dbt.get_replace_table_sql",
            "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_replace_table_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6316123,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_table_sql": {
            "name": "default__get_replace_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/replace.sql",
            "original_file_path": "macros/relations/table/replace.sql",
            "unique_id": "macro.dbt.default__get_replace_table_sql",
            "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.631783,
            "supported_languages": null
        },
        "macro.dbt.drop_table": {
            "name": "drop_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/drop.sql",
            "original_file_path": "macros/relations/table/drop.sql",
            "unique_id": "macro.dbt.drop_table",
            "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__drop_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6320522,
            "supported_languages": null
        },
        "macro.dbt.default__drop_table": {
            "name": "default__drop_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/drop.sql",
            "original_file_path": "macros/relations/table/drop.sql",
            "unique_id": "macro.dbt.default__drop_table",
            "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6321979,
            "supported_languages": null
        },
        "macro.dbt.get_rename_table_sql": {
            "name": "get_rename_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/rename.sql",
            "original_file_path": "macros/relations/table/rename.sql",
            "unique_id": "macro.dbt.get_rename_table_sql",
            "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_rename_table_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6324868,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_table_sql": {
            "name": "default__get_rename_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/rename.sql",
            "original_file_path": "macros/relations/table/rename.sql",
            "unique_id": "macro.dbt.default__get_rename_table_sql",
            "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6326587,
            "supported_languages": null
        },
        "macro.dbt.get_create_table_as_sql": {
            "name": "get_create_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.get_create_table_as_sql",
            "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6333997,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_table_as_sql": {
            "name": "default__get_create_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.default__get_create_table_as_sql",
            "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.633621,
            "supported_languages": null
        },
        "macro.dbt.create_table_as": {
            "name": "create_table_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.create_table_as",
            "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6341279,
            "supported_languages": null
        },
        "macro.dbt.default__create_table_as": {
            "name": "default__create_table_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.default__create_table_as",
            "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent",
                    "macro.dbt.get_table_columns_and_constraints",
                    "macro.dbt.get_select_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6349356,
            "supported_languages": null
        },
        "macro.dbt.default__get_column_names": {
            "name": "default__get_column_names",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.default__get_column_names",
            "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6354752,
            "supported_languages": null
        },
        "macro.dbt.get_select_subquery": {
            "name": "get_select_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.get_select_subquery",
            "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_select_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6356912,
            "supported_languages": null
        },
        "macro.dbt.default__get_select_subquery": {
            "name": "default__get_select_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.default__get_select_subquery",
            "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_column_names"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6359,
            "supported_languages": null
        },
        "macro.dbt.get_table_columns_and_constraints": {
            "name": "get_table_columns_and_constraints",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.get_table_columns_and_constraints",
            "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_table_columns_and_constraints"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.636703,
            "supported_languages": null
        },
        "macro.dbt.default__get_table_columns_and_constraints": {
            "name": "default__get_table_columns_and_constraints",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.default__get_table_columns_and_constraints",
            "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.table_columns_and_constraints"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.636848,
            "supported_languages": null
        },
        "macro.dbt.table_columns_and_constraints": {
            "name": "table_columns_and_constraints",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.table_columns_and_constraints",
            "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6376193,
            "supported_languages": null
        },
        "macro.dbt.get_assert_columns_equivalent": {
            "name": "get_assert_columns_equivalent",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.get_assert_columns_equivalent",
            "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6378217,
            "supported_languages": null
        },
        "macro.dbt.default__get_assert_columns_equivalent": {
            "name": "default__get_assert_columns_equivalent",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.default__get_assert_columns_equivalent",
            "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6379807,
            "supported_languages": null
        },
        "macro.dbt.assert_columns_equivalent": {
            "name": "assert_columns_equivalent",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.assert_columns_equivalent",
            "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_column_schema_from_query",
                    "macro.dbt.get_empty_schema_sql",
                    "macro.dbt.format_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.639473,
            "supported_languages": null
        },
        "macro.dbt.format_columns": {
            "name": "format_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.format_columns",
            "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__format_column"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.639917,
            "supported_languages": null
        },
        "macro.dbt.default__format_column": {
            "name": "default__format_column",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.default__format_column",
            "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.640301,
            "supported_languages": null
        },
        "macro.dbt.get_replace_view_sql": {
            "name": "get_replace_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.get_replace_view_sql",
            "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_replace_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6409042,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_view_sql": {
            "name": "default__get_replace_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.default__get_replace_view_sql",
            "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6410813,
            "supported_languages": null
        },
        "macro.dbt.create_or_replace_view": {
            "name": "create_or_replace_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.create_or_replace_view",
            "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6423745,
            "supported_languages": null
        },
        "macro.dbt.handle_existing_table": {
            "name": "handle_existing_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.handle_existing_table",
            "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__handle_existing_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6426039,
            "supported_languages": null
        },
        "macro.dbt.default__handle_existing_table": {
            "name": "default__handle_existing_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.default__handle_existing_table",
            "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.642893,
            "supported_languages": null
        },
        "macro.dbt.drop_view": {
            "name": "drop_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/drop.sql",
            "original_file_path": "macros/relations/view/drop.sql",
            "unique_id": "macro.dbt.drop_view",
            "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__drop_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6431808,
            "supported_languages": null
        },
        "macro.dbt.default__drop_view": {
            "name": "default__drop_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/drop.sql",
            "original_file_path": "macros/relations/view/drop.sql",
            "unique_id": "macro.dbt.default__drop_view",
            "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6433299,
            "supported_languages": null
        },
        "macro.dbt.get_rename_view_sql": {
            "name": "get_rename_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/rename.sql",
            "original_file_path": "macros/relations/view/rename.sql",
            "unique_id": "macro.dbt.get_rename_view_sql",
            "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_rename_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6436253,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_view_sql": {
            "name": "default__get_rename_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/rename.sql",
            "original_file_path": "macros/relations/view/rename.sql",
            "unique_id": "macro.dbt.default__get_rename_view_sql",
            "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6437979,
            "supported_languages": null
        },
        "macro.dbt.get_create_view_as_sql": {
            "name": "get_create_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt.get_create_view_as_sql",
            "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6441958,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_view_as_sql": {
            "name": "default__get_create_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt.default__get_create_view_as_sql",
            "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.644382,
            "supported_languages": null
        },
        "macro.dbt.create_view_as": {
            "name": "create_view_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt.create_view_as",
            "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6445909,
            "supported_languages": null
        },
        "macro.dbt.default__create_view_as": {
            "name": "default__create_view_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt.default__create_view_as",
            "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6450944,
            "supported_languages": null
        },
        "macro.dbt.get_replace_materialized_view_sql": {
            "name": "get_replace_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/replace.sql",
            "original_file_path": "macros/relations/materialized_view/replace.sql",
            "unique_id": "macro.dbt.get_replace_materialized_view_sql",
            "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_replace_materialized_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6454172,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_materialized_view_sql": {
            "name": "default__get_replace_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/replace.sql",
            "original_file_path": "macros/relations/materialized_view/replace.sql",
            "unique_id": "macro.dbt.default__get_replace_materialized_view_sql",
            "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6455913,
            "supported_languages": null
        },
        "macro.dbt.drop_materialized_view": {
            "name": "drop_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/drop.sql",
            "original_file_path": "macros/relations/materialized_view/drop.sql",
            "unique_id": "macro.dbt.drop_materialized_view",
            "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__drop_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6458704,
            "supported_languages": null
        },
        "macro.dbt.default__drop_materialized_view": {
            "name": "default__drop_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/drop.sql",
            "original_file_path": "macros/relations/materialized_view/drop.sql",
            "unique_id": "macro.dbt.default__drop_materialized_view",
            "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.64602,
            "supported_languages": null
        },
        "macro.dbt.get_rename_materialized_view_sql": {
            "name": "get_rename_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/rename.sql",
            "original_file_path": "macros/relations/materialized_view/rename.sql",
            "unique_id": "macro.dbt.get_rename_materialized_view_sql",
            "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_rename_materialized_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6463149,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_materialized_view_sql": {
            "name": "default__get_rename_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/rename.sql",
            "original_file_path": "macros/relations/materialized_view/rename.sql",
            "unique_id": "macro.dbt.default__get_rename_materialized_view_sql",
            "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6464934,
            "supported_languages": null
        },
        "macro.dbt.get_create_materialized_view_as_sql": {
            "name": "get_create_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/create.sql",
            "original_file_path": "macros/relations/materialized_view/create.sql",
            "unique_id": "macro.dbt.get_create_materialized_view_as_sql",
            "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_create_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6468053,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_materialized_view_as_sql": {
            "name": "default__get_create_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/create.sql",
            "original_file_path": "macros/relations/materialized_view/create.sql",
            "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql",
            "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.646981,
            "supported_languages": null
        },
        "macro.dbt.get_alter_materialized_view_as_sql": {
            "name": "get_alter_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt.get_alter_materialized_view_as_sql",
            "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_alter_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6476882,
            "supported_languages": null
        },
        "macro.dbt.default__get_alter_materialized_view_as_sql": {
            "name": "default__get_alter_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql",
            "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6479077,
            "supported_languages": null
        },
        "macro.dbt.get_materialized_view_configuration_changes": {
            "name": "get_materialized_view_configuration_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt.get_materialized_view_configuration_changes",
            "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_materialized_view_configuration_changes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6482315,
            "supported_languages": null
        },
        "macro.dbt.default__get_materialized_view_configuration_changes": {
            "name": "default__get_materialized_view_configuration_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes",
            "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6484036,
            "supported_languages": null
        },
        "macro.dbt.refresh_materialized_view": {
            "name": "refresh_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/refresh.sql",
            "original_file_path": "macros/relations/materialized_view/refresh.sql",
            "unique_id": "macro.dbt.refresh_materialized_view",
            "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__refresh_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6487467,
            "supported_languages": null
        },
        "macro.dbt.default__refresh_materialized_view": {
            "name": "default__refresh_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/refresh.sql",
            "original_file_path": "macros/relations/materialized_view/refresh.sql",
            "unique_id": "macro.dbt.default__refresh_materialized_view",
            "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6489077,
            "supported_languages": null
        },
        "macro.dbt.generate_alias_name": {
            "name": "generate_alias_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "unique_id": "macro.dbt.generate_alias_name",
            "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_alias_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6493423,
            "supported_languages": null
        },
        "macro.dbt.default__generate_alias_name": {
            "name": "default__generate_alias_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "unique_id": "macro.dbt.default__generate_alias_name",
            "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.64978,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name": {
            "name": "generate_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "unique_id": "macro.dbt.generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6502707,
            "supported_languages": null
        },
        "macro.dbt.default__generate_schema_name": {
            "name": "default__generate_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "unique_id": "macro.dbt.default__generate_schema_name",
            "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6505814,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name_for_env": {
            "name": "generate_schema_name_for_env",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "unique_id": "macro.dbt.generate_schema_name_for_env",
            "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.650932,
            "supported_languages": null
        },
        "macro.dbt.generate_database_name": {
            "name": "generate_database_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_database.sql",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "unique_id": "macro.dbt.generate_database_name",
            "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.651335,
            "supported_languages": null
        },
        "macro.dbt.default__generate_database_name": {
            "name": "default__generate_database_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_database.sql",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "unique_id": "macro.dbt.default__generate_database_name",
            "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6516387,
            "supported_languages": null
        },
        "macro.dbt.convert_datetime": {
            "name": "convert_datetime",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "unique_id": "macro.dbt.convert_datetime",
            "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6524465,
            "supported_languages": null
        },
        "macro.dbt.dates_in_range": {
            "name": "dates_in_range",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "unique_id": "macro.dbt.dates_in_range",
            "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.convert_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.653831,
            "supported_languages": null
        },
        "macro.dbt.partition_range": {
            "name": "partition_range",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "unique_id": "macro.dbt.partition_range",
            "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dates_in_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6546912,
            "supported_languages": null
        },
        "macro.dbt.py_current_timestring": {
            "name": "py_current_timestring",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "unique_id": "macro.dbt.py_current_timestring",
            "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6549704,
            "supported_languages": null
        },
        "macro.dbt.statement": {
            "name": "statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "unique_id": "macro.dbt.statement",
            "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6564205,
            "supported_languages": null
        },
        "macro.dbt.noop_statement": {
            "name": "noop_statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "unique_id": "macro.dbt.noop_statement",
            "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.65707,
            "supported_languages": null
        },
        "macro.dbt.run_query": {
            "name": "run_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "unique_id": "macro.dbt.run_query",
            "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6574218,
            "supported_languages": null
        },
        "macro.dbt.default__test_relationships": {
            "name": "default__test_relationships",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/generic_test_sql/relationships.sql",
            "original_file_path": "macros/generic_test_sql/relationships.sql",
            "unique_id": "macro.dbt.default__test_relationships",
            "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6577706,
            "supported_languages": null
        },
        "macro.dbt.default__test_not_null": {
            "name": "default__test_not_null",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/generic_test_sql/not_null.sql",
            "original_file_path": "macros/generic_test_sql/not_null.sql",
            "unique_id": "macro.dbt.default__test_not_null",
            "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6581125,
            "supported_languages": null
        },
        "macro.dbt.default__test_unique": {
            "name": "default__test_unique",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/generic_test_sql/unique.sql",
            "original_file_path": "macros/generic_test_sql/unique.sql",
            "unique_id": "macro.dbt.default__test_unique",
            "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6583908,
            "supported_languages": null
        },
        "macro.dbt.default__test_accepted_values": {
            "name": "default__test_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/generic_test_sql/accepted_values.sql",
            "original_file_path": "macros/generic_test_sql/accepted_values.sql",
            "unique_id": "macro.dbt.default__test_accepted_values",
            "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6590075,
            "supported_languages": null
        },
        "macro.dbt.get_fixture_sql": {
            "name": "get_fixture_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.get_fixture_sql",
            "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_relation",
                    "macro.dbt.safe_cast",
                    "macro.dbt.validate_fixture_rows",
                    "macro.dbt.format_row"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6618721,
            "supported_languages": null
        },
        "macro.dbt.get_expected_sql": {
            "name": "get_expected_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.get_expected_sql",
            "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.format_row"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.662533,
            "supported_languages": null
        },
        "macro.dbt.format_row": {
            "name": "format_row",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.format_row",
            "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.string_literal",
                    "macro.dbt.escape_single_quotes",
                    "macro.dbt.safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.663836,
            "supported_languages": null
        },
        "macro.dbt.validate_fixture_rows": {
            "name": "validate_fixture_rows",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.validate_fixture_rows",
            "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__validate_fixture_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6640818,
            "supported_languages": null
        },
        "macro.dbt.default__validate_fixture_rows": {
            "name": "default__validate_fixture_rows",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.default__validate_fixture_rows",
            "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6642008,
            "supported_languages": null
        },
        "macro.dbt.create_schema": {
            "name": "create_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "unique_id": "macro.dbt.create_schema",
            "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__create_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6645718,
            "supported_languages": null
        },
        "macro.dbt.default__create_schema": {
            "name": "default__create_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "unique_id": "macro.dbt.default__create_schema",
            "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.664792,
            "supported_languages": null
        },
        "macro.dbt.drop_schema": {
            "name": "drop_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "unique_id": "macro.dbt.drop_schema",
            "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__drop_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.664984,
            "supported_languages": null
        },
        "macro.dbt.default__drop_schema": {
            "name": "default__drop_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "unique_id": "macro.dbt.default__drop_schema",
            "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.665202,
            "supported_languages": null
        },
        "macro.dbt.validate_sql": {
            "name": "validate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/validate_sql.sql",
            "original_file_path": "macros/adapters/validate_sql.sql",
            "unique_id": "macro.dbt.validate_sql",
            "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__validate_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6655354,
            "supported_languages": null
        },
        "macro.dbt.default__validate_sql": {
            "name": "default__validate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/validate_sql.sql",
            "original_file_path": "macros/adapters/validate_sql.sql",
            "unique_id": "macro.dbt.default__validate_sql",
            "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6658003,
            "supported_languages": null
        },
        "macro.dbt.make_intermediate_relation": {
            "name": "make_intermediate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.make_intermediate_relation",
            "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_intermediate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6665056,
            "supported_languages": null
        },
        "macro.dbt.default__make_intermediate_relation": {
            "name": "default__make_intermediate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__make_intermediate_relation",
            "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6666987,
            "supported_languages": null
        },
        "macro.dbt.make_temp_relation": {
            "name": "make_temp_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.make_temp_relation",
            "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6669624,
            "supported_languages": null
        },
        "macro.dbt.default__make_temp_relation": {
            "name": "default__make_temp_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__make_temp_relation",
            "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6672971,
            "supported_languages": null
        },
        "macro.dbt.make_backup_relation": {
            "name": "make_backup_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.make_backup_relation",
            "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_backup_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.667572,
            "supported_languages": null
        },
        "macro.dbt.default__make_backup_relation": {
            "name": "default__make_backup_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__make_backup_relation",
            "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6679368,
            "supported_languages": null
        },
        "macro.dbt.truncate_relation": {
            "name": "truncate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.truncate_relation",
            "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__truncate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6681447,
            "supported_languages": null
        },
        "macro.dbt.default__truncate_relation": {
            "name": "default__truncate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__truncate_relation",
            "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.668355,
            "supported_languages": null
        },
        "macro.dbt.get_or_create_relation": {
            "name": "get_or_create_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.get_or_create_relation",
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_or_create_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6686301,
            "supported_languages": null
        },
        "macro.dbt.default__get_or_create_relation": {
            "name": "default__get_or_create_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__get_or_create_relation",
            "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6692712,
            "supported_languages": null
        },
        "macro.dbt.load_cached_relation": {
            "name": "load_cached_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.load_cached_relation",
            "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.669533,
            "supported_languages": null
        },
        "macro.dbt.load_relation": {
            "name": "load_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.load_relation",
            "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6697009,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_relation": {
            "name": "get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_columns_in_relation",
            "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6709094,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_relation": {
            "name": "default__get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__get_columns_in_relation",
            "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.671102,
            "supported_languages": null
        },
        "macro.dbt.sql_convert_columns_in_relation": {
            "name": "sql_convert_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.sql_convert_columns_in_relation",
            "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6714673,
            "supported_languages": null
        },
        "macro.dbt.get_empty_subquery_sql": {
            "name": "get_empty_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_empty_subquery_sql",
            "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_empty_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.671713,
            "supported_languages": null
        },
        "macro.dbt.default__get_empty_subquery_sql": {
            "name": "default__get_empty_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__get_empty_subquery_sql",
            "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.671958,
            "supported_languages": null
        },
        "macro.dbt.get_empty_schema_sql": {
            "name": "get_empty_schema_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_empty_schema_sql",
            "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_empty_schema_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6721668,
            "supported_languages": null
        },
        "macro.dbt.default__get_empty_schema_sql": {
            "name": "default__get_empty_schema_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__get_empty_schema_sql",
            "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.673668,
            "supported_languages": null
        },
        "macro.dbt.get_column_schema_from_query": {
            "name": "get_column_schema_from_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_column_schema_from_query",
            "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_empty_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6740823,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_query": {
            "name": "get_columns_in_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_columns_in_query",
            "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6742961,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_query": {
            "name": "default__get_columns_in_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__get_columns_in_query",
            "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.get_empty_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6746874,
            "supported_languages": null
        },
        "macro.dbt.alter_column_type": {
            "name": "alter_column_type",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.alter_column_type",
            "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6749578,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_type": {
            "name": "default__alter_column_type",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__alter_column_type",
            "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6757102,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_add_remove_columns": {
            "name": "alter_relation_add_remove_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.alter_relation_add_remove_columns",
            "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__alter_relation_add_remove_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6760128,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_add_remove_columns": {
            "name": "default__alter_relation_add_remove_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
            "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6769524,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp": {
            "name": "current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.current_timestamp",
            "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6775048,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp": {
            "name": "default__current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6776853,
            "supported_languages": null
        },
        "macro.dbt.snapshot_get_time": {
            "name": "snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.snapshot_get_time",
            "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6778579,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_get_time": {
            "name": "default__snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.default__snapshot_get_time",
            "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6779883,
            "supported_languages": null
        },
        "macro.dbt.get_snapshot_get_time_data_type": {
            "name": "get_snapshot_get_time_data_type",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.get_snapshot_get_time_data_type",
            "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt_redshift.redshift__snapshot_get_time",
                    "macro.dbt.get_column_schema_from_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.678473,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_backcompat": {
            "name": "current_timestamp_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.current_timestamp_backcompat",
            "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6786675,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_backcompat": {
            "name": "default__current_timestamp_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.default__current_timestamp_backcompat",
            "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.678764,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_in_utc_backcompat": {
            "name": "current_timestamp_in_utc_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.678967,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_in_utc_backcompat": {
            "name": "default__current_timestamp_in_utc_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp_backcompat",
                    "macro.dbt_redshift.redshift__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6791577,
            "supported_languages": null
        },
        "macro.dbt.alter_column_comment": {
            "name": "alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.alter_column_comment",
            "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6796336,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_comment": {
            "name": "default__alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.default__alter_column_comment",
            "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6798306,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_comment": {
            "name": "alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.alter_relation_comment",
            "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__alter_relation_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6800609,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_comment": {
            "name": "default__alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.default__alter_relation_comment",
            "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6802552,
            "supported_languages": null
        },
        "macro.dbt.persist_docs": {
            "name": "persist_docs",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.persist_docs",
            "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.680554,
            "supported_languages": null
        },
        "macro.dbt.default__persist_docs": {
            "name": "default__persist_docs",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.default__persist_docs",
            "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6810896,
            "supported_languages": null
        },
        "macro.dbt.copy_grants": {
            "name": "copy_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.copy_grants",
            "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6822875,
            "supported_languages": null
        },
        "macro.dbt.default__copy_grants": {
            "name": "default__copy_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__copy_grants",
            "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.682427,
            "supported_languages": null
        },
        "macro.dbt.support_multiple_grantees_per_dcl_statement": {
            "name": "support_multiple_grantees_per_dcl_statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
            "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6826224,
            "supported_languages": null
        },
        "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
            "name": "default__support_multiple_grantees_per_dcl_statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
            "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6827607,
            "supported_languages": null
        },
        "macro.dbt.should_revoke": {
            "name": "should_revoke",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.should_revoke",
            "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6833138,
            "supported_languages": null
        },
        "macro.dbt.get_show_grant_sql": {
            "name": "get_show_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.get_show_grant_sql",
            "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_show_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.683538,
            "supported_languages": null
        },
        "macro.dbt.default__get_show_grant_sql": {
            "name": "default__get_show_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__get_show_grant_sql",
            "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6836843,
            "supported_languages": null
        },
        "macro.dbt.get_grant_sql": {
            "name": "get_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.get_grant_sql",
            "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6839437,
            "supported_languages": null
        },
        "macro.dbt.default__get_grant_sql": {
            "name": "default__get_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__get_grant_sql",
            "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6841853,
            "supported_languages": null
        },
        "macro.dbt.get_revoke_sql": {
            "name": "get_revoke_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.get_revoke_sql",
            "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_revoke_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6844444,
            "supported_languages": null
        },
        "macro.dbt.default__get_revoke_sql": {
            "name": "default__get_revoke_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__get_revoke_sql",
            "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6846848,
            "supported_languages": null
        },
        "macro.dbt.get_dcl_statement_list": {
            "name": "get_dcl_statement_list",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.get_dcl_statement_list",
            "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_dcl_statement_list"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6849425,
            "supported_languages": null
        },
        "macro.dbt.default__get_dcl_statement_list": {
            "name": "default__get_dcl_statement_list",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__get_dcl_statement_list",
            "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.685753,
            "supported_languages": null
        },
        "macro.dbt.call_dcl_statements": {
            "name": "call_dcl_statements",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.call_dcl_statements",
            "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6859756,
            "supported_languages": null
        },
        "macro.dbt.default__call_dcl_statements": {
            "name": "default__call_dcl_statements",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__call_dcl_statements",
            "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6862686,
            "supported_languages": null
        },
        "macro.dbt.apply_grants": {
            "name": "apply_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.apply_grants",
            "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6865275,
            "supported_languages": null
        },
        "macro.dbt.default__apply_grants": {
            "name": "default__apply_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__apply_grants",
            "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.get_show_grant_sql",
                    "macro.dbt.get_dcl_statement_list",
                    "macro.dbt.call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.687868,
            "supported_languages": null
        },
        "macro.dbt.get_show_sql": {
            "name": "get_show_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/show.sql",
            "original_file_path": "macros/adapters/show.sql",
            "unique_id": "macro.dbt.get_show_sql",
            "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_limit_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.688332,
            "supported_languages": null
        },
        "macro.dbt.get_limit_subquery_sql": {
            "name": "get_limit_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/show.sql",
            "original_file_path": "macros/adapters/show.sql",
            "unique_id": "macro.dbt.get_limit_subquery_sql",
            "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_limit_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.688551,
            "supported_languages": null
        },
        "macro.dbt.default__get_limit_sql": {
            "name": "default__get_limit_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/show.sql",
            "original_file_path": "macros/adapters/show.sql",
            "unique_id": "macro.dbt.default__get_limit_sql",
            "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ compiled_code }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6887763,
            "supported_languages": null
        },
        "macro.dbt.get_catalog_relations": {
            "name": "get_catalog_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_catalog_relations",
            "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_catalog_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.689674,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog_relations": {
            "name": "default__get_catalog_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_catalog_relations",
            "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6899817,
            "supported_languages": null
        },
        "macro.dbt.get_catalog": {
            "name": "get_catalog",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_catalog",
            "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_catalog"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6902122,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog": {
            "name": "default__get_catalog",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_catalog",
            "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.690519,
            "supported_languages": null
        },
        "macro.dbt.information_schema_name": {
            "name": "information_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.information_schema_name",
            "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.690731,
            "supported_languages": null
        },
        "macro.dbt.default__information_schema_name": {
            "name": "default__information_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__information_schema_name",
            "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6909392,
            "supported_languages": null
        },
        "macro.dbt.list_schemas": {
            "name": "list_schemas",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.list_schemas",
            "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__list_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6911488,
            "supported_languages": null
        },
        "macro.dbt.default__list_schemas": {
            "name": "default__list_schemas",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__list_schemas",
            "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.information_schema_name",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.691437,
            "supported_languages": null
        },
        "macro.dbt.check_schema_exists": {
            "name": "check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.check_schema_exists",
            "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__check_schema_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.691676,
            "supported_languages": null
        },
        "macro.dbt.default__check_schema_exists": {
            "name": "default__check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__check_schema_exists",
            "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6920419,
            "supported_languages": null
        },
        "macro.dbt.list_relations_without_caching": {
            "name": "list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.list_relations_without_caching",
            "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__list_relations_without_caching"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6925995,
            "supported_languages": null
        },
        "macro.dbt.default__list_relations_without_caching": {
            "name": "default__list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__list_relations_without_caching",
            "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6927958,
            "supported_languages": null
        },
        "macro.dbt.get_catalog_for_single_relation": {
            "name": "get_catalog_for_single_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_catalog_for_single_relation",
            "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_catalog_for_single_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6930046,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog_for_single_relation": {
            "name": "default__get_catalog_for_single_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_catalog_for_single_relation",
            "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.693191,
            "supported_languages": null
        },
        "macro.dbt.get_relations": {
            "name": "get_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_relations",
            "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6934054,
            "supported_languages": null
        },
        "macro.dbt.default__get_relations": {
            "name": "default__get_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_relations",
            "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6935847,
            "supported_languages": null
        },
        "macro.dbt.get_relation_last_modified": {
            "name": "get_relation_last_modified",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_relation_last_modified",
            "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__get_relation_last_modified"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6938198,
            "supported_languages": null
        },
        "macro.dbt.default__get_relation_last_modified": {
            "name": "default__get_relation_last_modified",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_relation_last_modified",
            "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6940207,
            "supported_languages": null
        },
        "macro.dbt.collect_freshness": {
            "name": "collect_freshness",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "unique_id": "macro.dbt.collect_freshness",
            "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6944427,
            "supported_languages": null
        },
        "macro.dbt.default__collect_freshness": {
            "name": "default__collect_freshness",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "unique_id": "macro.dbt.default__collect_freshness",
            "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6949327,
            "supported_languages": null
        },
        "macro.dbt.get_create_index_sql": {
            "name": "get_create_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.get_create_index_sql",
            "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6954565,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_index_sql": {
            "name": "default__get_create_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.default__get_create_index_sql",
            "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6956215,
            "supported_languages": null
        },
        "macro.dbt.create_indexes": {
            "name": "create_indexes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.create_indexes",
            "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6958067,
            "supported_languages": null
        },
        "macro.dbt.default__create_indexes": {
            "name": "default__create_indexes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.default__create_indexes",
            "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6962721,
            "supported_languages": null
        },
        "macro.dbt.get_drop_index_sql": {
            "name": "get_drop_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.get_drop_index_sql",
            "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_drop_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6964855,
            "supported_languages": null
        },
        "macro.dbt.default__get_drop_index_sql": {
            "name": "default__get_drop_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.default__get_drop_index_sql",
            "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6966493,
            "supported_languages": null
        },
        "macro.dbt.get_show_indexes_sql": {
            "name": "get_show_indexes_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.get_show_indexes_sql",
            "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_show_indexes_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6968338,
            "supported_languages": null
        },
        "macro.dbt.default__get_show_indexes_sql": {
            "name": "default__get_show_indexes_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.default__get_show_indexes_sql",
            "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6969862,
            "supported_languages": null
        },
        "macro.dbt.resolve_model_name": {
            "name": "resolve_model_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.resolve_model_name",
            "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6977596,
            "supported_languages": null
        },
        "macro.dbt.default__resolve_model_name": {
            "name": "default__resolve_model_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.default__resolve_model_name",
            "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.697946,
            "supported_languages": null
        },
        "macro.dbt.build_ref_function": {
            "name": "build_ref_function",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.build_ref_function",
            "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6988912,
            "supported_languages": null
        },
        "macro.dbt.build_source_function": {
            "name": "build_source_function",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.build_source_function",
            "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.6993628,
            "supported_languages": null
        },
        "macro.dbt.build_config_dict": {
            "name": "build_config_dict",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.build_config_dict",
            "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7000318,
            "supported_languages": null
        },
        "macro.dbt.py_script_postfix": {
            "name": "py_script_postfix",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.py_script_postfix",
            "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.build_ref_function",
                    "macro.dbt.build_source_function",
                    "macro.dbt.build_config_dict",
                    "macro.dbt.resolve_model_name",
                    "macro.dbt.is_incremental",
                    "macro.dbt.py_script_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7005758,
            "supported_languages": null
        },
        "macro.dbt.py_script_comment": {
            "name": "py_script_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.py_script_comment",
            "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7006683,
            "supported_languages": null
        },
        "macro.dbt.replace": {
            "name": "replace",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/replace.sql",
            "original_file_path": "macros/utils/replace.sql",
            "unique_id": "macro.dbt.replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7010212,
            "supported_languages": null
        },
        "macro.dbt.default__replace": {
            "name": "default__replace",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/replace.sql",
            "original_file_path": "macros/utils/replace.sql",
            "unique_id": "macro.dbt.default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.701243,
            "supported_languages": null
        },
        "macro.dbt.datediff": {
            "name": "datediff",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "unique_id": "macro.dbt.datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7016006,
            "supported_languages": null
        },
        "macro.dbt.default__datediff": {
            "name": "default__datediff",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "unique_id": "macro.dbt.default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7019196,
            "supported_languages": null
        },
        "macro.dbt.date": {
            "name": "date",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date.sql",
            "original_file_path": "macros/utils/date.sql",
            "unique_id": "macro.dbt.date",
            "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.702288,
            "supported_languages": null
        },
        "macro.dbt.default__date": {
            "name": "default__date",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date.sql",
            "original_file_path": "macros/utils/date.sql",
            "unique_id": "macro.dbt.default__date",
            "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7026224,
            "supported_languages": null
        },
        "macro.dbt.except": {
            "name": "except",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "unique_id": "macro.dbt.except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.702893,
            "supported_languages": null
        },
        "macro.dbt.default__except": {
            "name": "default__except",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "unique_id": "macro.dbt.default__except",
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7029905,
            "supported_languages": null
        },
        "macro.dbt.cast_bool_to_text": {
            "name": "cast_bool_to_text",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "unique_id": "macro.dbt.cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7032614,
            "supported_languages": null
        },
        "macro.dbt.default__cast_bool_to_text": {
            "name": "default__cast_bool_to_text",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "unique_id": "macro.dbt.default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7034492,
            "supported_languages": null
        },
        "macro.dbt.last_day": {
            "name": "last_day",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "unique_id": "macro.dbt.last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7037983,
            "supported_languages": null
        },
        "macro.dbt.default_last_day": {
            "name": "default_last_day",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "unique_id": "macro.dbt.default_last_day",
            "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7040973,
            "supported_languages": null
        },
        "macro.dbt.default__last_day": {
            "name": "default__last_day",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "unique_id": "macro.dbt.default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7042718,
            "supported_languages": null
        },
        "macro.dbt.date_trunc": {
            "name": "date_trunc",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "unique_id": "macro.dbt.date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.704582,
            "supported_languages": null
        },
        "macro.dbt.default__date_trunc": {
            "name": "default__date_trunc",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "unique_id": "macro.dbt.default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7047424,
            "supported_languages": null
        },
        "macro.dbt.get_powers_of_two": {
            "name": "get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/generate_series.sql",
            "original_file_path": "macros/utils/generate_series.sql",
            "unique_id": "macro.dbt.get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7052424,
            "supported_languages": null
        },
        "macro.dbt.default__get_powers_of_two": {
            "name": "default__get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/generate_series.sql",
            "original_file_path": "macros/utils/generate_series.sql",
            "unique_id": "macro.dbt.default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7057316,
            "supported_languages": null
        },
        "macro.dbt.generate_series": {
            "name": "generate_series",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/generate_series.sql",
            "original_file_path": "macros/utils/generate_series.sql",
            "unique_id": "macro.dbt.generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7059479,
            "supported_languages": null
        },
        "macro.dbt.default__generate_series": {
            "name": "default__generate_series",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/generate_series.sql",
            "original_file_path": "macros/utils/generate_series.sql",
            "unique_id": "macro.dbt.default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7065554,
            "supported_languages": null
        },
        "macro.dbt.safe_cast": {
            "name": "safe_cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "unique_id": "macro.dbt.safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.706892,
            "supported_languages": null
        },
        "macro.dbt.default__safe_cast": {
            "name": "default__safe_cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "unique_id": "macro.dbt.default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7070582,
            "supported_languages": null
        },
        "macro.dbt.split_part": {
            "name": "split_part",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "unique_id": "macro.dbt.split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7074618,
            "supported_languages": null
        },
        "macro.dbt.default__split_part": {
            "name": "default__split_part",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "unique_id": "macro.dbt.default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7076592,
            "supported_languages": null
        },
        "macro.dbt._split_part_negative": {
            "name": "_split_part_negative",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "unique_id": "macro.dbt._split_part_negative",
            "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.707932,
            "supported_languages": null
        },
        "macro.dbt.bool_or": {
            "name": "bool_or",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "unique_id": "macro.dbt.bool_or",
            "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.708214,
            "supported_languages": null
        },
        "macro.dbt.default__bool_or": {
            "name": "default__bool_or",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "unique_id": "macro.dbt.default__bool_or",
            "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.708344,
            "supported_languages": null
        },
        "macro.dbt.hash": {
            "name": "hash",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "unique_id": "macro.dbt.hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7086282,
            "supported_languages": null
        },
        "macro.dbt.default__hash": {
            "name": "default__hash",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "unique_id": "macro.dbt.default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7088246,
            "supported_languages": null
        },
        "macro.dbt.any_value": {
            "name": "any_value",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "unique_id": "macro.dbt.any_value",
            "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7091002,
            "supported_languages": null
        },
        "macro.dbt.default__any_value": {
            "name": "default__any_value",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "unique_id": "macro.dbt.default__any_value",
            "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7092505,
            "supported_languages": null
        },
        "macro.dbt.get_intervals_between": {
            "name": "get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_spine.sql",
            "original_file_path": "macros/utils/date_spine.sql",
            "unique_id": "macro.dbt.get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7099166,
            "supported_languages": null
        },
        "macro.dbt.default__get_intervals_between": {
            "name": "default__get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_spine.sql",
            "original_file_path": "macros/utils/date_spine.sql",
            "unique_id": "macro.dbt.default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7106209,
            "supported_languages": null
        },
        "macro.dbt.date_spine": {
            "name": "date_spine",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_spine.sql",
            "original_file_path": "macros/utils/date_spine.sql",
            "unique_id": "macro.dbt.date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7109017,
            "supported_languages": null
        },
        "macro.dbt.default__date_spine": {
            "name": "default__date_spine",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_spine.sql",
            "original_file_path": "macros/utils/date_spine.sql",
            "unique_id": "macro.dbt.default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.generate_series",
                    "macro.dbt.get_intervals_between",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.711323,
            "supported_languages": null
        },
        "macro.dbt.type_string": {
            "name": "type_string",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7120886,
            "supported_languages": null
        },
        "macro.dbt.default__type_string": {
            "name": "default__type_string",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7122662,
            "supported_languages": null
        },
        "macro.dbt.type_timestamp": {
            "name": "type_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7124555,
            "supported_languages": null
        },
        "macro.dbt.default__type_timestamp": {
            "name": "default__type_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7126315,
            "supported_languages": null
        },
        "macro.dbt.type_float": {
            "name": "type_float",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7128174,
            "supported_languages": null
        },
        "macro.dbt.default__type_float": {
            "name": "default__type_float",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7129908,
            "supported_languages": null
        },
        "macro.dbt.type_numeric": {
            "name": "type_numeric",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7131758,
            "supported_languages": null
        },
        "macro.dbt.default__type_numeric": {
            "name": "default__type_numeric",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7133982,
            "supported_languages": null
        },
        "macro.dbt.type_bigint": {
            "name": "type_bigint",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7135863,
            "supported_languages": null
        },
        "macro.dbt.default__type_bigint": {
            "name": "default__type_bigint",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.713759,
            "supported_languages": null
        },
        "macro.dbt.type_int": {
            "name": "type_int",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7139432,
            "supported_languages": null
        },
        "macro.dbt.default__type_int": {
            "name": "default__type_int",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_int",
            "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.714113,
            "supported_languages": null
        },
        "macro.dbt.type_boolean": {
            "name": "type_boolean",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_boolean",
            "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_boolean"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7142973,
            "supported_languages": null
        },
        "macro.dbt.default__type_boolean": {
            "name": "default__type_boolean",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_boolean",
            "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.714464,
            "supported_languages": null
        },
        "macro.dbt.array_concat": {
            "name": "array_concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "unique_id": "macro.dbt.array_concat",
            "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__array_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7148004,
            "supported_languages": null
        },
        "macro.dbt.default__array_concat": {
            "name": "default__array_concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "unique_id": "macro.dbt.default__array_concat",
            "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7149646,
            "supported_languages": null
        },
        "macro.dbt.right": {
            "name": "right",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "unique_id": "macro.dbt.right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7152944,
            "supported_languages": null
        },
        "macro.dbt.default__right": {
            "name": "default__right",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "unique_id": "macro.dbt.default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7154655,
            "supported_languages": null
        },
        "macro.dbt.array_append": {
            "name": "array_append",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "unique_id": "macro.dbt.array_append",
            "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7157826,
            "supported_languages": null
        },
        "macro.dbt.default__array_append": {
            "name": "default__array_append",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "unique_id": "macro.dbt.default__array_append",
            "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7159429,
            "supported_languages": null
        },
        "macro.dbt.array_construct": {
            "name": "array_construct",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "unique_id": "macro.dbt.array_construct",
            "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7163503,
            "supported_languages": null
        },
        "macro.dbt.default__array_construct": {
            "name": "default__array_construct",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "unique_id": "macro.dbt.default__array_construct",
            "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7166424,
            "supported_languages": null
        },
        "macro.dbt.dateadd": {
            "name": "dateadd",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "unique_id": "macro.dbt.dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7169929,
            "supported_languages": null
        },
        "macro.dbt.default__dateadd": {
            "name": "default__dateadd",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "unique_id": "macro.dbt.default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7173312,
            "supported_languages": null
        },
        "macro.dbt.length": {
            "name": "length",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "unique_id": "macro.dbt.length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7176309,
            "supported_languages": null
        },
        "macro.dbt.default__length": {
            "name": "default__length",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "unique_id": "macro.dbt.default__length",
            "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7177625,
            "supported_languages": null
        },
        "macro.dbt.intersect": {
            "name": "intersect",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "unique_id": "macro.dbt.intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.718014,
            "supported_languages": null
        },
        "macro.dbt.default__intersect": {
            "name": "default__intersect",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "unique_id": "macro.dbt.default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7181103,
            "supported_languages": null
        },
        "macro.dbt.concat": {
            "name": "concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/concat.sql",
            "original_file_path": "macros/utils/concat.sql",
            "unique_id": "macro.dbt.concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7183843,
            "supported_languages": null
        },
        "macro.dbt.default__concat": {
            "name": "default__concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/concat.sql",
            "original_file_path": "macros/utils/concat.sql",
            "unique_id": "macro.dbt.default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7185376,
            "supported_languages": null
        },
        "macro.dbt.string_literal": {
            "name": "string_literal",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/literal.sql",
            "original_file_path": "macros/utils/literal.sql",
            "unique_id": "macro.dbt.string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7188196,
            "supported_languages": null
        },
        "macro.dbt.default__string_literal": {
            "name": "default__string_literal",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/literal.sql",
            "original_file_path": "macros/utils/literal.sql",
            "unique_id": "macro.dbt.default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7189474,
            "supported_languages": null
        },
        "macro.dbt.listagg": {
            "name": "listagg",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "unique_id": "macro.dbt.listagg",
            "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_redshift.redshift__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7194343,
            "supported_languages": null
        },
        "macro.dbt.default__listagg": {
            "name": "default__listagg",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "unique_id": "macro.dbt.default__listagg",
            "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7199147,
            "supported_languages": null
        },
        "macro.dbt.position": {
            "name": "position",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "unique_id": "macro.dbt.position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7202308,
            "supported_languages": null
        },
        "macro.dbt.default__position": {
            "name": "default__position",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "unique_id": "macro.dbt.default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7203946,
            "supported_languages": null
        },
        "macro.dbt.cast": {
            "name": "cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/cast.sql",
            "original_file_path": "macros/utils/cast.sql",
            "unique_id": "macro.dbt.cast",
            "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7207062,
            "supported_languages": null
        },
        "macro.dbt.default__cast": {
            "name": "default__cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/cast.sql",
            "original_file_path": "macros/utils/cast.sql",
            "unique_id": "macro.dbt.default__cast",
            "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7208617,
            "supported_languages": null
        },
        "macro.dbt.escape_single_quotes": {
            "name": "escape_single_quotes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "unique_id": "macro.dbt.escape_single_quotes",
            "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7211735,
            "supported_languages": null
        },
        "macro.dbt.default__escape_single_quotes": {
            "name": "default__escape_single_quotes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "unique_id": "macro.dbt.default__escape_single_quotes",
            "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7213647,
            "supported_languages": null
        },
        "macro.dbt.test_unique": {
            "name": "test_unique",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "unique_id": "macro.dbt.test_unique",
            "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7218673,
            "supported_languages": null
        },
        "macro.dbt.test_not_null": {
            "name": "test_not_null",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "unique_id": "macro.dbt.test_not_null",
            "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.722156,
            "supported_languages": null
        },
        "macro.dbt.test_accepted_values": {
            "name": "test_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "unique_id": "macro.dbt.test_accepted_values",
            "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7225065,
            "supported_languages": null
        },
        "macro.dbt.test_relationships": {
            "name": "test_relationships",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "unique_id": "macro.dbt.test_relationships",
            "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_relationships"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7228513,
            "supported_languages": null
        },
        "macro.dbt_utils.array_concat": {
            "name": "array_concat",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_concat.sql",
            "original_file_path": "macros/cross_db_utils/array_concat.sql",
            "unique_id": "macro.dbt_utils.array_concat",
            "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning_without_replacement",
                    "macro.dbt_utils.redshift__array_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.723341,
            "supported_languages": null
        },
        "macro.dbt_utils.default__array_concat": {
            "name": "default__array_concat",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_concat.sql",
            "original_file_path": "macros/cross_db_utils/array_concat.sql",
            "unique_id": "macro.dbt_utils.default__array_concat",
            "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7235062,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__array_concat": {
            "name": "bigquery__array_concat",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_concat.sql",
            "original_file_path": "macros/cross_db_utils/array_concat.sql",
            "unique_id": "macro.dbt_utils.bigquery__array_concat",
            "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7236633,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__array_concat": {
            "name": "redshift__array_concat",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_concat.sql",
            "original_file_path": "macros/cross_db_utils/array_concat.sql",
            "unique_id": "macro.dbt_utils.redshift__array_concat",
            "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7238226,
            "supported_languages": null
        },
        "macro.dbt_utils.array_append": {
            "name": "array_append",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_append.sql",
            "original_file_path": "macros/cross_db_utils/array_append.sql",
            "unique_id": "macro.dbt_utils.array_append",
            "macro_sql": "{% macro array_append(array, new_element) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_append', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning_without_replacement",
                    "macro.dbt_utils.redshift__array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7243102,
            "supported_languages": null
        },
        "macro.dbt_utils.default__array_append": {
            "name": "default__array_append",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_append.sql",
            "original_file_path": "macros/cross_db_utils/array_append.sql",
            "unique_id": "macro.dbt_utils.default__array_append",
            "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7245867,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__array_append": {
            "name": "bigquery__array_append",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_append.sql",
            "original_file_path": "macros/cross_db_utils/array_append.sql",
            "unique_id": "macro.dbt_utils.bigquery__array_append",
            "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.array_concat",
                    "macro.dbt_utils.array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7248018,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__array_append": {
            "name": "redshift__array_append",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_append.sql",
            "original_file_path": "macros/cross_db_utils/array_append.sql",
            "unique_id": "macro.dbt_utils.redshift__array_append",
            "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.array_concat",
                    "macro.dbt_utils.array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7250123,
            "supported_languages": null
        },
        "macro.dbt_utils.array_construct": {
            "name": "array_construct",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_construct.sql",
            "original_file_path": "macros/cross_db_utils/array_construct.sql",
            "unique_id": "macro.dbt_utils.array_construct",
            "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_construct', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning_without_replacement",
                    "macro.dbt_utils.redshift__array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7256427,
            "supported_languages": null
        },
        "macro.dbt_utils.default__array_construct": {
            "name": "default__array_construct",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_construct.sql",
            "original_file_path": "macros/cross_db_utils/array_construct.sql",
            "unique_id": "macro.dbt_utils.default__array_construct",
            "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7259278,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__array_construct": {
            "name": "snowflake__array_construct",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_construct.sql",
            "original_file_path": "macros/cross_db_utils/array_construct.sql",
            "unique_id": "macro.dbt_utils.snowflake__array_construct",
            "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.726096,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__array_construct": {
            "name": "redshift__array_construct",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_construct.sql",
            "original_file_path": "macros/cross_db_utils/array_construct.sql",
            "unique_id": "macro.dbt_utils.redshift__array_construct",
            "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7262611,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__array_construct": {
            "name": "bigquery__array_construct",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/array_construct.sql",
            "original_file_path": "macros/cross_db_utils/array_construct.sql",
            "unique_id": "macro.dbt_utils.bigquery__array_construct",
            "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7264256,
            "supported_languages": null
        },
        "macro.dbt_utils.current_timestamp": {
            "name": "current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "unique_id": "macro.dbt_utils.current_timestamp",
            "macro_sql": "{% macro current_timestamp() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning_without_replacement",
                    "macro.dbt_utils.redshift__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.726996,
            "supported_languages": null
        },
        "macro.dbt_utils.default__current_timestamp": {
            "name": "default__current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "unique_id": "macro.dbt_utils.default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7271307,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__current_timestamp": {
            "name": "redshift__current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "unique_id": "macro.dbt_utils.redshift__current_timestamp",
            "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.727226,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__current_timestamp": {
            "name": "bigquery__current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "unique_id": "macro.dbt_utils.bigquery__current_timestamp",
            "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7273204,
            "supported_languages": null
        },
        "macro.dbt_utils.current_timestamp_in_utc": {
            "name": "current_timestamp_in_utc",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "unique_id": "macro.dbt_utils.current_timestamp_in_utc",
            "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp_in_utc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning_without_replacement",
                    "macro.dbt_utils.redshift__current_timestamp_in_utc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7276075,
            "supported_languages": null
        },
        "macro.dbt_utils.default__current_timestamp_in_utc": {
            "name": "default__current_timestamp_in_utc",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc",
            "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7277453,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__current_timestamp_in_utc": {
            "name": "snowflake__current_timestamp_in_utc",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc",
            "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{ dbt_utils.current_timestamp() }})::{{ type_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp",
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7279136,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__current_timestamp_in_utc": {
            "name": "postgres__current_timestamp_in_utc",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc",
            "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.728042,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__current_timestamp_in_utc": {
            "name": "redshift__current_timestamp_in_utc",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/current_timestamp.sql",
            "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
            "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc",
            "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__current_timestamp_in_utc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7281947,
            "supported_languages": null
        },
        "macro.dbt_utils.cast_array_to_string": {
            "name": "cast_array_to_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/cast_array_to_string.sql",
            "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql",
            "unique_id": "macro.dbt_utils.cast_array_to_string",
            "macro_sql": "{% macro cast_array_to_string(array) %}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('cast_array_to_string', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning_without_replacement",
                    "macro.dbt_utils.redshift__cast_array_to_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7287064,
            "supported_languages": null
        },
        "macro.dbt_utils.default__cast_array_to_string": {
            "name": "default__cast_array_to_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/cast_array_to_string.sql",
            "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql",
            "unique_id": "macro.dbt_utils.default__cast_array_to_string",
            "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.728869,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__cast_array_to_string": {
            "name": "postgres__cast_array_to_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/cast_array_to_string.sql",
            "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql",
            "unique_id": "macro.dbt_utils.postgres__cast_array_to_string",
            "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ type_string() }}){%- endset -%}\n    {{ replace(replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7291865,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__cast_array_to_string": {
            "name": "redshift__cast_array_to_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/cast_array_to_string.sql",
            "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql",
            "unique_id": "macro.dbt_utils.redshift__cast_array_to_string",
            "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7293675,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__cast_array_to_string": {
            "name": "bigquery__cast_array_to_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/cast_array_to_string.sql",
            "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql",
            "unique_id": "macro.dbt_utils.bigquery__cast_array_to_string",
            "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7294986,
            "supported_languages": null
        },
        "macro.dbt_utils.replace": {
            "name": "replace",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/replace.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/replace.sql",
            "unique_id": "macro.dbt_utils.replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7298477,
            "supported_languages": null
        },
        "macro.dbt_utils.default__replace": {
            "name": "default__replace",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/replace.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/replace.sql",
            "unique_id": "macro.dbt_utils.default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n  {% do dbt_utils.xdb_deprecation_warning('replace', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.replace",
                    "macro.dbt.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.73022,
            "supported_languages": null
        },
        "macro.dbt_utils.datediff": {
            "name": "datediff",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datediff.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql",
            "unique_id": "macro.dbt_utils.datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7305865,
            "supported_languages": null
        },
        "macro.dbt_utils.default__datediff": {
            "name": "default__datediff",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datediff.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql",
            "unique_id": "macro.dbt_utils.default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('datediff', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.datediff",
                    "macro.dbt_redshift.redshift__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7309716,
            "supported_languages": null
        },
        "macro.dbt_utils.identifier": {
            "name": "identifier",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/identifier.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql",
            "unique_id": "macro.dbt_utils.identifier",
            "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__identifier"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7314668,
            "supported_languages": null
        },
        "macro.dbt_utils.default__identifier": {
            "name": "default__identifier",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/identifier.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql",
            "unique_id": "macro.dbt_utils.default__identifier",
            "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7317138,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__identifier": {
            "name": "bigquery__identifier",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/identifier.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql",
            "unique_id": "macro.dbt_utils.bigquery__identifier",
            "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.731841,
            "supported_languages": null
        },
        "macro.dbt_utils.except": {
            "name": "except",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/except.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/except.sql",
            "unique_id": "macro.dbt_utils.except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7321253,
            "supported_languages": null
        },
        "macro.dbt_utils.default__except": {
            "name": "default__except",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/except.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/except.sql",
            "unique_id": "macro.dbt_utils.default__except",
            "macro_sql": "{% macro default__except() %}\n  {% do dbt_utils.xdb_deprecation_warning('except', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.except",
                    "macro.dbt.default__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7324262,
            "supported_languages": null
        },
        "macro.dbt_utils.cast_bool_to_text": {
            "name": "cast_bool_to_text",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql",
            "unique_id": "macro.dbt_utils.cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7327135,
            "supported_languages": null
        },
        "macro.dbt_utils.default__cast_bool_to_text": {
            "name": "default__cast_bool_to_text",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql",
            "unique_id": "macro.dbt_utils.default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n  {% do dbt_utils.xdb_deprecation_warning('cast_bool_to_text', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.cast_bool_to_text",
                    "macro.dbt_redshift.redshift__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7330143,
            "supported_languages": null
        },
        "macro.dbt_utils.last_day": {
            "name": "last_day",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/last_day.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql",
            "unique_id": "macro.dbt_utils.last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.733375,
            "supported_languages": null
        },
        "macro.dbt_utils.default__last_day": {
            "name": "default__last_day",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/last_day.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql",
            "unique_id": "macro.dbt_utils.default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('last_day', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.last_day",
                    "macro.dbt_redshift.redshift__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7337232,
            "supported_languages": null
        },
        "macro.dbt_utils.date_trunc": {
            "name": "date_trunc",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/date_trunc.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql",
            "unique_id": "macro.dbt_utils.date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7340581,
            "supported_languages": null
        },
        "macro.dbt_utils.default__date_trunc": {
            "name": "default__date_trunc",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/date_trunc.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql",
            "unique_id": "macro.dbt_utils.default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  {% do dbt_utils.xdb_deprecation_warning('date_trunc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt.default__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.734403,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_cast": {
            "name": "safe_cast",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/safe_cast.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql",
            "unique_id": "macro.dbt_utils.safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7347417,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_cast": {
            "name": "default__safe_cast",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/safe_cast.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql",
            "unique_id": "macro.dbt_utils.default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n  {% do dbt_utils.xdb_deprecation_warning('safe_cast', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt.default__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7351048,
            "supported_languages": null
        },
        "macro.dbt_utils.split_part": {
            "name": "split_part",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/split_part.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql",
            "unique_id": "macro.dbt_utils.split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7354708,
            "supported_languages": null
        },
        "macro.dbt_utils.default__split_part": {
            "name": "default__split_part",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/split_part.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql",
            "unique_id": "macro.dbt_utils.default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n  {% do dbt_utils.xdb_deprecation_warning('split_part', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.split_part",
                    "macro.dbt_redshift.redshift__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7358418,
            "supported_languages": null
        },
        "macro.dbt_utils.bool_or": {
            "name": "bool_or",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/bool_or.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql",
            "unique_id": "macro.dbt_utils.bool_or",
            "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7361438,
            "supported_languages": null
        },
        "macro.dbt_utils.default__bool_or": {
            "name": "default__bool_or",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/bool_or.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql",
            "unique_id": "macro.dbt_utils.default__bool_or",
            "macro_sql": "{% macro default__bool_or(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('bool_or', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.bool_or",
                    "macro.dbt.default__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7364566,
            "supported_languages": null
        },
        "macro.dbt_utils.hash": {
            "name": "hash",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/hash.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/hash.sql",
            "unique_id": "macro.dbt_utils.hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.736751,
            "supported_languages": null
        },
        "macro.dbt_utils.default__hash": {
            "name": "default__hash",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/hash.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/hash.sql",
            "unique_id": "macro.dbt_utils.default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n  {% do dbt_utils.xdb_deprecation_warning('hash', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.hash",
                    "macro.dbt.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7370605,
            "supported_languages": null
        },
        "macro.dbt_utils.any_value": {
            "name": "any_value",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/any_value.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql",
            "unique_id": "macro.dbt_utils.any_value",
            "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7373793,
            "supported_languages": null
        },
        "macro.dbt_utils.default__any_value": {
            "name": "default__any_value",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/any_value.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql",
            "unique_id": "macro.dbt_utils.default__any_value",
            "macro_sql": "{% macro default__any_value(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('any_value', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.any_value",
                    "macro.dbt_postgres.postgres__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7376997,
            "supported_languages": null
        },
        "macro.dbt_utils.right": {
            "name": "right",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/right.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/right.sql",
            "unique_id": "macro.dbt_utils.right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7380278,
            "supported_languages": null
        },
        "macro.dbt_utils.default__right": {
            "name": "default__right",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/right.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/right.sql",
            "unique_id": "macro.dbt_utils.default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('right', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.right",
                    "macro.dbt.default__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7383678,
            "supported_languages": null
        },
        "macro.dbt_utils.dateadd": {
            "name": "dateadd",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/dateadd.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql",
            "unique_id": "macro.dbt_utils.dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7387245,
            "supported_languages": null
        },
        "macro.dbt_utils.default__dateadd": {
            "name": "default__dateadd",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/dateadd.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql",
            "unique_id": "macro.dbt_utils.default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {% do dbt_utils.xdb_deprecation_warning('dateadd', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_redshift.redshift__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.739109,
            "supported_languages": null
        },
        "macro.dbt_utils.length": {
            "name": "length",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/length.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/length.sql",
            "unique_id": "macro.dbt_utils.length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7394137,
            "supported_languages": null
        },
        "macro.dbt_utils.default__length": {
            "name": "default__length",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/length.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/length.sql",
            "unique_id": "macro.dbt_utils.default__length",
            "macro_sql": "{% macro default__length(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('length', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.length",
                    "macro.dbt_redshift.redshift__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7397282,
            "supported_languages": null
        },
        "macro.dbt_utils.xdb_deprecation_warning": {
            "name": "xdb_deprecation_warning",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql",
            "unique_id": "macro.dbt_utils.xdb_deprecation_warning",
            "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\" ~ macro ~ \"` (no prefix) instead. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7401757,
            "supported_languages": null
        },
        "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {
            "name": "xdb_deprecation_warning_without_replacement",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql",
            "unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement",
            "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7405882,
            "supported_languages": null
        },
        "macro.dbt_utils.intersect": {
            "name": "intersect",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/intersect.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql",
            "unique_id": "macro.dbt_utils.intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7408805,
            "supported_languages": null
        },
        "macro.dbt_utils.default__intersect": {
            "name": "default__intersect",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/intersect.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql",
            "unique_id": "macro.dbt_utils.default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n  {% do dbt_utils.xdb_deprecation_warning('intersect', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.intersect",
                    "macro.dbt.default__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.741181,
            "supported_languages": null
        },
        "macro.dbt_utils.concat": {
            "name": "concat",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/concat.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/concat.sql",
            "unique_id": "macro.dbt_utils.concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7414985,
            "supported_languages": null
        },
        "macro.dbt_utils.default__concat": {
            "name": "default__concat",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/concat.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/concat.sql",
            "unique_id": "macro.dbt_utils.default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n  {% do dbt_utils.xdb_deprecation_warning('concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.concat",
                    "macro.dbt.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.741811,
            "supported_languages": null
        },
        "macro.dbt_utils.string_literal": {
            "name": "string_literal",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/literal.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/literal.sql",
            "unique_id": "macro.dbt_utils.string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7421134,
            "supported_languages": null
        },
        "macro.dbt_utils.default__string_literal": {
            "name": "default__string_literal",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/literal.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/literal.sql",
            "unique_id": "macro.dbt_utils.default__string_literal",
            "macro_sql": "{%- macro default__string_literal(value) -%}\n  {% do dbt_utils.xdb_deprecation_warning('string_literal', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.string_literal",
                    "macro.dbt.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.742432,
            "supported_languages": null
        },
        "macro.dbt_utils.listagg": {
            "name": "listagg",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/listagg.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql",
            "unique_id": "macro.dbt_utils.listagg",
            "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7428775,
            "supported_languages": null
        },
        "macro.dbt_utils.default__listagg": {
            "name": "default__listagg",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/listagg.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql",
            "unique_id": "macro.dbt_utils.default__listagg",
            "macro_sql": "{% macro default__listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {% do dbt_utils.xdb_deprecation_warning('listagg', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.listagg",
                    "macro.dbt_redshift.redshift__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7433057,
            "supported_languages": null
        },
        "macro.dbt_utils.position": {
            "name": "position",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/position.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/position.sql",
            "unique_id": "macro.dbt_utils.position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.743637,
            "supported_languages": null
        },
        "macro.dbt_utils.default__position": {
            "name": "default__position",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/position.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/position.sql",
            "unique_id": "macro.dbt_utils.default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n    {% do dbt_utils.xdb_deprecation_warning('position', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.position",
                    "macro.dbt.default__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7439787,
            "supported_languages": null
        },
        "macro.dbt_utils.type_string": {
            "name": "type_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "unique_id": "macro.dbt_utils.type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7446501,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_string": {
            "name": "default__type_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "unique_id": "macro.dbt_utils.default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_string', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.type_string",
                    "macro.dbt.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7449512,
            "supported_languages": null
        },
        "macro.dbt_utils.type_timestamp": {
            "name": "type_timestamp",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "unique_id": "macro.dbt_utils.type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7451448,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_timestamp": {
            "name": "default__type_timestamp",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "unique_id": "macro.dbt_utils.default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_timestamp', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.type_timestamp",
                    "macro.dbt.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7454684,
            "supported_languages": null
        },
        "macro.dbt_utils.type_float": {
            "name": "type_float",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "unique_id": "macro.dbt_utils.type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n    {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.745661,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_float": {
            "name": "default__type_float",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "unique_id": "macro.dbt_utils.default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_float', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.type_float",
                    "macro.dbt.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7459621,
            "supported_languages": null
        },
        "macro.dbt_utils.type_numeric": {
            "name": "type_numeric",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "unique_id": "macro.dbt_utils.type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n    {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7461634,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_numeric": {
            "name": "default__type_numeric",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "unique_id": "macro.dbt_utils.default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_numeric', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.type_numeric",
                    "macro.dbt.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7464674,
            "supported_languages": null
        },
        "macro.dbt_utils.type_bigint": {
            "name": "type_bigint",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "unique_id": "macro.dbt_utils.type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n    {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7466598,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_bigint": {
            "name": "default__type_bigint",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "unique_id": "macro.dbt_utils.default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_bigint', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.type_bigint",
                    "macro.dbt.default__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.746977,
            "supported_languages": null
        },
        "macro.dbt_utils.type_int": {
            "name": "type_int",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "unique_id": "macro.dbt_utils.type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n    {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7471693,
            "supported_languages": null
        },
        "macro.dbt_utils.default__type_int": {
            "name": "default__type_int",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql",
            "unique_id": "macro.dbt_utils.default__type_int",
            "macro_sql": "{% macro default__type_int() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_int', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.type_int",
                    "macro.dbt.default__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7474654,
            "supported_languages": null
        },
        "macro.dbt_utils.escape_single_quotes": {
            "name": "escape_single_quotes",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql",
            "unique_id": "macro.dbt_utils.escape_single_quotes",
            "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7477884,
            "supported_languages": null
        },
        "macro.dbt_utils.default__escape_single_quotes": {
            "name": "default__escape_single_quotes",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql",
            "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql",
            "unique_id": "macro.dbt_utils.default__escape_single_quotes",
            "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n      {% do dbt_utils.xdb_deprecation_warning('escape_single_quotes', model.package_name, model.name) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.xdb_deprecation_warning",
                    "macro.dbt_utils.escape_single_quotes",
                    "macro.dbt.default__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7481086,
            "supported_languages": null
        },
        "macro.dbt_utils.get_period_boundaries": {
            "name": "get_period_boundaries",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "unique_id": "macro.dbt_utils.get_period_boundaries",
            "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_period_boundaries"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.749702,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_period_boundaries": {
            "name": "default__get_period_boundaries",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "unique_id": "macro.dbt_utils.default__get_period_boundaries",
            "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{ dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\") }},\n            {{ dbt_utils.current_timestamp() }}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{ datediff('start_timestamp',\n                           'stop_timestamp',\n                           period) }}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.current_timestamp",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7504108,
            "supported_languages": null
        },
        "macro.dbt_utils.get_period_sql": {
            "name": "get_period_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "unique_id": "macro.dbt_utils.get_period_sql",
            "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_period_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7507923,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_period_sql": {
            "name": "default__get_period_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "unique_id": "macro.dbt_utils.default__get_period_sql",
            "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7513719,
            "supported_languages": null
        },
        "macro.dbt_utils.materialization_insert_by_period_default": {
            "name": "materialization_insert_by_period_default",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/materializations/insert_by_period_materialization.sql",
            "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
            "unique_id": "macro.dbt_utils.materialization_insert_by_period_default",
            "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- set deprecation_warning = \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt_utils.get_period_boundaries",
                    "macro.dbt_utils.log_info",
                    "macro.dbt_utils.get_period_sql",
                    "macro.dbt.noop_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7574148,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_utils.get_url_path": {
            "name": "get_url_path",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_path.sql",
            "original_file_path": "macros/web/get_url_path.sql",
            "unique_id": "macro.dbt_utils.get_url_path",
            "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_path"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7578633,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_path": {
            "name": "default__get_url_path",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_path.sql",
            "original_file_path": "macros/web/get_url_path.sql",
            "unique_id": "macro.dbt_utils.default__get_url_path",
            "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt_utils.position",
                    "macro.dbt_utils.split_part",
                    "macro.dbt_utils.right",
                    "macro.dbt_utils.length",
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7585373,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_host": {
            "name": "get_url_host",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_host.sql",
            "original_file_path": "macros/web/get_url_host.sql",
            "unique_id": "macro.dbt_utils.get_url_host",
            "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_host"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7589,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_host": {
            "name": "default__get_url_host",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_host.sql",
            "original_file_path": "macros/web/get_url_host.sql",
            "unique_id": "macro.dbt_utils.default__get_url_host",
            "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.split_part",
                    "macro.dbt_utils.replace",
                    "macro.dbt.safe_cast",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7594733,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_parameter": {
            "name": "get_url_parameter",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_parameter.sql",
            "original_file_path": "macros/web/get_url_parameter.sql",
            "unique_id": "macro.dbt_utils.get_url_parameter",
            "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_parameter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7598267,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_parameter": {
            "name": "default__get_url_parameter",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_parameter.sql",
            "original_file_path": "macros/web/get_url_parameter.sql",
            "unique_id": "macro.dbt_utils.default__get_url_parameter",
            "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7601802,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_log_format": {
            "name": "pretty_log_format",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/pretty_log_format.sql",
            "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
            "unique_id": "macro.dbt_utils.pretty_log_format",
            "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7604725,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_log_format": {
            "name": "default__pretty_log_format",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/pretty_log_format.sql",
            "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
            "unique_id": "macro.dbt_utils.default__pretty_log_format",
            "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7606654,
            "supported_languages": null
        },
        "macro.dbt_utils.log_info": {
            "name": "log_info",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/log_info.sql",
            "original_file_path": "macros/jinja_helpers/log_info.sql",
            "unique_id": "macro.dbt_utils.log_info",
            "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__log_info"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.760944,
            "supported_languages": null
        },
        "macro.dbt_utils.default__log_info": {
            "name": "default__log_info",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/log_info.sql",
            "original_file_path": "macros/jinja_helpers/log_info.sql",
            "unique_id": "macro.dbt_utils.default__log_info",
            "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7611413,
            "supported_languages": null
        },
        "macro.dbt_utils._is_ephemeral": {
            "name": "_is_ephemeral",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/_is_ephemeral.sql",
            "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql",
            "unique_id": "macro.dbt_utils._is_ephemeral",
            "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7619815,
            "supported_languages": null
        },
        "macro.dbt_utils._is_relation": {
            "name": "_is_relation",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/_is_relation.sql",
            "original_file_path": "macros/jinja_helpers/_is_relation.sql",
            "unique_id": "macro.dbt_utils._is_relation",
            "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7624996,
            "supported_languages": null
        },
        "macro.dbt_utils.slugify": {
            "name": "slugify",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/slugify.sql",
            "original_file_path": "macros/jinja_helpers/slugify.sql",
            "unique_id": "macro.dbt_utils.slugify",
            "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7630563,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_time": {
            "name": "pretty_time",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/pretty_time.sql",
            "original_file_path": "macros/jinja_helpers/pretty_time.sql",
            "unique_id": "macro.dbt_utils.pretty_time",
            "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7633693,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_time": {
            "name": "default__pretty_time",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/pretty_time.sql",
            "original_file_path": "macros/jinja_helpers/pretty_time.sql",
            "unique_id": "macro.dbt_utils.default__pretty_time",
            "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7636,
            "supported_languages": null
        },
        "macro.dbt_utils.get_query_results_as_dict": {
            "name": "get_query_results_as_dict",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_query_results_as_dict.sql",
            "original_file_path": "macros/sql/get_query_results_as_dict.sql",
            "unique_id": "macro.dbt_utils.get_query_results_as_dict",
            "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_query_results_as_dict"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7639754,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_query_results_as_dict": {
            "name": "default__get_query_results_as_dict",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_query_results_as_dict.sql",
            "original_file_path": "macros/sql/get_query_results_as_dict.sql",
            "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
            "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7646575,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_add": {
            "name": "safe_add",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_add.sql",
            "original_file_path": "macros/sql/safe_add.sql",
            "unique_id": "macro.dbt_utils.safe_add",
            "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_add"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7650855,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_add": {
            "name": "default__safe_add",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_add.sql",
            "original_file_path": "macros/sql/safe_add.sql",
            "unique_id": "macro.dbt_utils.default__safe_add",
            "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7654474,
            "supported_languages": null
        },
        "macro.dbt_utils.degrees_to_radians": {
            "name": "degrees_to_radians",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "unique_id": "macro.dbt_utils.degrees_to_radians",
            "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7659285,
            "supported_languages": null
        },
        "macro.dbt_utils.haversine_distance": {
            "name": "haversine_distance",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "unique_id": "macro.dbt_utils.haversine_distance",
            "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__haversine_distance"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7662446,
            "supported_languages": null
        },
        "macro.dbt_utils.default__haversine_distance": {
            "name": "default__haversine_distance",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "unique_id": "macro.dbt_utils.default__haversine_distance",
            "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7669158,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__haversine_distance": {
            "name": "bigquery__haversine_distance",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
            "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.degrees_to_radians"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7679808,
            "supported_languages": null
        },
        "macro.dbt_utils.union_relations": {
            "name": "union_relations",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/union.sql",
            "original_file_path": "macros/sql/union.sql",
            "unique_id": "macro.dbt_utils.union_relations",
            "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__union_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7690594,
            "supported_languages": null
        },
        "macro.dbt_utils.default__union_relations": {
            "name": "default__union_relations",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/union.sql",
            "original_file_path": "macros/sql/union.sql",
            "unique_id": "macro.dbt_utils.default__union_relations",
            "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name != none %}\n                cast({{ dbt_utils.string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.string_literal",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7725844,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck_table": {
            "name": "nullcheck_table",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/nullcheck_table.sql",
            "original_file_path": "macros/sql/nullcheck_table.sql",
            "unique_id": "macro.dbt_utils.nullcheck_table",
            "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.772953,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck_table": {
            "name": "default__nullcheck_table",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/nullcheck_table.sql",
            "original_file_path": "macros/sql/nullcheck_table.sql",
            "unique_id": "macro.dbt_utils.default__nullcheck_table",
            "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7733765,
            "supported_languages": null
        },
        "macro.dbt_utils.get_table_types_sql": {
            "name": "get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.get_table_types_sql",
            "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7737138,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_table_types_sql": {
            "name": "default__get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.default__get_table_types_sql",
            "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7738853,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__get_table_types_sql": {
            "name": "postgres__get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.postgres__get_table_types_sql",
            "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7740502,
            "supported_languages": null
        },
        "macro.dbt_utils.get_powers_of_two": {
            "name": "get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "unique_id": "macro.dbt_utils.get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7745304,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_powers_of_two": {
            "name": "default__get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "unique_id": "macro.dbt_utils.default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.775024,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_series": {
            "name": "generate_series",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "unique_id": "macro.dbt_utils.generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7752442,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_series": {
            "name": "default__generate_series",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "unique_id": "macro.dbt_utils.default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7758503,
            "supported_languages": null
        },
        "macro.dbt_utils.get_intervals_between": {
            "name": "get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "unique_id": "macro.dbt_utils.get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.776394,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_intervals_between": {
            "name": "default__get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "unique_id": "macro.dbt_utils.default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7770667,
            "supported_languages": null
        },
        "macro.dbt_utils.date_spine": {
            "name": "date_spine",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "unique_id": "macro.dbt_utils.date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7773492,
            "supported_languages": null
        },
        "macro.dbt_utils.default__date_spine": {
            "name": "default__date_spine",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "unique_id": "macro.dbt_utils.default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_series",
                    "macro.dbt_utils.get_intervals_between",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7777581,
            "supported_languages": null
        },
        "macro.dbt_utils.get_filtered_columns_in_relation": {
            "name": "get_filtered_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_filtered_columns_in_relation.sql",
            "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
            "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation",
            "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7782142,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_filtered_columns_in_relation": {
            "name": "default__get_filtered_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_filtered_columns_in_relation.sql",
            "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
            "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation",
            "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7790763,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_pattern_sql": {
            "name": "get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
            "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7797945,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_pattern_sql": {
            "name": "default__get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
            "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7802114,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
            "name": "bigquery__get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
            "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._bigquery__get_matching_schemata",
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7810354,
            "supported_languages": null
        },
        "macro.dbt_utils._bigquery__get_matching_schemata": {
            "name": "_bigquery__get_matching_schemata",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
            "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7816453,
            "supported_languages": null
        },
        "macro.dbt_utils.get_column_values": {
            "name": "get_column_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_column_values.sql",
            "original_file_path": "macros/sql/get_column_values.sql",
            "unique_id": "macro.dbt_utils.get_column_values",
            "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_column_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7824435,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_column_values": {
            "name": "default__get_column_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_column_values.sql",
            "original_file_path": "macros/sql/get_column_values.sql",
            "unique_id": "macro.dbt_utils.default__get_column_values",
            "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.load_relation",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7843454,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_prefix_sql": {
            "name": "get_tables_by_prefix_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_prefix_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
            "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
            "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.784804,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_prefix_sql": {
            "name": "default__get_tables_by_prefix_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_prefix_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
            "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
            "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.785135,
            "supported_languages": null
        },
        "macro.dbt_utils.width_bucket": {
            "name": "width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "unique_id": "macro.dbt_utils.width_bucket",
            "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.redshift__width_bucket"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.785747,
            "supported_languages": null
        },
        "macro.dbt_utils.default__width_bucket": {
            "name": "default__width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "unique_id": "macro.dbt_utils.default__width_bucket",
            "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.safe_cast",
                    "macro.dbt_utils.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7862666,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__width_bucket": {
            "name": "redshift__width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "unique_id": "macro.dbt_utils.redshift__width_bucket",
            "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.safe_cast",
                    "macro.dbt_utils.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7867873,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__width_bucket": {
            "name": "snowflake__width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "unique_id": "macro.dbt_utils.snowflake__width_bucket",
            "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.787011,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck": {
            "name": "nullcheck",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/nullcheck.sql",
            "original_file_path": "macros/sql/nullcheck.sql",
            "unique_id": "macro.dbt_utils.nullcheck",
            "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.78736,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck": {
            "name": "default__nullcheck",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/nullcheck.sql",
            "original_file_path": "macros/sql/nullcheck.sql",
            "unique_id": "macro.dbt_utils.default__nullcheck",
            "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7877676,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_pattern": {
            "name": "get_relations_by_pattern",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_relations_by_pattern.sql",
            "original_file_path": "macros/sql/get_relations_by_pattern.sql",
            "unique_id": "macro.dbt_utils.get_relations_by_pattern",
            "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_pattern"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.788288,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_pattern": {
            "name": "default__get_relations_by_pattern",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_relations_by_pattern.sql",
            "original_file_path": "macros/sql/get_relations_by_pattern.sql",
            "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
            "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7892883,
            "supported_languages": null
        },
        "macro.dbt_utils.group_by": {
            "name": "group_by",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/groupby.sql",
            "original_file_path": "macros/sql/groupby.sql",
            "unique_id": "macro.dbt_utils.group_by",
            "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__group_by"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7895975,
            "supported_languages": null
        },
        "macro.dbt_utils.default__group_by": {
            "name": "default__group_by",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/groupby.sql",
            "original_file_path": "macros/sql/groupby.sql",
            "unique_id": "macro.dbt_utils.default__group_by",
            "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.789898,
            "supported_languages": null
        },
        "macro.dbt_utils.pivot": {
            "name": "pivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/pivot.sql",
            "original_file_path": "macros/sql/pivot.sql",
            "unique_id": "macro.dbt_utils.pivot",
            "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7908068,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pivot": {
            "name": "default__pivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/pivot.sql",
            "original_file_path": "macros/sql/pivot.sql",
            "unique_id": "macro.dbt_utils.default__pivot",
            "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.escape_single_quotes",
                    "macro.dbt_utils.slugify"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7917867,
            "supported_languages": null
        },
        "macro.dbt_utils.deduplicate": {
            "name": "deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.deduplicate",
            "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.redshift__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7935708,
            "supported_languages": null
        },
        "macro.dbt_utils.default__deduplicate": {
            "name": "default__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.default__deduplicate",
            "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.793843,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__deduplicate": {
            "name": "redshift__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.redshift__deduplicate",
            "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7940733,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__deduplicate": {
            "name": "postgres__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.postgres__deduplicate",
            "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7943048,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__deduplicate": {
            "name": "snowflake__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.snowflake__deduplicate",
            "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7945118,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__deduplicate": {
            "name": "bigquery__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.bigquery__deduplicate",
            "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7947261,
            "supported_languages": null
        },
        "macro.dbt_utils.surrogate_key": {
            "name": "surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/surrogate_key.sql",
            "original_file_path": "macros/sql/surrogate_key.sql",
            "unique_id": "macro.dbt_utils.surrogate_key",
            "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.795323,
            "supported_languages": null
        },
        "macro.dbt_utils.default__surrogate_key": {
            "name": "default__surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/surrogate_key.sql",
            "original_file_path": "macros/sql/surrogate_key.sql",
            "unique_id": "macro.dbt_utils.default__surrogate_key",
            "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.hash",
                    "macro.dbt_utils.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7964208,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_prefix": {
            "name": "get_relations_by_prefix",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_relations_by_prefix.sql",
            "original_file_path": "macros/sql/get_relations_by_prefix.sql",
            "unique_id": "macro.dbt_utils.get_relations_by_prefix",
            "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_prefix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7969525,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_prefix": {
            "name": "default__get_relations_by_prefix",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_relations_by_prefix.sql",
            "original_file_path": "macros/sql/get_relations_by_prefix.sql",
            "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
            "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.79809,
            "supported_languages": null
        },
        "macro.dbt_utils.unpivot": {
            "name": "unpivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/unpivot.sql",
            "original_file_path": "macros/sql/unpivot.sql",
            "unique_id": "macro.dbt_utils.unpivot",
            "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__unpivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.7990434,
            "supported_languages": null
        },
        "macro.dbt_utils.default__unpivot": {
            "name": "default__unpivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/unpivot.sql",
            "original_file_path": "macros/sql/unpivot.sql",
            "unique_id": "macro.dbt_utils.default__unpivot",
            "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8013864,
            "supported_languages": null
        },
        "macro.dbt_utils.star": {
            "name": "star",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/star.sql",
            "original_file_path": "macros/sql/star.sql",
            "unique_id": "macro.dbt_utils.star",
            "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__star"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8020627,
            "supported_languages": null
        },
        "macro.dbt_utils.default__star": {
            "name": "default__star",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/star.sql",
            "original_file_path": "macros/sql/star.sql",
            "unique_id": "macro.dbt_utils.default__star",
            "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.803224,
            "supported_languages": null
        },
        "macro.dbt_utils.test_relationships_where": {
            "name": "test_relationships_where",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/relationships_where.sql",
            "original_file_path": "macros/generic_tests/relationships_where.sql",
            "unique_id": "macro.dbt_utils.test_relationships_where",
            "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_relationships_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8037739,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_relationships_where": {
            "name": "default__test_relationships_where",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/relationships_where.sql",
            "original_file_path": "macros/generic_tests/relationships_where.sql",
            "unique_id": "macro.dbt_utils.default__test_relationships_where",
            "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8041828,
            "supported_languages": null
        },
        "macro.dbt_utils.test_expression_is_true": {
            "name": "test_expression_is_true",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/expression_is_true.sql",
            "original_file_path": "macros/generic_tests/expression_is_true.sql",
            "unique_id": "macro.dbt_utils.test_expression_is_true",
            "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8046765,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_expression_is_true": {
            "name": "default__test_expression_is_true",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/expression_is_true.sql",
            "original_file_path": "macros/generic_tests/expression_is_true.sql",
            "unique_id": "macro.dbt_utils.default__test_expression_is_true",
            "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8050292,
            "supported_languages": null
        },
        "macro.dbt_utils.test_fewer_rows_than": {
            "name": "test_fewer_rows_than",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/fewer_rows_than.sql",
            "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
            "unique_id": "macro.dbt_utils.test_fewer_rows_than",
            "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_fewer_rows_than"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8054323,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_fewer_rows_than": {
            "name": "default__test_fewer_rows_than",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/fewer_rows_than.sql",
            "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
            "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
            "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8057249,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equal_rowcount": {
            "name": "test_equal_rowcount",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/equal_rowcount.sql",
            "original_file_path": "macros/generic_tests/equal_rowcount.sql",
            "unique_id": "macro.dbt_utils.test_equal_rowcount",
            "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equal_rowcount"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8061142,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equal_rowcount": {
            "name": "default__test_equal_rowcount",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/equal_rowcount.sql",
            "original_file_path": "macros/generic_tests/equal_rowcount.sql",
            "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
            "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8064806,
            "supported_languages": null
        },
        "macro.dbt_utils.test_sequential_values": {
            "name": "test_sequential_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/sequential_values.sql",
            "original_file_path": "macros/generic_tests/sequential_values.sql",
            "unique_id": "macro.dbt_utils.test_sequential_values",
            "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_sequential_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8069954,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_sequential_values": {
            "name": "default__test_sequential_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/sequential_values.sql",
            "original_file_path": "macros/generic_tests/sequential_values.sql",
            "unique_id": "macro.dbt_utils.default__test_sequential_values",
            "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.slugify",
                    "macro.dbt_utils.type_timestamp",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8076901,
            "supported_languages": null
        },
        "macro.dbt_utils.test_unique_where": {
            "name": "test_unique_where",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/test_unique_where.sql",
            "original_file_path": "macros/generic_tests/test_unique_where.sql",
            "unique_id": "macro.dbt_utils.test_unique_where",
            "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8081472,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_unique_where": {
            "name": "default__test_unique_where",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/test_unique_where.sql",
            "original_file_path": "macros/generic_tests/test_unique_where.sql",
            "unique_id": "macro.dbt_utils.default__test_unique_where",
            "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.808346,
            "supported_languages": null
        },
        "macro.dbt_utils.test_recency": {
            "name": "test_recency",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/recency.sql",
            "original_file_path": "macros/generic_tests/recency.sql",
            "unique_id": "macro.dbt_utils.test_recency",
            "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_recency"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8087342,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_recency": {
            "name": "default__test_recency",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/recency.sql",
            "original_file_path": "macros/generic_tests/recency.sql",
            "unique_id": "macro.dbt_utils.default__test_recency",
            "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8091018,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_constant": {
            "name": "test_not_constant",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_constant.sql",
            "original_file_path": "macros/generic_tests/not_constant.sql",
            "unique_id": "macro.dbt_utils.test_not_constant",
            "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_constant"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.809466,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_constant": {
            "name": "default__test_not_constant",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_constant.sql",
            "original_file_path": "macros/generic_tests/not_constant.sql",
            "unique_id": "macro.dbt_utils.default__test_not_constant",
            "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.809676,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equality": {
            "name": "test_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/equality.sql",
            "original_file_path": "macros/generic_tests/equality.sql",
            "unique_id": "macro.dbt_utils.test_equality",
            "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8102496,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equality": {
            "name": "default__test_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/equality.sql",
            "original_file_path": "macros/generic_tests/equality.sql",
            "unique_id": "macro.dbt_utils.default__test_equality",
            "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8113236,
            "supported_languages": null
        },
        "macro.dbt_utils.test_unique_combination_of_columns": {
            "name": "test_unique_combination_of_columns",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/unique_combination_of_columns.sql",
            "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
            "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
            "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_combination_of_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8118134,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_unique_combination_of_columns": {
            "name": "default__test_unique_combination_of_columns",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/unique_combination_of_columns.sql",
            "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
            "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
            "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8129425,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_accepted_values": {
            "name": "test_not_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_accepted_values.sql",
            "original_file_path": "macros/generic_tests/not_accepted_values.sql",
            "unique_id": "macro.dbt_utils.test_not_accepted_values",
            "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8134553,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_accepted_values": {
            "name": "default__test_not_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_accepted_values.sql",
            "original_file_path": "macros/generic_tests/not_accepted_values.sql",
            "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
            "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8139231,
            "supported_languages": null
        },
        "macro.dbt_utils.test_at_least_one": {
            "name": "test_at_least_one",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/at_least_one.sql",
            "original_file_path": "macros/generic_tests/at_least_one.sql",
            "unique_id": "macro.dbt_utils.test_at_least_one",
            "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_at_least_one"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8142722,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_at_least_one": {
            "name": "default__test_at_least_one",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/at_least_one.sql",
            "original_file_path": "macros/generic_tests/at_least_one.sql",
            "unique_id": "macro.dbt_utils.default__test_at_least_one",
            "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8144875,
            "supported_languages": null
        },
        "macro.dbt_utils.test_mutually_exclusive_ranges": {
            "name": "test_mutually_exclusive_ranges",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
            "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_mutually_exclusive_ranges"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.815364,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
            "name": "default__test_mutually_exclusive_ranges",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
            "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8171144,
            "supported_languages": null
        },
        "macro.dbt_utils.test_cardinality_equality": {
            "name": "test_cardinality_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/cardinality_equality.sql",
            "original_file_path": "macros/generic_tests/cardinality_equality.sql",
            "unique_id": "macro.dbt_utils.test_cardinality_equality",
            "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_cardinality_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8175814,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_cardinality_equality": {
            "name": "default__test_cardinality_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/cardinality_equality.sql",
            "original_file_path": "macros/generic_tests/cardinality_equality.sql",
            "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
            "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8179646,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_null_proportion": {
            "name": "test_not_null_proportion",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_null_proportion.sql",
            "original_file_path": "macros/generic_tests/not_null_proportion.sql",
            "unique_id": "macro.dbt_utils.test_not_null_proportion",
            "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_proportion"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8183534,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_null_proportion": {
            "name": "default__test_not_null_proportion",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_null_proportion.sql",
            "original_file_path": "macros/generic_tests/not_null_proportion.sql",
            "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
            "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.818953,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_null_where": {
            "name": "test_not_null_where",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/test_not_null_where.sql",
            "original_file_path": "macros/generic_tests/test_not_null_where.sql",
            "unique_id": "macro.dbt_utils.test_not_null_where",
            "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8193994,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_null_where": {
            "name": "default__test_not_null_where",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/test_not_null_where.sql",
            "original_file_path": "macros/generic_tests/test_not_null_where.sql",
            "unique_id": "macro.dbt_utils.default__test_not_null_where",
            "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8195932,
            "supported_languages": null
        },
        "macro.dbt_utils.test_accepted_range": {
            "name": "test_accepted_range",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/accepted_range.sql",
            "original_file_path": "macros/generic_tests/accepted_range.sql",
            "unique_id": "macro.dbt_utils.test_accepted_range",
            "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_accepted_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.820105,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_accepted_range": {
            "name": "default__test_accepted_range",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/accepted_range.sql",
            "original_file_path": "macros/generic_tests/accepted_range.sql",
            "unique_id": "macro.dbt_utils.default__test_accepted_range",
            "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1727263991.8206584,
            "supported_languages": null
        }
    },
    "docs": {
        "doc.jaffle_shop.orders_status": {
            "name": "orders_status",
            "resource_type": "doc",
            "package_name": "jaffle_shop",
            "path": "docs.md",
            "original_file_path": "models/docs.md",
            "unique_id": "doc.jaffle_shop.orders_status",
            "block_contents": "Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |"
        },
        "doc.jaffle_shop.__overview__": {
            "name": "__overview__",
            "resource_type": "doc",
            "package_name": "jaffle_shop",
            "path": "overview.md",
            "original_file_path": "models/overview.md",
            "unique_id": "doc.jaffle_shop.__overview__",
            "block_contents": "## Data Documentation for Jaffle Shop\n\n`jaffle_shop` is a fictional ecommerce store.\n\nThis [dbt](https://www.getdbt.com/) project is for testing out code.\n\nThe source code can be found [here](https://github.com/clrcrl/jaffle_shop)."
        },
        "doc.dbt.__overview__": {
            "name": "__overview__",
            "resource_type": "doc",
            "package_name": "dbt",
            "path": "overview.md",
            "original_file_path": "docs/overview.md",
            "unique_id": "doc.dbt.__overview__",
            "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
        }
    },
  "exposures": {
    "exposure.dbt_tutorial.forecast_sales": {
      "name": "forecast_sales",
      "resource_type": "exposure",
      "package_name": "dbt_tutorial",
      "path": "warehouse/fact_sales.yml",
      "original_file_path": "models/warehouse/fact_sales.yml",
      "unique_id": "exposure.dbt_tutorial.forecast_sales",
      "fqn": [
        "dbt_tutorial",
        "warehouse",
        "forecast_sales"
      ],
      "type": "dashboard",
      "owner": {
        "email": "gorskimariusz13@gmail.com",
        "name": "Mariusz G\u00f3rski"
      },
      "description": "Exemplary OM API Endpoint.\n",
      "label": "asd",
      "maturity": "high",
      "meta": {},
      "tags": [],
      "config": {
        "enabled": true,
        "tags": [],
        "meta": {}
      },
      "unrendered_config": {},
      "url": "https://docs.open-metadata.org/api/v1/tables",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.dbt_tutorial.fact_sales",
          "model.dbt_tutorial.dim_product"
        ]
      },
      "refs": [
        {
          "name": "fact_sales",
          "package": null,
          "version": null
        },
        {
          "name": "dim_product",
          "package": null,
          "version": null
        }
      ],
      "sources": [],
      "metrics": [],
      "created_at": 1751007276.544977
    },
    "exposure.dbt_tutorial.create_table_endpoint": {
      "name": "create_table_endpoint",
      "resource_type": "exposure",
      "package_name": "dbt_tutorial",
      "path": "warehouse/fact_sales.yml",
      "original_file_path": "models/warehouse/fact_sales.yml",
      "unique_id": "exposure.dbt_tutorial.create_table_endpoint",
      "fqn": [
        "dbt_tutorial",
        "warehouse",
        "create_table_endpoint"
      ],
      "type": "notebook",
      "owner": {
        "email": "gorskimariusz13@gmail.com",
        "name": "Mariusz G\u00f3rski"
      },
      "description": "Exemplary OM API Endpoint.\n",
      "label": "asd",
      "maturity": "high",
      "meta": {
        "open_metadata_fqn": "ometa_api_service.tables.createTable"
      },
      "tags": [],
      "config": {
        "enabled": true,
        "tags": [],
        "meta": {
          "open_metadata_fqn": "ometa_api_service.tables.createTable"
        }
      },
      "unrendered_config": {},
      "url": "https://docs.open-metadata.org/api/v1/tables",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.dbt_tutorial.fact_sales"
        ]
      },
      "refs": [
        {
          "name": "fact_sales",
          "package": null,
          "version": null
        }
      ],
      "sources": [],
      "metrics": [],
      "created_at": 1751007276.5458581
    }
  },
    "metrics": {},
    "groups": {},
    "selectors": {},
    "disabled": {},
    "parent_map": {
        "model.jaffle_shop.customers": [
            "model.jaffle_shop.stg_customers",
            "model.jaffle_shop.stg_orders",
            "model.jaffle_shop.stg_payments"
        ],
        "model.jaffle_shop.orders": [
            "model.jaffle_shop.stg_orders",
            "model.jaffle_shop.stg_payments"
        ],
        "model.jaffle_shop.stg_payments": [
            "seed.jaffle_shop.raw_payments"
        ],
        "model.jaffle_shop.stg_orders": [
            "seed.jaffle_shop.raw_orders"
        ],
        "model.jaffle_shop.stg_customers": [
            "seed.jaffle_shop.raw_customers"
        ],
        "seed.jaffle_shop.raw_customers": [],
        "seed.jaffle_shop.raw_orders": [],
        "seed.jaffle_shop.raw_payments": [],
        "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1": [
            "model.jaffle_shop.customers"
        ],
        "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d": [
            "model.jaffle_shop.customers"
        ],
        "test.jaffle_shop.unique_orders_order_id.fed79b3a6e": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_order_id.cf6c17daed": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_customer_id.c5f02694af": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2": [
            "model.jaffle_shop.customers",
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_amount.106140f9fd": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a": [
            "model.jaffle_shop.orders"
        ],
        "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": [
            "model.jaffle_shop.stg_customers"
        ],
        "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": [
            "model.jaffle_shop.stg_customers"
        ],
        "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": [
            "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": [
            "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": [
            "model.jaffle_shop.stg_orders"
        ],
        "test.jaffle_shop.unique_stg_payments_payment_id.3744510712": [
            "model.jaffle_shop.stg_payments"
        ],
        "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075": [
            "model.jaffle_shop.stg_payments"
        ],
        "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": [
            "model.jaffle_shop.stg_payments"
        ]
    },
    "child_map": {
        "model.jaffle_shop.customers": [
            "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d",
            "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2",
            "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1"
        ],
        "model.jaffle_shop.orders": [
            "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3",
            "test.jaffle_shop.not_null_orders_amount.106140f9fd",
            "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49",
            "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625",
            "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59",
            "test.jaffle_shop.not_null_orders_customer_id.c5f02694af",
            "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a",
            "test.jaffle_shop.not_null_orders_order_id.cf6c17daed",
            "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2",
            "test.jaffle_shop.unique_orders_order_id.fed79b3a6e"
        ],
        "model.jaffle_shop.stg_payments": [
            "model.jaffle_shop.customers",
            "model.jaffle_shop.orders",
            "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278",
            "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075",
            "test.jaffle_shop.unique_stg_payments_payment_id.3744510712"
        ],
        "model.jaffle_shop.stg_orders": [
            "model.jaffle_shop.customers",
            "model.jaffle_shop.orders",
            "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad",
            "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64",
            "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a"
        ],
        "model.jaffle_shop.stg_customers": [
            "model.jaffle_shop.customers",
            "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa",
            "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada"
        ],
        "seed.jaffle_shop.raw_customers": [
            "model.jaffle_shop.stg_customers"
        ],
        "seed.jaffle_shop.raw_orders": [
            "model.jaffle_shop.stg_orders"
        ],
        "seed.jaffle_shop.raw_payments": [
            "model.jaffle_shop.stg_payments"
        ],
        "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1": [],
        "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d": [],
        "test.jaffle_shop.unique_orders_order_id.fed79b3a6e": [],
        "test.jaffle_shop.not_null_orders_order_id.cf6c17daed": [],
        "test.jaffle_shop.not_null_orders_customer_id.c5f02694af": [],
        "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2": [],
        "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3": [],
        "test.jaffle_shop.not_null_orders_amount.106140f9fd": [],
        "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59": [],
        "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625": [],
        "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49": [],
        "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a": [],
        "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": [],
        "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": [],
        "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": [],
        "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": [],
        "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": [],
        "test.jaffle_shop.unique_stg_payments_payment_id.3744510712": [],
        "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075": [],
        "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": []
    },
    "group_map": {},
    "saved_queries": {},
    "semantic_models": {},
    "unit_tests": {}
}