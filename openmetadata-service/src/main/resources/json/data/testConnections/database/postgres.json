{
    "name": "Postgres",
    "displayName": "Postgres Test Connection",
    "description": "This Test Connection validates the access against the database and basic metadata extraction of schemas and tables, including autoclassification support.",
    "steps": [
      {
        "name": "CheckAccess",
        "description": "Validate that we can properly reach the database and authenticate with the given credentials.",
        "errorMessage": "Failed to connect to postgres, please validate the credentials",
        "mandatory": true
      },
      {
        "name": "GetDatabases",
        "description": "List all the databases available to the user.",
        "errorMessage": "Failed to fetch databases, please validate if the user has enough privilege to fetch databases.",
        "mandatory": true
      },
      {
        "name": "GetSchemas",
        "description": "List all the schemas available to the user.",
        "errorMessage": "Failed to fetch schemas, please validate if the user has enough privilege to fetch schemas.",
        "mandatory": true
      },
      {
        "name": "GetTables",
        "description": "From a given schema, list the tables belonging to that schema. If no schema is specified, we'll list the tables of a random schema.",
        "errorMessage": "Failed to fetch tables, please validate if the user has enough privilege to fetch tables.",
        "mandatory": true
      },
      {
        "name": "GetViews",
        "description": "From a given schema, list the views belonging to that schema. If no schema is specified, we'll list the tables of a random schema.",
        "errorMessage": "Failed to fetch views, please validate if the user has enough privilege to fetch views.",
        "mandatory": false
      },
      {
        "name": "GetTags",
        "description": "Check if we can access pg_policy, pg_class & pg_namespace tables to get the policy tags attached to tables.",
        "errorMessage": "Failed to fetch policy tags, please validate if the user has at least select privileges for pg_policy, pg_class & pg_namespace tables.",
        "mandatory": false
      },
      {
        "name": "GetQueries",
        "description":"Check if we can access the pg_stat_statements table to get query logs, These queries are analyzed in the usage & lineage workflow.",
        "errorMessage": "Failed to fetch queries, please validate if postgres instance has pg_stat_statements extension installed and the user has at least select privileges for pg_stat_statements table.",
        "mandatory": false
      },
      {
        "name": "GetColumnMetadata",
        "description": "Validate access to column metadata from pg_catalog.pg_attribute for PII pattern detection in column names and types.",
        "errorMessage": "Failed to access column metadata. Please ensure the user has SELECT privileges on pg_catalog.pg_attribute and pg_catalog.pg_description. This is required for autoclassification to analyze column names and types for PII detection.",
        "mandatory": false
      },
      {
        "name": "GetTableComments",
        "description": "Validate access to table and column comments that may contain data classification hints.",
        "errorMessage": "Failed to access table comments. Please ensure the user has SELECT privileges on pg_catalog.pg_class, pg_catalog.pg_namespace, and pg_catalog.pg_description. Comments often contain classification hints like 'PII' or 'sensitive'.",
        "mandatory": false
      },
      {
        "name": "GetInformationSchemaColumns",
        "description": "Validate access to information_schema.columns for standardized column information used in data type pattern matching.",
        "errorMessage": "Failed to access information_schema.columns. Please ensure the user has SELECT privileges on information_schema.columns. This is required for analyzing data type patterns in autoclassification.",
        "mandatory": false
      }
    ]
  }
  
  