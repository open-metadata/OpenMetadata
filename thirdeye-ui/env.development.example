# ThirdEye UI - Local Development Environment
# Copy this file to .env.local and update values as needed

# OpenMetadata Backend URL
# For local development with Docker Compose
OPENMETADATA_BASE_URL=http://localhost:8585

# ThirdEye UI URL (used for OAuth callbacks)
# For local development
NEXTAUTH_URL=http://localhost:3000

# Port to run the development server on
PORT=3000

# JWT Secret for session tokens
# For development, use any random string
# For production, generate a secure secret with:
#   node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=local-dev-secret-key-change-in-production

# Node Environment
# Use 'development' for local development
# Use 'production' for production builds
NODE_ENV=development

# Optional: Enable detailed logging for troubleshooting
# DEBUG=true

# =============================================================================
# QUICK START FOR DEVELOPMENT
# =============================================================================
# 1. Copy this file: cp env.development.example .env.local
# 2. Start OpenMetadata: 
#    cd ../docker/docker-compose-quickstart && docker-compose up -d
# 3. Create a test user (see DEVELOPMENT_AUTH_GUIDE.md)
# 4. Start dev server: npm run dev
# 5. Open http://localhost:3000/auth/signin
# 6. Login with your test user credentials
# =============================================================================

# =============================================================================
# FOR GOOGLE OAUTH IN DEVELOPMENT (OPTIONAL)
# =============================================================================
# To enable Google OAuth in development:
# 1. Configure Google Cloud Console with redirect URI:
#    http://localhost:3000/api/auth/google/callback
# 2. Update OpenMetadata docker-compose.yml with your Google Client ID
# 3. Restart OpenMetadata containers
# 
# Note: Email/password auth works immediately without OAuth configuration!
# =============================================================================

