{
  "$id": "https://open-metadata.org/schema/entity/type.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Type",
  "description": "This schema defines a type as an entity. Types includes property types and entity types. Custom types can also be defined by the users to extend the metadata system.",
  "type": "object",
  "javaType": "org.openmetadata.schema.entity.Type",
  "javaInterfaces": ["org.openmetadata.schema.EntityInterface"],
  "definitions": {
    "entityName": {
      "description": "Name of the property or entity types. Note a property name must be unique for an entity. Property name must follow camelCase naming adopted by openMetadata - must start with lower case with no space, underscore, or dots.",
      "type": "string",
      "pattern": "(?U)^[\\w]+$"
    },
    "category": {
      "description": "Metadata category to which a type belongs to.",
      "type": "string",
      "javaType": "org.openmetadata.schema.entity.type.Category",
      "enum": ["field", "entity"],
      "javaEnums": [
        {
          "name": "Field"
        },
        {
          "name": "Entity"
        }
      ]
    }
  },
  "properties": {
    "id": {
      "description": "Unique identifier of the type instance.",
      "$ref": "../type/basic.json#/definitions/uuid"
    },
    "name": {
      "description": "Unique name that identifies the type.",
      "$ref": "#/definitions/entityName"
    },
    "fullyQualifiedName": {
      "description": "FullyQualifiedName same as `name`.",
      "$ref": "../type/basic.json#/definitions/fullyQualifiedEntityName"
    },
    "displayName": {
      "description": "Display Name that identifies this type.",
      "type": "string"
    },
    "description": {
      "description": "Optional description of entity.",
      "$ref": "../type/basic.json#/definitions/markdown"
    },
    "category": {
      "$ref": "#/definitions/category"
    },
    "nameSpace": {
      "description": "Namespace or group to which this type belongs to. For example, some of the property types commonly used can come from `basic` namespace. Some of the entities such as `table`, `database`, etc. come from `data` namespace.",
      "type": "string",
      "default": "custom"
    },
    "schema": {
      "description": "JSON schema encoded as string that defines the type. This will be used to validate the type values.",
      "$ref": "../type/basic.json#/definitions/jsonSchema"
    },
    "customProperties": {
      "description": "Custom properties added to extend the entity. Only available for entity type",
      "type": "array",
      "items": {
        "$ref": "../type/customProperty.json"
      }
    },
    "version": {
      "description": "Metadata version of the entity.",
      "$ref": "../type/entityHistory.json#/definitions/entityVersion"
    },
    "updatedAt": {
      "description": "Last update time corresponding to the new version of the entity in Unix epoch time milliseconds.",
      "$ref": "../type/basic.json#/definitions/timestamp"
    },
    "updatedBy": {
      "description": "User who made the update.",
      "type": "string"
    },
    "href": {
      "description": "Link to this table resource.",
      "$ref": "../type/basic.json#/definitions/href"
    },
    "changeDescription": {
      "description": "Change that lead to this version of the entity.",
      "$ref": "../type/entityHistory.json#/definitions/changeDescription"
    },
    "incrementalChangeDescription": {
      "description": "Change that lead to this version of the entity.",
      "$ref": "../type/entityHistory.json#/definitions/changeDescription"
    },
    "domains" : {
      "description": "Domains the asset belongs to. When not set, the asset inherits the domain from the parent it belongs to.",
      "$ref": "../type/entityReferenceList.json"
    },
    "dataProducts" : {
      "description": "List of data products this entity is part of.",
      "$ref" : "../type/entityReferenceList.json"
    }
  },
  "required": ["name", "description"],
  "additionalProperties": false
}
