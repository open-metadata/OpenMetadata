{
  "$id": "https://open-metadata.org/schema/entity/credentials.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Credentials",
  "description": "Reusable credentials entity for authenticating to external services",
  "type": "object",
  "javaType": "org.openmetadata.schema.entity.Credentials",
  "javaInterfaces": ["org.openmetadata.schema.EntityInterface"],
  "definitions": {
    "credentialType": {
      "description": "Type of credential for authentication",
      "type": "string",
      "javaInterfaces": ["org.openmetadata.schema.EnumInterface"],
      "enum": [
        "BasicAuth",
        "ApiToken",
        "ApiKeyAuth",
        "OAuth2ClientCredentials",
        "OAuth2AzureAD", 
        "PersonalAccessToken",
        "AWSCredentials",
        "AzureServicePrincipal",
        "GCPCredentials",
        "CertificateAuth",
        "SaslAuth",
        "PrivateKeyAuth",
        "GitToken",
        "GitHubAuth",
        "GitLabAuth",
        "BitbucketAuth",
        "KubernetesAuth",
        "CustomAuth"
      ],
      "javaEnums": [
        {"name": "BasicAuth"},
        {"name": "ApiToken"},
        {"name": "ApiKeyAuth"},
        {"name": "OAuth2ClientCredentials"},
        {"name": "OAuth2AzureAD"},
        {"name": "PersonalAccessToken"},
        {"name": "AWSCredentials"},
        {"name": "AzureServicePrincipal"},
        {"name": "GCPCredentials"},
        {"name": "CertificateAuth"},
        {"name": "SaslAuth"},
        {"name": "PrivateKeyAuth"},
        {"name": "GitToken"},
        {"name": "GitHubAuth"},
        {"name": "GitLabAuth"},
        {"name": "BitbucketAuth"},
        {"name": "KubernetesAuth"},
        {"name": "CustomAuth"}
      ]
    },
    "oAuthConfig": {
      "title": "OAuth2 Configuration",
      "description": "OAuth2 authentication configuration",
      "type": "object", 
      "properties": {
        "authorizationUrl": {
          "title": "Authorization URL",
          "description": "OAuth2 authorization endpoint URL",
          "type": "string", 
          "format": "uri"
        },
        "tokenUrl": {
          "title": "Token URL",
          "description": "OAuth2 token endpoint URL",
          "type": "string", 
          "format": "uri"
        },
        "clientId": {
          "title": "Client ID",
          "description": "OAuth2 client identifier",
          "type": "string"
        },
        "clientSecret": {
          "title": "Client Secret",
          "description": "OAuth2 client secret",
          "type": "string", 
          "format": "password"
        },
        "scopes": {
          "title": "OAuth Scopes",
          "description": "List of OAuth2 scopes to request",
          "type": "array", 
          "items": {"type": "string"}
        },
        "redirectUri": {
          "title": "Redirect URI",
          "description": "OAuth2 redirect URI for authorization callback",
          "type": "string", 
          "format": "uri"
        },
        "supportRefreshToken": {
          "title": "Support Refresh Token",
          "description": "Whether this OAuth configuration supports refresh tokens",
          "type": "boolean", 
          "default": true
        },
        "tokenExpiration": {
          "title": "Token Expiration",
          "description": "Token expiration time in seconds",
          "type": "integer"
        }
      },
      "required": ["authorizationUrl", "tokenUrl", "clientId", "clientSecret"],
      "additionalProperties": false
    },
    "certificateAuth": {
      "title": "Certificate Authentication",
      "description": "Certificate-based authentication configuration",
      "type": "object",
      "properties": {
        "certificateFile": {
          "title": "Certificate File Path",
          "description": "Path to certificate file",
          "type": "string"
        },
        "certificateValue": {
          "title": "Certificate Value",
          "description": "Certificate content as string",
          "type": "string"
        },
        "privateKeyFile": {
          "title": "Private Key File Path",
          "description": "Path to private key file",
          "type": "string"
        },
        "privateKeyValue": {
          "title": "Private Key Value",
          "description": "Private key content as string",
          "type": "string", 
          "format": "password"
        },
        "privateKeyPassphrase": {
          "title": "Private Key Passphrase",
          "description": "Passphrase for encrypted private key",
          "type": "string", 
          "format": "password"
        },
        "trustStoreFile": {
          "title": "Trust Store File Path",
          "description": "Path to trust store file",
          "type": "string"
        },
        "trustStorePassword": {
          "title": "Trust Store Password",
          "description": "Password for trust store",
          "type": "string", 
          "format": "password"
        }
      },
      "additionalProperties": false
    },
    "saslAuth": {
      "title": "SASL Authentication",
      "description": "SASL authentication configuration for messaging systems",
      "type": "object",
      "properties": {
        "username": {
          "title": "Username",
          "description": "SASL username",
          "type": "string"
        },
        "password": {
          "title": "Password",
          "description": "SASL password",
          "type": "string", 
          "format": "password"
        },
        "mechanism": {
          "title": "SASL Mechanism",
          "description": "SASL authentication mechanism",
          "type": "string",
          "enum": ["PLAIN", "SCRAM-SHA-256", "SCRAM-SHA-512", "GSSAPI", "OAUTHBEARER"],
          "default": "PLAIN"
        },
        "securityProtocol": {
          "title": "Security Protocol",
          "description": "Security protocol for SASL authentication",
          "type": "string", 
          "enum": ["PLAINTEXT", "SSL", "SASL_PLAINTEXT", "SASL_SSL"],
          "default": "SASL_SSL"
        }
      },
      "required": ["username", "password", "mechanism"],
      "additionalProperties": false
    },
    "privateKeyAuth": {
      "title": "Private Key Authentication",
      "description": "Private key authentication configuration (e.g., for Snowflake)",
      "type": "object",
      "properties": {
        "username": {
          "title": "Username",
          "description": "Username for authentication",
          "type": "string"
        },
        "privateKey": {
          "title": "Private Key Content",
          "description": "Private key content as string",
          "type": "string", 
          "format": "password"
        },
        "privateKeyFile": {
          "title": "Private Key File Path",
          "description": "Path to private key file",
          "type": "string"
        },
        "privateKeyPassphrase": {
          "title": "Private Key Passphrase",
          "description": "Passphrase for encrypted private key",
          "type": "string", 
          "format": "password"
        }
      },
      "required": ["username"],
      "additionalProperties": false
    }
  },
  "properties": {
    "id": {
      "description": "Unique identifier of the credentials entity instance.",
      "$ref": "../type/basic.json#/definitions/uuid"
    },
    "name": {
      "description": "Name that identifies this credentials entity instance uniquely.",
      "$ref": "../type/basic.json#/definitions/entityName"
    },
    "fullyQualifiedName": {
      "description": "Fully qualified name of the credentials entity instance.",
      "$ref": "../type/basic.json#/definitions/fullyQualifiedEntityName"
    },
    "displayName": {
      "description": "Display name for the credentials entity.",
      "type": "string"
    },
    "description": {
      "description": "Description of the credentials entity.",
      "$ref": "../type/basic.json#/definitions/markdown"
    },
    "credentialType": {
      "description": "Type of credential used for authentication.",
      "$ref": "#/definitions/credentialType"
    },
    "serviceTypes": {
      "description": "List of service types this credential can be used with.",
      "type": "array",
      "items": {
        "$ref": "./services/serviceType.json"
      }
    },
    "credentialConfig": {
      "description": "Credential configuration based on the credential type.",
      "mask": true,
      "oneOf": [
        {"$ref": "../security/credentials/basicAuth.json"},
        {"$ref": "../security/credentials/accessTokenAuth.json"},
        {"$ref": "../security/credentials/apiAccessTokenAuth.json"},
        {"$ref": "../security/credentials/awsCredentials.json"},
        {"$ref": "../security/credentials/azureCredentials.json"},
        {"$ref": "../security/credentials/gcpCredentials.json"},
        {"$ref": "../security/credentials/githubCredentials.json"},
        {"$ref": "../security/credentials/gitlabCredentials.json"},
        {"$ref": "../security/credentials/bitbucketCredentials.json"},
        {"$ref": "../security/credentials/kubernetesCredentials.json"},
        {"$ref": "#/definitions/oAuthConfig"},
        {"$ref": "#/definitions/certificateAuth"},
        {"$ref": "#/definitions/saslAuth"},
        {"$ref": "#/definitions/privateKeyAuth"}
      ]
    },
    "isOAuth": {
      "description": "Whether this credential uses OAuth2 authentication.",
      "type": "boolean", 
      "default": false
    },
    "requiresUserAuthentication": {
      "description": "Whether this credential requires individual user authentication (OAuth flows).",
      "type": "boolean", 
      "default": false
    },
    "tags": {
      "description": "Tags for this credentials entity.",
      "type": "array",
      "items": {
        "$ref": "../type/tagLabel.json"
      },
      "default": null
    },
    "owners": {
      "description": "Owner of this credentials entity.",
      "$ref": "../type/entityReferenceList.json"
    },
    "domains" : {
      "description": "Domains the asset belongs to. When not set, the asset inherits the domain from the parent it belongs to.",
      "$ref": "../type/entityReferenceList.json"
    },
    "version": {
      "description": "Metadata version of the entity.",
      "$ref": "../type/entityHistory.json#/definitions/entityVersion"
    },
    "updatedAt": {
      "description": "Last update time corresponding to the new version of the entity in Unix epoch time milliseconds.",
      "$ref": "../type/basic.json#/definitions/timestamp"
    },
    "updatedBy": {
      "description": "User who made the update.",
      "type": "string"
    },
    "href": {
      "description": "Link to the resource corresponding to this entity.",
      "$ref": "../type/basic.json#/definitions/href"
    },
    "changeDescription": {
      "description": "Change that led to this version of the entity.",
      "$ref": "../type/entityHistory.json#/definitions/changeDescription"
    },
    "incrementalChangeDescription": {
      "description": "Change that led to this version of the entity.",
      "$ref": "../type/entityHistory.json#/definitions/changeDescription"
    },
    "deleted": {
      "description": "When true indicates the entity has been soft deleted.",
      "type": "boolean",
      "default": false
    }
  },
  "required": ["id", "name", "credentialType", "credentialConfig"],
  "additionalProperties": false
}