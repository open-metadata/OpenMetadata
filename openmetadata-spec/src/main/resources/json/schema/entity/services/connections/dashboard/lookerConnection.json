{
  "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/lookerConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "LookerConnection",
  "description": "Looker Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.dashboard.LookerConnection",
  "definitions": {
    "lookerType": {
      "description": "Looker service type",
      "type": "string",
      "enum": ["Looker"],
      "default": "Looker"
    },
    "noGitCredentials": {
      "title": "No Git Credentials",
      "description": "Do not set any credentials. Note that credentials are required to extract .lkml views and their lineage.",
      "type": "object",
      "additionalProperties": false
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "$ref": "#/definitions/lookerType",
      "default": "Looker"
    },
    "clientId": {
      "title": "Client ID",
      "description": "User's Client ID. This user should have privileges to read all the metadata in Looker.",
      "type": "string"
    },
    "clientSecret": {
      "title": "Client Secret",
      "description": "User's Client Secret.",
      "type": "string",
      "format": "password"
    },
    "hostPort": {
      "expose": true,
      "title": "Host and Port",
      "description": "URL to the Looker instance.",
      "type": "string",
      "format": "uri"
    },
    "gitCredentials": {
      "title": "GitHub Credentials",
      "description": "Credentials to extract the .lkml files from a repository. This is required to get all the lineage and definitions.",
      "oneOf": [
        {
          "$ref": "#/definitions/noGitCredentials"
        },
        {
          "$ref": "../../../../security/credentials/githubCredentials.json"
        },
        {
          "$ref": "../../../../security/credentials/bitbucketCredentials.json"
        },
        {
          "$ref": "../../../../security/credentials/gitlabCredentials.json"
        }
      ]
    },
    "dashboardFilterPattern": {
      "description": "Regex to exclude or include dashboards that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern",
      "title": "Default Dashboard Filter Pattern"
    },
    "chartFilterPattern": {
      "description": "Regex exclude or include charts that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern",
      "title": "Default Chart Filter Pattern"
    },
    "dataModelFilterPattern": {
      "description": "Regex exclude or include data models that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern",
      "title": "Default Data Model Filter Pattern"
    },
    "projectFilterPattern": {
      "description": "Regex to exclude or include projects that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern",
      "title": "Default Project Filter Pattern"
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "$ref": "../connectionBasicType.json#/definitions/supportsMetadataExtraction"
    }
  },
  "additionalProperties": false,
  "required": ["hostPort", "clientId", "clientSecret"]
}
