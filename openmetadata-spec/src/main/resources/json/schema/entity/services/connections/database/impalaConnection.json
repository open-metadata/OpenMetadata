{
    "$id": "https://open-metadata.org/schema/entity/services/connections/database/impalaConnection.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ImpalaConnection",
    "description": "Impala SQL Connection Config",
    "type": "object",
    "javaType": "org.openmetadata.schema.services.connections.database.ImpalaConnection",
    "definitions": {
      "impalaType": {
        "description": "Service type.",
        "type": "string",
        "enum": ["Impala"],
        "default": "Impala"
      },
      "impalaScheme": {
        "description": "SQLAlchemy driver scheme options.",
        "type": "string",
        "enum": ["impala", "impala4"],
        "default": "impala"
      }
    },
    "properties": {
      "type": {
        "title": "Service Type",
        "description": "Service Type",
        "$ref": "#/definitions/impalaType",
        "default": "Impala"
      },
      "scheme": {
        "title": "Connection Scheme",
        "description": "SQLAlchemy driver scheme options.",
        "$ref": "#/definitions/impalaScheme",
        "default": "impala"
      },
      "username": {
        "title": "Username",
        "description": "Username to connect to Impala. This user should have privileges to read all the metadata in Impala.",
        "type": "string"
      },
      "password": {
        "title": "Password",
        "description": "Password to connect to Impala.",
        "type": "string",
        "format": "password"
      },
      "hostPort": {
        "title": "Host and Port",
        "description": "Host and port of the Impala service.",
        "type": "string"
      },
      "authMechanism": {
        "title": "Authentication Mode",
        "description": "Authentication mode to connect to Impala.",
        "type": "string",
        "enum": ["NOSASL", "PLAIN", "GSSAPI", "LDAP", "JWT"],
        "default": "PLAIN"
      },
      "kerberosServiceName": {
        "title": "Kerberos Service Name",
        "description": "If authenticating with Kerberos specify the Kerberos service name",
        "type": "string"
      },
      "databaseSchema": {
        "title": "Database Schema",
        "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
        "type": "string"
      },
      "databaseName": {
        "title": "Database Name",
        "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
        "type": "string"
      },
      "useSSL": {
        "title": "Use SSL",
        "description": "Establish secure connection with Impala",
        "type": "boolean"
      },
      "authOptions": {
        "title": "URL Authentication Options",
        "description": "Authentication options to pass to Impala connector. These options are based on SQLAlchemy.",
        "type": "string"
      },
      "connectionOptions": {
        "title": "Connection Options",
        "$ref": "../connectionBasicType.json#/definitions/connectionOptions"
      },
      "connectionArguments": {
        "title": "Connection Arguments",
        "$ref": "../connectionBasicType.json#/definitions/connectionArguments"
      },
      "schemaFilterPattern":{
        "title": "Default Schema Filter Pattern",
        "description": "Regex to only include/exclude schemas that matches the pattern.",
        "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern"
      },
      "tableFilterPattern": {
        "title": "Default Table Filter Pattern",
        "description": "Regex to only include/exclude tables that matches the pattern.",
        "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern"
      },
      "databaseFilterPattern": {
        "title": "Default Database Filter Pattern",
        "description": "Regex to only include/exclude databases that matches the pattern.",
        "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern"
      },
      "supportsMetadataExtraction": {
        "title": "Supports Metadata Extraction",
        "$ref": "../connectionBasicType.json#/definitions/supportsMetadataExtraction"
      },
      "supportsDBTExtraction": {
        "$ref": "../connectionBasicType.json#/definitions/supportsDBTExtraction"
      },
      "supportsProfiler": {
        "title": "Supports Profiler",
        "$ref": "../connectionBasicType.json#/definitions/supportsProfiler"
      },
      "sampleDataStorageConfig": {
        "title": "Storage Config for Sample Data",
        "$ref": "../connectionBasicType.json#/definitions/sampleDataStorageConfig"
      },
      "supportsViewLineageExtraction": {
        "$ref": "../connectionBasicType.json#/definitions/supportsViewLineageExtraction"
      }
    },
    "additionalProperties": false,
    "required": ["hostPort"]
  }