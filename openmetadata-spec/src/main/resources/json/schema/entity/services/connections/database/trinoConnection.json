{
  "$id": "https://open-metadata.org/schema/entity/services/connections/database/trinoConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "TrinoConnection",
  "description": "Trino Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.database.TrinoConnection",
  "definitions": {
    "trinoType": {
      "description": "Service type.",
      "type": "string",
      "enum": ["Trino"],
      "default": "Trino"
    },
    "trinoScheme": {
      "description": "SQLAlchemy driver scheme options.",
      "type": "string",
      "enum": ["trino"],
      "default": "trino"
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "$ref": "#/definitions/trinoType",
      "default": "Trino"
    },
    "scheme": {
      "title": "Connection Scheme",
      "description": "SQLAlchemy driver scheme options.",
      "$ref": "#/definitions/trinoScheme",
      "default": "trino"
    },
    "username": {
      "title": "Username",
      "description": "Username to connect to Trino. This user should have privileges to read all the metadata in Trino.",
      "type": "string"
    },
    "authType": {
      "title": "Auth Configuration Type",
      "description": "Choose Auth Config Type.",
      "oneOf": [
        {
          "$ref": "./common/basicAuth.json"
        },
        {
          "$ref": "./common/jwtAuth.json"
        },
        {
          "$ref": "./common/azureConfig.json"
        },
        {
          "$ref": "./common/noConfigAuthenticationTypes.json"
        }
      ]
    },
    "hostPort": {
      "title": "Host and Port",
      "description": "Host and port of the Trino service.",
      "type": "string"
    },
    "catalog": {
      "title": "Catalog",
      "description": "Catalog of the data source.",
      "type": "string"
    },
    "databaseSchema": {
      "title": "databaseSchema",
      "description": "databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.",
      "type": "string"
    },
    "proxies": {
      "title": "Proxies",
      "description": "Proxies for the connection to Trino data source",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "verify": {
      "title": "Verify",
      "description": "Verify ( Connection Argument for SSL ) to connect to Trino.",
      "type": "string"
    },
    "connectionOptions": {
      "title": "Connection Options",
      "$ref": "../connectionBasicType.json#/definitions/connectionOptions"
    },
    "connectionArguments": {
      "title": "Connection Arguments",
      "$ref": "../connectionBasicType.json#/definitions/connectionArguments"
    },
    "schemaFilterPattern":{
      "title": "Default Schema Filter Pattern",
      "description": "Regex to only include/exclude schemas that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern"
    },
    "tableFilterPattern": {
      "title": "Default Table Filter Pattern",
      "description": "Regex to only include/exclude tables that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern"
    },
    "databaseFilterPattern": {
      "title": "Default Database Filter Pattern",
      "description": "Regex to only include/exclude databases that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern"
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "$ref": "../connectionBasicType.json#/definitions/supportsMetadataExtraction"
    },
    "supportsUsageExtraction": {
      "title": "Supports Usage Extraction",
      "$ref": "../connectionBasicType.json#/definitions/supportsUsageExtraction"
    },
    "supportsLineageExtraction": {
      "title": "Supports Lineage Extraction",
      "$ref": "../connectionBasicType.json#/definitions/supportsLineageExtraction"
    },
    "supportsDBTExtraction": {
      "$ref": "../connectionBasicType.json#/definitions/supportsDBTExtraction"
    },
    "supportsProfiler": {
      "title": "Supports Profiler",
      "$ref": "../connectionBasicType.json#/definitions/supportsProfiler"
    },
    "supportsDatabase": {
      "title": "Supports Database",
      "$ref": "../connectionBasicType.json#/definitions/supportsDatabase"
    },
    "supportsQueryComment": {
      "title": "Supports Query Comment",
      "$ref": "../connectionBasicType.json#/definitions/supportsQueryComment"
    },
    "sampleDataStorageConfig": {
      "title": "Storage Config for Sample Data",
      "$ref": "../connectionBasicType.json#/definitions/sampleDataStorageConfig"
    },
    "supportsDataDiff": {
        "title": "Supports Data Diff Extraction.",
        "$ref": "../connectionBasicType.json#/definitions/supportsDataDiff"
    },
    "queryHistoryTable": {
      "title": "Query History Table",
      "description": "Table name to fetch the query history.",
      "type": "string",
      "default": "\"system\".\"runtime\".\"queries\""
    }
  },
  "additionalProperties": false,
  "required": ["hostPort", "username"]
}
