{
  "$id": "https://open-metadata.org/schema/entity/services/connections/dashboard/tableauConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "TableauConnection",
  "description": "Tableau Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.dashboard.TableauConnection",
  "definitions": {
    "tableauType": {
      "description": "Tableau service type",
      "type": "string",
      "enum": ["Tableau"],
      "default": "Tableau"
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "$ref": "#/definitions/tableauType",
      "default": "Tableau"
    },
    "hostPort": {
      "expose": true,
      "title": "Host and Port",
      "description": "Tableau Server url.",
      "type": "string",
      "format": "uri"
    },
    "authType": {
      "mask": true,
      "title": "Authentication type for Tableau",
      "description": "Types of methods used to authenticate to the tableau instance",
      "oneOf": [
        {
          "$ref": "../../../../security/credentials/basicAuth.json"
        },
        {
          "$ref": "../../../../security/credentials/accessTokenAuth.json"
        }
      ]
    },
    "siteName": {
      "title": "Site Name",
      "description": "Tableau Site Name.",
      "type": "string",
      "default": null
    },
    "paginationLimit": {
      "title": "Pagination Limit",
      "description": "Pagination limit used while querying the tableau metadata API for getting data sources",
      "type": "integer",
      "default": 10
    },
    "apiVersion": {
      "title": "API Version",
      "description": "Tableau API version. If not provided, the version will be used from the tableau server.",
      "type": "string",
      "default": null
    },
    "proxyURL": {
      "expose": true,
      "title": "Proxy URL",
      "description": "Proxy URL for the tableau server. If not provided, the hostPort will be used. This is used to generate the dashboard & Chart URL.",
      "type": "string",
      "format": "uri",
      "default": null
    },
    "verifySSL": {
      "$ref": "../../../../security/ssl/verifySSLConfig.json#/definitions/verifySSL",
      "default": "no-ssl"
    },
    "sslConfig": {
      "$ref": "../../../../security/ssl/verifySSLConfig.json#/definitions/sslConfig"
    },
    "dashboardFilterPattern": {
      "description": "Regex to exclude or include dashboards that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern",
      "title": "Default Dashboard Filter Pattern"
    },
    "chartFilterPattern": {
      "description": "Regex exclude or include charts that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern",
      "title": "Default Chart Filter Pattern"
    },
    "dataModelFilterPattern": {
      "description": "Regex exclude or include data models that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern",
      "title": "Default Data Model Filter Pattern"
    },
    "projectFilterPattern": {
      "description": "Regex to exclude or include projects that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern",
      "title": "Default Project Filter Pattern"
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "$ref": "../connectionBasicType.json#/definitions/supportsMetadataExtraction"
    }
  },
  "additionalProperties": false,
  "required": ["hostPort"]
}
