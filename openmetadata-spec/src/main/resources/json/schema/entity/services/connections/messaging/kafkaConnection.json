{
  "$id": "https://open-metadata.org/schema/entity/services/connections/messaging/kafkaConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "KafkaConnection",
  "description": "Kafka Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.messaging.KafkaConnection",
  "definitions": {
    "kafkaType": {
      "description": "Kafka service type",
      "type": "string",
      "enum": [
        "Kafka"
      ],
      "default": "Kafka"
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "$ref": "#/definitions/kafkaType",
      "default": "Kafka"
    },
    "bootstrapServers": {
      "title": "Bootstrap Servers",
      "description": "Kafka bootstrap servers. add them in comma separated values ex: host1:9092,host2:9092",
      "type": "string"
    },
    "schemaRegistryURL": {
      "title": "Schema Registry URL",
      "description": "Confluent Kafka Schema Registry URL.",
      "type": "string",
      "format": "uri"
    },
    "saslUsername": {
      "title": "SASL Username",
      "description": "sasl.username consumer config property",
      "type": "string"
    },
    "saslPassword": {
      "title": "SASL Password",
      "description": "sasl.password consumer config property",
      "type": "string",
      "format": "password"
    },
    "securityProtocol": {
      "title": "Security Protocol",
      "description": "security.protocol consumer config property",
      "type": "string",
      "enum": [
        "PLAINTEXT",
        "SASL_PLAINTEXT",
        "SASL_SSL",
        "SSL"
      ],
      "default": "PLAINTEXT"
    },
    "saslMechanism": {
      "title": "SASL Mechanism",
      "description": "sasl.mechanism Consumer Config property",
      "$ref": "saslMechanismType.json",
      "default": "PLAIN"
    },
    "basicAuthUserInfo": {
      "title": "Schema Registry Basic Auth User Info",
      "description": "basic.auth.user.info schema registry config property, Client HTTP credentials in the form of username:password.",
      "type": "string",
      "format": "password"
    },
    "consumerConfig": {
      "title": "Consumer Config",
      "description": "Confluent Kafka Consumer Config. From https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md",
      "type": "object",
      "default": {},
      "additionalProperties": true
    },
    "schemaRegistryConfig": {
      "title": "Schema Registry Config",
      "description": "Confluent Kafka Schema Registry Config. From https://docs.confluent.io/5.5.1/clients/confluent-kafka-python/index.html#confluent_kafka.schema_registry.SchemaRegistryClient",
      "type": "object",
      "default": {},
      "additionalProperties": true
    },
    "schemaRegistryTopicSuffixName": {
      "title": "Schema Registry Topic Suffix Name",
      "description": "Schema Registry Topic Suffix Name. The suffix to be appended to the topic name to get topic schema from registry.",
      "type": "string",
      "default": "-value"
    },
    "consumerConfigSSL": {
      "title": "Consumer Config SSL",
      "description": "Consumer Config SSL Config. Configuration for enabling SSL for the Consumer Config connection.",
      "$ref": "../../../../security/ssl/verifySSLConfig.json#/definitions/sslConfig"
    },
    "schemaRegistrySSL": {
      "title": "Schema Registry SSL",
      "description": "Schema Registry SSL Config. Configuration for enabling SSL for the Schema Registry connection.",
      "$ref": "../../../../security/ssl/verifySSLConfig.json#/definitions/sslConfig"
    },
    "topicFilterPattern": {
      "description": "Regex to only fetch topics that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern",
      "title": "Default Topic Filter Pattern"
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "$ref": "../connectionBasicType.json#/definitions/supportsMetadataExtraction"
    }
  },
  "additionalProperties": false,
  "required": [
    "bootstrapServers"
  ]
}