{
  "$id": "https://open-metadata.org/schema/entity/services/connections/database/synapseConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "SynapseConnection",
  "description": "Synapse Database Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.database.SynapseConnection",
  "definitions": {
    "synapseType": {
      "description": "Service type.",
      "type": "string",
      "enum": ["Synapse"],
      "default": "Synapse"
    },
    "synapseScheme": {
      "description": "SQLAlchemy driver scheme options.",
      "type": "string",
      "enum": ["mssql+pyodbc"],
      "default": "mssql+pyodbc"
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "$ref": "#/definitions/synapseType",
      "default": "Synapse"
    },
    "scheme": {
      "title": "Connection Scheme",
      "description": "SQLAlchemy driver scheme options.",
      "$ref": "#/definitions/synapseScheme",
      "default": "mssql+pyodbc"
    },
    "username": {
      "title": "Username",
      "description": "Username to connect to Azure Synapse. This user should have privileges to read all the metadata in Azure Synapse.",
      "type": "string"
    },
    "password": {
      "title": "Password",
      "description": "Password to connect to Azure Synapse.",
      "type": "string",
      "format": "password"
    },
    "hostPort": {
      "title": "Host and Port",
      "description": "Host and port of the Azure Synapse service.",
      "type": "string"
    },
    "database": {
      "title": "Database",
      "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
      "type": "string"
    },
    "driver": {
      "title": "Driver",
      "description": "ODBC driver version in case of pyodbc connection.",
      "type": "string",
      "default": "ODBC Driver 18 for SQL Server"
    },
    "clientId": {
      "title": "Client ID",
      "description": "Azure Application (client) ID for service principal authentication.",
      "type": "string"
    },
    "clientSecret": {
      "title": "Client Secret",
      "description": "Azure Application client secret for service principal authentication.",
      "type": "string",
      "format": "password"
    },
    "tenantId": {
      "title": "Tenant ID", 
      "description": "Azure Directory (tenant) ID for service principal authentication.",
      "type": "string"
    },
    "authenticationMode": {
      "title": "Authentication Mode",
      "description": "This parameter determines the mode of authentication for connecting to Azure Synapse using ODBC. If 'Active Directory Password' is selected, you need to provide the password. If 'Active Directory Integrated' is selected, password is not required as it uses the logged-in user's credentials. If 'Active Directory Service Principal' is selected, you need to provide clientId, clientSecret and tenantId. This mode is useful for establishing secure and seamless connections with Azure Synapse.",
      "properties": {
        "authentication": {
          "title": "Authentication",
          "description": "Authentication from Connection String for Azure Synapse.",
          "type": "string",
          "enum": [
            "ActiveDirectoryIntegrated",
            "ActiveDirectoryPassword",
            "ActiveDirectoryServicePrincipal"
          ]
        },
        "encrypt": {
          "title": "Encrypt",
          "description": "Encrypt from Connection String for Azure Synapse.",
          "type": "boolean"
        },
        "trustServerCertificate": {
          "title": "Trust Server Certificate",
          "description": "Trust Server Certificate from Connection String for Azure Synapse.",
          "type": "boolean"
        },
        "connectionTimeout": {
          "title": "Connection Timeout",
          "description": "Connection Timeout from Connection String for Azure Synapse.",
          "type": "integer",
          "default": 30
        }
      }
    },
    "ingestAllDatabases": {
      "title": "Ingest All Databases",
      "description": "Ingest data from all databases in Azure Synapse. You can use databaseFilterPattern on top of this.",
      "type": "boolean",
      "default": false
    },
    "connectionOptions": {
      "title": "Connection Options",
      "$ref": "../connectionBasicType.json#/definitions/connectionOptions"
    },
    "connectionArguments": {
      "title": "Connection Arguments",
      "$ref": "../connectionBasicType.json#/definitions/connectionArguments"
    },
    "schemaFilterPattern":{
      "title": "Default Schema Filter Pattern",
      "description": "Regex to only include/exclude schemas that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern"
    },
    "tableFilterPattern": {
      "title": "Default Table Filter Pattern",
      "description": "Regex to only include/exclude tables that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern"
    },
    "databaseFilterPattern": {
      "title": "Default Database Filter Pattern",
      "description": "Regex to only include/exclude databases that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern"
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "$ref": "../connectionBasicType.json#/definitions/supportsMetadataExtraction"
    },
    "supportsDBTExtraction": {
      "$ref": "../connectionBasicType.json#/definitions/supportsDBTExtraction"
    },
    "supportsProfiler": {
      "title": "Supports Profiler",
      "$ref": "../connectionBasicType.json#/definitions/supportsProfiler"
    },
    "supportsDatabase": {
      "title": "Supports Database",
      "$ref": "../connectionBasicType.json#/definitions/supportsDatabase"
    },
    "supportsUsageExtraction": {
      "$ref": "../connectionBasicType.json#/definitions/supportsUsageExtraction"
    },
    "supportsLineageExtraction": {
      "$ref": "../connectionBasicType.json#/definitions/supportsLineageExtraction"
    },
    "sampleDataStorageConfig": {
      "title": "Storage Config for Sample Data",
      "$ref": "../connectionBasicType.json#/definitions/sampleDataStorageConfig"
    },
    "supportsQueryComment": {
      "title": "Supports Query Comment",
      "$ref": "../connectionBasicType.json#/definitions/supportsQueryComment"
    }
  },
  "additionalProperties": false,
  "required": ["hostPort", "database"]
}
