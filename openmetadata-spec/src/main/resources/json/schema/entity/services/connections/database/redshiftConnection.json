{
  "$id": "https://open-metadata.org/schema/entity/services/connections/database/redshiftConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RedshiftConnection",
  "description": "Redshift  Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.database.RedshiftConnection",
  "definitions": {
    "redshiftType": {
      "description": "Service type.",
      "type": "string",
      "enum": [
        "Redshift"
      ],
      "default": "Redshift"
    },
    "redshiftScheme": {
      "description": "SQLAlchemy driver scheme options.",
      "type": "string",
      "enum": [
        "redshift+psycopg2"
      ],
      "default": "redshift+psycopg2"
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "$ref": "#/definitions/redshiftType",
      "default": "Redshift"
    },
    "scheme": {
      "title": "Connection Scheme",
      "description": "SQLAlchemy driver scheme options.",
      "$ref": "#/definitions/redshiftScheme",
      "default": "redshift+psycopg2"
    },
    "username": {
      "title": "Username",
      "description": "Username to connect to Redshift. This user should have privileges to read all the metadata in Redshift.",
      "type": "string"
    },
    "password": {
      "title": "Password",
      "description": "Password to connect to Redshift.",
      "type": "string",
      "format": "password"
    },
    "hostPort": {
      "title": "Host and Port",
      "description": "Host and port of the Redshift service.",
      "type": "string"
    },
    "database": {
      "title": "Database",
      "description": "Initial Redshift database to connect to. If you want to ingest all databases, set ingestAllDatabases to true.",
      "type": "string"
    },
    "ingestAllDatabases": {
      "title": "Ingest All Databases",
      "description": "Ingest data from all databases in Redshift. You can use databaseFilterPattern on top of this.",
      "type": "boolean",
      "default": false
    },
    "schemaFilterPattern": {
      "title": "Default Schema Filter Pattern",
      "description": "Regex to only include/exclude schemas that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern",
      "default": {
        "includes": [],
        "excludes": ["^information_schema$"]
      }
    },
    "tableFilterPattern": {
      "title": "Default Table Filter Pattern",
      "description": "Regex to only include/exclude tables that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern"
    },
    "databaseFilterPattern": {
      "title": "Default Database Filter Pattern",
      "description": "Regex to only include/exclude databases that matches the pattern.",
      "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern",
      "default": {
        "includes": [],
        "excludes": ["^template1$"]
      }
    },
    "sslMode": {
      "$ref": "../../../../security/ssl/verifySSLConfig.json#/definitions/sslMode"
    },
    "sslConfig": {
      "$ref": "../../../../security/ssl/verifySSLConfig.json#/definitions/sslConfig"
    },
    "connectionOptions": {
      "title": "Connection Options",
      "$ref": "../connectionBasicType.json#/definitions/connectionOptions"
    },
    "connectionArguments": {
      "title": "Connection Arguments",
      "$ref": "../connectionBasicType.json#/definitions/connectionArguments"
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "$ref": "../connectionBasicType.json#/definitions/supportsMetadataExtraction"
    },
    "supportsIncrementalMetadataExtraction": {
      "title": "Supports Incremental Metadata Extraction",
      "$ref": "../connectionBasicType.json#/definitions/supportsIncrementalMetadataExtraction"
    },
    "supportsUsageExtraction": {
      "$ref": "../connectionBasicType.json#/definitions/supportsUsageExtraction"
    },
    "supportsLineageExtraction": {
      "$ref": "../connectionBasicType.json#/definitions/supportsLineageExtraction"
    },
    "supportsDBTExtraction": {
      "$ref": "../connectionBasicType.json#/definitions/supportsDBTExtraction"
    },
    "supportsProfiler": {
      "title": "Supports Profiler",
      "$ref": "../connectionBasicType.json#/definitions/supportsProfiler"
    },
    "supportsDatabase": {
      "title": "Supports Database",
      "$ref": "../connectionBasicType.json#/definitions/supportsDatabase"
    },
    "supportsQueryComment": {
      "title": "Supports Query Comment",
      "$ref": "../connectionBasicType.json#/definitions/supportsQueryComment"
    },
    "supportsSystemProfile": {
      "title": "Supports System Profile",
      "$ref": "../connectionBasicType.json#/definitions/supportsSystemProfile"
    },
    "sampleDataStorageConfig": {
      "title": "Storage Config for Sample Data",
      "$ref": "../connectionBasicType.json#/definitions/sampleDataStorageConfig"
    },
    "supportsDataDiff": {
      "title": "Supports Data Diff Extraction.",
      "$ref": "../connectionBasicType.json#/definitions/supportsDataDiff"
    }
  },
  "additionalProperties": false,
  "required": [
    "hostPort",
    "username",
    "database"
  ]
}
