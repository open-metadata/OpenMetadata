{
  "$id": "https://open-metadata.org/schema/entity/services/databaseService.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Database Service",
  "description": "This schema defines the `Database Service` is a service such as MySQL, BigQuery, Redshift, Postgres, or Snowflake. Alternative terms such as Database Cluster, Database Server instance are also used for database service.",
  "type": "object",
  "javaType": "org.openmetadata.schema.entity.services.DatabaseService",
  "javaInterfaces": [
    "org.openmetadata.schema.EntityInterface",
    "org.openmetadata.schema.ServiceEntityInterface"
  ],
  "definitions": {
    "databaseServiceType": {
      "description": "Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...",
      "javaInterfaces": ["org.openmetadata.schema.EnumInterface"],
      "type": "string",
      "enum": [
        "BigQuery",
        "BigTable",
        "Mysql",
        "Redshift",
        "Snowflake",
        "Postgres",
        "Mssql",
        "Oracle",
        "Athena",
        "Hive",
        "Impala",
        "Presto",
        "Trino",
        "Vertica",
        "Glue",
        "MariaDB",
        "Druid",
        "Db2",
        "Clickhouse",
        "Databricks",
        "AzureSQL",
        "DynamoDB",
        "SingleStore",
        "SQLite",
        "DeltaLake",
        "Salesforce",
        "PinotDB",
        "Datalake",
        "DomoDatabase",
        "QueryLog",
        "CustomDatabase",
        "Dbt",
        "SapHana",
        "MongoDB",
        "Cassandra",
        "Couchbase",
        "Greenplum",
        "Doris",
        "UnityCatalog",
        "SAS",
        "Iceberg",
        "Teradata",
        "SapErp",
        "Synapse",
        "Exasol",
        "Cockroach",
        "SSAS"
      ],
      "javaEnums": [
        {
          "name": "BigQuery"
        },
        {
          "name": "BigTable"
        },
        {
          "name": "Mysql"
        },
        {
          "name": "Redshift"
        },
        {
          "name": "Snowflake"
        },
        {
          "name": "Postgres"
        },
        {
          "name": "Mssql"
        },
        {
          "name": "Oracle"
        },
        {
          "name": "Athena"
        },
        {
          "name": "Hive"
        },
        {
          "name": "Impala"
        },
        {
          "name": "Presto"
        },
        {
          "name": "Trino"
        },
        {
          "name": "Vertica"
        },
        {
          "name": "Glue"
        },
        {
          "name": "MariaDB"
        },
        {
          "name": "Druid"
        },
        {
          "name": "Db2"
        },
        {
          "name": "Clickhouse"
        },
        {
          "name": "Databricks"
        },
        {
          "name": "AzureSQL"
        },
        {
          "name": "DynamoDB"
        },
        {
          "name": "SingleStore"
        },
        {
          "name": "SQLite"
        },
        {
          "name": "DeltaLake"
        },
        {
          "name": "Salesforce"
        },
        {
          "name": "PinotDB"
        },
        {
          "name": "Datalake"
        },
        {
          "name": "DomoDatabase"
        },
        {
          "name": "QueryLog"
        },
        {
          "name": "CustomDatabase"
        },
        {
          "name": "Dbt"
        },
        {
          "name": "SapHana"
        },
        {
          "name": "MongoDB"
        },
        {
          "name": "Cassandra"
        },
        {
          "name": "Couchbase"
        },
        {
          "name": "Greenplum"
        },
        {
          "name": "Doris"
        },
        {
          "name": "UnityCatalog"
        },
        {
          "name": "SAS"
        },
        {
          "name": "Iceberg"
        },
        {
          "name": "Teradata"
        },
        {
          "name": "SapErp"
        },
        {
          "name": "Synapse"
        },
        {
          "name": "Exasol"
        },
        {
          "name": "Cockroach"
        },
        {
          "name": "SSAS"
        }
      ]
    },
    "databaseConnection": {
      "type": "object",
      "description": "Database Connection.",
      "javaInterfaces": [
        "org.openmetadata.schema.ServiceConnectionEntityInterface"
      ],
      "properties": {
        "config": {
          "mask": true,
          "oneOf": [
            {
              "$ref": "./connections/database/bigQueryConnection.json"
            },
            {
              "$ref": "./connections/database/bigTableConnection.json"
            },
            {
              "$ref": "./connections/database/athenaConnection.json"
            },
            {
              "$ref": "./connections/database/azureSQLConnection.json"
            },
            {
              "$ref": "./connections/database/clickhouseConnection.json"
            },
            {
              "$ref": "./connections/database/databricksConnection.json"
            },
            {
              "$ref": "./connections/database/db2Connection.json"
            },
            {
              "$ref": "./connections/database/deltaLakeConnection.json"
            },
            {
              "$ref": "./connections/database/druidConnection.json"
            },
            {
              "$ref": "./connections/database/dynamoDBConnection.json"
            },
            {
              "$ref": "./connections/database/glueConnection.json"
            },
            {
              "$ref": "./connections/database/hiveConnection.json"
            },
            {
              "$ref": "./connections/database/impalaConnection.json"
            },
            {
              "$ref": "./connections/database/mariaDBConnection.json"
            },
            {
              "$ref": "./connections/database/mssqlConnection.json"
            },
            {
              "$ref": "./connections/database/mysqlConnection.json"
            },
            {
              "$ref": "./connections/database/sqliteConnection.json"
            },
            {
              "$ref": "./connections/database/oracleConnection.json"
            },
            {
              "$ref": "./connections/database/postgresConnection.json"
            },
            {
              "$ref": "./connections/database/prestoConnection.json"
            },
            {
              "$ref": "./connections/database/redshiftConnection.json"
            },
            {
              "$ref": "./connections/database/salesforceConnection.json"
            },
            {
              "$ref": "./connections/database/singleStoreConnection.json"
            },
            {
              "$ref": "./connections/database/snowflakeConnection.json"
            },
            {
              "$ref": "./connections/database/trinoConnection.json"
            },
            {
              "$ref": "./connections/database/verticaConnection.json"
            },
            {
              "$ref": "./connections/database/pinotDBConnection.json"
            },
            {
              "$ref": "./connections/database/datalakeConnection.json"
            },
            {
              "$ref": "./connections/database/domoDatabaseConnection.json"
            },
            {
              "$ref": "./connections/database/customDatabaseConnection.json"
            },
            {
              "$ref": "./connections/database/sapHanaConnection.json"
            },
            {
              "$ref": "./connections/database/mongoDBConnection.json"
            },
            {
              "$ref": "./connections/database/cassandraConnection.json"
            },
            {
              "$ref": "./connections/database/couchbaseConnection.json"
            },
            {
              "$ref": "./connections/database/greenplumConnection.json"
            },
            {
              "$ref": "./connections/database/dorisConnection.json"
            },
            {
              "$ref": "./connections/database/unityCatalogConnection.json"
            },
            {
              "$ref": "./connections/database/sasConnection.json"
            },
            {
              "$ref": "./connections/database/icebergConnection.json"
            },
            {
              "$ref": "./connections/database/teradataConnection.json"
            },
            {
              "$ref": "./connections/database/sapErpConnection.json"
            },
            {
              "$ref": "./connections/database/synapseConnection.json"
            },
            {
              "$ref": "./connections/database/exasolConnection.json"
            },
            {
              "$ref": "./connections/database/cockroachConnection.json"
            },
            {
              "$ref": "./connections/database/ssasConnection.json"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "properties": {
    "id": {
      "description": "Unique identifier of this database service instance.",
      "$ref": "../../type/basic.json#/definitions/uuid"
    },
    "name": {
      "description": "Name that identifies this database service.",
      "$ref": "../../type/basic.json#/definitions/entityName"
    },
    "fullyQualifiedName": {
      "description": "FullyQualifiedName same as `name`.",
      "$ref": "../../type/basic.json#/definitions/fullyQualifiedEntityName"
    },
    "displayName": {
      "description": "Display Name that identifies this database service.",
      "type": "string"
    },
    "serviceType": {
      "description": "Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...",
      "$ref": "#/definitions/databaseServiceType"
    },
    "description": {
      "description": "Description of a database service instance.",
      "$ref": "../../type/basic.json#/definitions/markdown"
    },
    "connection": {
      "$ref": "#/definitions/databaseConnection"
    },
    "pipelines": {
      "description": "References to pipelines deployed for this database service to extract metadata, usage, lineage etc..",
      "$ref": "../../type/entityReferenceList.json"
    },
    "testConnectionResult": {
      "description": "Last test connection results for this service",
      "$ref": "connections/testConnectionResult.json"
    },
    "tags": {
      "description": "Tags for this Database Service.",
      "type": "array",
      "items": {
        "$ref": "../../type/tagLabel.json"
      },
      "default": []
    },
    "version": {
      "description": "Metadata version of the entity.",
      "$ref": "../../type/entityHistory.json#/definitions/entityVersion"
    },
    "updatedAt": {
      "description": "Last update time corresponding to the new version of the entity in Unix epoch time milliseconds.",
      "$ref": "../../type/basic.json#/definitions/timestamp"
    },
    "updatedBy": {
      "description": "User who made the update.",
      "type": "string"
    },
    "owners": {
      "description": "Owners of this database service.",
      "$ref": "../../type/entityReferenceList.json"
    },
    "href": {
      "description": "Link to the resource corresponding to this database service.",
      "$ref": "../../type/basic.json#/definitions/href"
    },
    "followers": {
      "description": "Followers of this entity.",
      "$ref": "../../type/entityReferenceList.json"
    },
    "changeDescription": {
      "description": "Change that lead to this version of the entity.",
      "$ref": "../../type/entityHistory.json#/definitions/changeDescription"
    },
    "incrementalChangeDescription": {
      "description": "Change that lead to this version of the entity.",
      "$ref": "../../type/entityHistory.json#/definitions/changeDescription"
    },
    "deleted": {
      "description": "When `true` indicates the entity has been soft deleted.",
      "type": "boolean",
      "default": false
    },
    "dataProducts" : {
      "description": "List of data products this entity is part of.",
      "$ref" : "../../type/entityReferenceList.json"
    },
    "domains" : {
      "description": "Domains the Database service belongs to.",
      "$ref": "../../type/entityReferenceList.json"
    },
    "ingestionRunner" : {
      "description": "The ingestion agent responsible for executing the ingestion pipeline.",
      "$ref": "../../type/entityReference.json"
    }
  },
  "required": ["id", "name", "serviceType"],
  "additionalProperties": false
}
