{
  "$id": "https://open-metadata.org/schema/entity/data/dashboard.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Dashboard",
  "$comment": "@om-entity-type",
  "description": "This schema defines the Dashboard entity. Dashboards are computed from data and visually present data, metrics, and KPIs. They are typically updated in real-time and allow interactive data exploration.",
  "type": "object",
  "javaType": "org.openmetadata.schema.entity.data.Dashboard",
  "javaInterfaces": ["org.openmetadata.schema.EntityInterface"],
  "definitions": {
    "dashboardType": {
      "javaType": "org.openmetadata.schema.type.DashboardType",
      "description": "This schema defines the type used for describing different types of dashboards.",
      "type": "string",
      "default": "Dashboard",
      "enum": [
        "Dashboard",
        "Report"
      ],
      "javaEnums": [
        {
          "name": "Dashboard"
        },
        {
          "name": "Report"
        }
      ]
    }
  },
  "properties": {
    "id": {
      "description": "Unique identifier that identifies a dashboard instance.",
      "$ref": "../../type/basic.json#/definitions/uuid"
    },
    "name": {
      "description": "Name that identifies this dashboard.",
      "$ref": "../../type/basic.json#/definitions/entityName"
    },
    "displayName": {
      "description": "Display Name that identifies this Dashboard. It could be title or label from the source services.",
      "type": "string"
    },
    "fullyQualifiedName": {
      "description": "A unique name that identifies a dashboard in the format 'ServiceName.DashboardName'.",
      "$ref": "../../type/basic.json#/definitions/fullyQualifiedEntityName"
    },
    "description": {
      "description": "Description of the dashboard, what it is, and how to use it.",
      "$ref": "../../type/basic.json#/definitions/markdown"
    },
    "project": {
      "description": "Name of the project / workspace / collection in which the dashboard is contained",
      "type": "string"
    },
    "version": {
      "description": "Metadata version of the entity.",
      "$ref": "../../type/entityHistory.json#/definitions/entityVersion"
    },
    "updatedAt": {
      "description": "Last update time corresponding to the new version of the entity in Unix epoch time milliseconds.",
      "$ref": "../../type/basic.json#/definitions/timestamp"
    },
    "updatedBy": {
      "description": "User who made the update.",
      "type": "string"
    },
    "dashboardType": {
      "$ref": "#/definitions/dashboardType"
    },
    "sourceUrl": {
      "description": "Dashboard URL suffix from its service.",
      "$ref": "../../type/basic.json#/definitions/sourceUrl"
    },
    "charts": {
      "description": "All the charts included in this Dashboard.",
      "$ref": "../../type/entityReferenceList.json",
      "default": null
    },
    "dataModels": {
      "description": "List of data models used by this dashboard or the charts contained on it.",
      "$ref": "../../type/entityReferenceList.json",
      "default": null
    },
    "href": {
      "description": "Link to the resource corresponding to this entity.",
      "$ref": "../../type/basic.json#/definitions/href"
    },
    "owners": {
      "description": "Owners of this dashboard.",
      "$ref": "../../type/entityReferenceList.json"
    },
    "followers": {
      "description": "Followers of this dashboard.",
      "$ref": "../../type/entityReferenceList.json"
    },
    "tags": {
      "description": "Tags for this dashboard.",
      "type": "array",
      "items": {
        "$ref": "../../type/tagLabel.json"
      },
      "default": []
    },
    "service": {
      "description": "Link to service where this dashboard is hosted in.",
      "$ref": "../../type/entityReference.json"
    },
    "serviceType": {
      "description": "Service type where this dashboard is hosted in.",
      "$ref": "../services/dashboardService.json#/definitions/dashboardServiceType"
    },
    "usageSummary": {
      "description": "Latest usage information for this dashboard.",
      "$ref": "../../type/usageDetails.json",
      "default": null
    },
    "changeDescription": {
      "description": "Change that lead to this version of the entity.",
      "$ref": "../../type/entityHistory.json#/definitions/changeDescription"
    },
    "incrementalChangeDescription": {
      "description": "Change that lead to this version of the entity.",
      "$ref": "../../type/entityHistory.json#/definitions/changeDescription"
    },
    "deleted": {
      "description": "When `true` indicates the entity has been soft deleted.",
      "type": "boolean",
      "default": false
    },
    "extension": {
      "description": "Entity extension data with custom attributes added to the entity.",
      "$ref": "../../type/basic.json#/definitions/entityExtension"
    },
    "domains": {
      "description": "Domains the Dashboard belongs to. When not set, the Dashboard inherits the domain from the dashboard service it belongs to.",
      "$ref": "../../type/entityReferenceList.json"
    },
    "dataProducts": {
      "description": "List of data products this entity is part of.",
      "$ref": "../../type/entityReferenceList.json"
    },
    "votes": {
      "description": "Votes on the entity.",
      "$ref": "../../type/votes.json"
    },
    "lifeCycle": {
      "description": "Life Cycle properties of the entity",
      "$ref": "../../type/lifeCycle.json"
    },
    "certification": {
      "$ref": "../../type/assetCertification.json"
    },
    "sourceHash": {
      "description": "Source hash of the entity",
      "type": "string",
      "minLength": 1,
      "maxLength": 32
    }
  },
  "required": ["id", "name", "service"],
  "additionalProperties": false
}
