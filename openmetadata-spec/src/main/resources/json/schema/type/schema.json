{
  "$id": "https://open-metadata.org/schema/type/schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Topic",
  "$comment": "@om-entity-type",
  "description": "This schema defines the Topic entity. A topic is a feed into which message are published to by publishers and read from by consumers in a messaging service.",
  "type": "object",
  "javaType": "org.openmetadata.schema.type.MessageSchema",
  "definitions": {
    "schemaType": {
      "description": "Schema type used for the message.",
      "javaType": "org.openmetadata.schema.type.SchemaType",
      "enum": [
        "Avro",
        "Protobuf",
        "JSON",
        "Other",
        "None"
      ],
      "javaEnums": [
        {
          "name": "Avro"
        },
        {
          "name": "Protobuf"
        },
        {
          "name": "JSON"
        },
        {
          "name": "Other"
        },
        {
          "name": "None"
        }
      ]
    },
    "dataTypeTopic": {
      "javaType": "org.openmetadata.schema.type.FieldDataType",
      "description": "This enum defines the type of data defined in schema.",
      "type": "string",
      "enum": [
        "RECORD",
        "NULL",
        "BOOLEAN",
        "INT",
        "LONG",
        "BYTES",
        "FLOAT",
        "DOUBLE",
        "TIMESTAMP",
        "TIMESTAMPZ",
        "TIME",
        "DATE",
        "STRING",
        "ARRAY",
        "MAP",
        "ENUM",
        "UNION",
        "FIXED",
        "ERROR",
        "UNKNOWN"
      ]
    },
    "fieldName": {
      "description": "Local name (not fully qualified name) of the field. ",
      "type": "string",
      "minLength": 1,
      "maxLength": 128
    },
    "field": {
      "type": "object",
      "javaType": "org.openmetadata.schema.type.Field",
      "javaInterfaces": ["org.openmetadata.schema.FieldInterface"],
      "description": "This schema defines the nested object to capture protobuf/avro/jsonschema of topic's schema.",
      "properties": {
        "name": {
          "$ref": "#/definitions/fieldName"
        },
        "displayName": {
          "description": "Display Name that identifies this field name.",
          "type": "string"
        },
        "dataType": {
          "description": "Data type of the field (int, date etc.).",
          "$ref": "#/definitions/dataTypeTopic"
        },
        "dataTypeDisplay": {
          "description": "Display name used for dataType. This is useful for complex types, such as `array<int>`, `map<int,string>`, `struct<>`, and union types.",
          "type": "string"
        },
        "description": {
          "description": "Description of the column.",
          "$ref": "basic.json#/definitions/markdown"
        },
        "fullyQualifiedName": {
          "$ref": "basic.json#/definitions/fullyQualifiedEntityName"
        },
        "tags": {
          "description": "Tags associated with the column.",
          "type": "array",
          "items": {
            "$ref": "tagLabel.json"
          }
          },
        "children": {
          "description": "Child fields if dataType or arrayDataType is `map`, `record`, `message`",
          "type": "array",
          "items": {
            "$ref": "#/definitions/field"
          }
          }
      },
      "required": [
        "name",
        "dataType"
      ],
      "additionalProperties": false
    }
  },
  "properties": {
    "schemaText": {
      "description": "Schema used for message serialization. Optional as some topics may not have associated schemas.",
      "type": "string"
    },
    "schemaType": {
      "description": "Schema used for message serialization.",
      "$ref": "#/definitions/schemaType",
      "default": "None"
    },
    "schemaFields": {
      "description": "Columns in this schema.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/field"
      },
      "default": []
    }
  }
}