package org.openmetadata.sdk.fluent;

import java.util.*;
import org.openmetadata.schema.api.data.CreateGlossary;
import org.openmetadata.schema.entity.data.Glossary;
import org.openmetadata.sdk.client.OpenMetadataClient;

/**
 * Pure Fluent API for Glossary operations.
 *
 * Usage:
 * <pre>
 * import static org.openmetadata.sdk.fluent.Glossaries.*;
 *
 * // Create
 * Glossary glossary = create()
 *     .name("glossary_name")
 *     .withDescription("Description")
 *     .execute();
 *
 * // Find and load
 * Glossary glossary = find(glossaryId)
 *     .includeOwner()
 *     .includeTags()
 *     .fetch();
 *
 * // Update
 * Glossary updated = find(glossaryId)
 *     .fetch()
 *     .withDescription("Updated description")
 *     .save();
 *
 * // Delete
 * find(glossaryId)
 *     .delete()
 *     .confirm();
 *
 * // List
 * list()
 *     .limit(50)
 *     .forEach(glossary -> process(glossary));
 * </pre>
 */
public final class Glossaries {
  private static OpenMetadataClient defaultClient;

  private Glossaries() {} // Prevent instantiation

  public static void setDefaultClient(OpenMetadataClient client) {
    defaultClient = client;
  }

  private static OpenMetadataClient getClient() {
    if (defaultClient == null) {
      throw new IllegalStateException("Client not initialized. Call Glossaries.setDefaultClient() first.");
    }
    return defaultClient;
  }

  // ==================== Creation ====================

  public static GlossaryCreator create() {
    return new GlossaryCreator(getClient());
  }

  public static Glossary create(CreateGlossary request) {
    return getClient().glossaries().create(request);
  }

  // ==================== Finding/Retrieval ====================

  public static GlossaryFinder find(String id) {
    return new GlossaryFinder(getClient(), id);
  }

  public static GlossaryFinder find(UUID id) {
    return find(id.toString());
  }

  public static GlossaryFinder findByName(String fqn) {
    return new GlossaryFinder(getClient(), fqn, true);
  }

  // ==================== Listing ====================

  public static GlossaryLister list() {
    return new GlossaryLister(getClient());
  }

  // ==================== Creator ====================

  public static class GlossaryCreator {
    private final OpenMetadataClient client;
    private final CreateGlossary request = new CreateGlossary();

    GlossaryCreator(OpenMetadataClient client) {
      this.client = client;
    }

    public GlossaryCreator name(String name) {
      request.setName(name);
      return this;
    }

    public GlossaryCreator withDescription(String description) {
      request.setDescription(description);
      return this;
    }

    public GlossaryCreator withDisplayName(String displayName) {
      request.setDisplayName(displayName);
      return this;
    }

    

    public Glossary execute() {
      return client.glossaries().create(request);
    }

    public Glossary now() {
      return execute();
    }
  }

  // ==================== Finder ====================

  public static class GlossaryFinder {
    private final OpenMetadataClient client;
    private final String identifier;
    private final boolean isFqn;
    private final Set<String> includes = new HashSet<>();

    GlossaryFinder(OpenMetadataClient client, String identifier) {
      this(client, identifier, false);
    }

    GlossaryFinder(OpenMetadataClient client, String identifier, boolean isFqn) {
      this.client = client;
      this.identifier = identifier;
      this.isFqn = isFqn;
    }

    public GlossaryFinder includeOwner() {
      includes.add("owner");
      return this;
    }

    public GlossaryFinder includeTags() {
      includes.add("tags");
      return this;
    }

    public GlossaryFinder includeAll() {
      includes.addAll(Arrays.asList("owner", "tags", "followers", "domain"));
      return this;
    }

    public FluentGlossary fetch() {
      Glossary glossary;
      if (includes.isEmpty()) {
        glossary = isFqn ? client.glossaries().getByName(identifier)
                        : client.glossaries().get(identifier);
      } else {
        String fields = String.join(",", includes);
        glossary = isFqn ? client.glossaries().getByName(identifier, fields)
                        : client.glossaries().get(identifier, fields);
      }
      return new FluentGlossary(glossary, client);
    }

    public GlossaryDeleter delete() {
      return new GlossaryDeleter(client, identifier);
    }
  }

  // ==================== Deleter ====================

  public static class GlossaryDeleter {
    private final OpenMetadataClient client;
    private final String id;
    private boolean recursive = false;
    private boolean hardDelete = false;

    GlossaryDeleter(OpenMetadataClient client, String id) {
      this.client = client;
      this.id = id;
    }

    public GlossaryDeleter recursively() {
      this.recursive = true;
      return this;
    }

    public GlossaryDeleter permanently() {
      this.hardDelete = true;
      return this;
    }

    public void confirm() {
      Map<String, String> params = new HashMap<>();
      if (recursive) params.put("recursive", "true");
      if (hardDelete) params.put("hardDelete", "true");
      client.glossaries().delete(id, params);
    }
  }

  // ==================== Lister ====================

  public static class GlossaryLister {
    private final OpenMetadataClient client;
    private final Map<String, String> filters = new HashMap<>();
    private Integer limit;
    private String after;

    GlossaryLister(OpenMetadataClient client) {
      this.client = client;
    }

    public GlossaryLister limit(int limit) {
      this.limit = limit;
      return this;
    }

    public GlossaryLister after(String cursor) {
      this.after = cursor;
      return this;
    }

    public List<FluentGlossary> fetch() {
      var params = new org.openmetadata.sdk.models.ListParams();
      if (limit != null) params.setLimit(limit);
      if (after != null) params.setAfter(after);
      filters.forEach(params::addFilter);

      var response = client.glossaries().list(params);
      List<FluentGlossary> items = new ArrayList<>();
      for (Glossary item : response.getData()) {
        items.add(new FluentGlossary(item, client));
      }
      return items;
    }

    public void forEach(java.util.function.Consumer<FluentGlossary> action) {
      fetch().forEach(action);
    }
  }

  // ==================== Fluent Entity ====================

  public static class FluentGlossary {
    private final Glossary glossary;
    private final OpenMetadataClient client;
    private boolean modified = false;

    public FluentGlossary(Glossary glossary, OpenMetadataClient client) {
      this.glossary = glossary;
      this.client = client;
    }

    public Glossary get() {
      return glossary;
    }

    public FluentGlossary withDescription(String description) {
      glossary.setDescription(description);
      modified = true;
      return this;
    }

    public FluentGlossary withDisplayName(String displayName) {
      glossary.setDisplayName(displayName);
      modified = true;
      return this;
    }

    public FluentGlossary save() {
      if (modified) {
        Glossary updated = client.glossaries().update(glossary.getId().toString(), glossary);
        glossary.setVersion(updated.getVersion());
        modified = false;
      }
      return this;
    }

    public GlossaryDeleter delete() {
      return new GlossaryDeleter(client, glossary.getId().toString());
    }

    
  }
}
