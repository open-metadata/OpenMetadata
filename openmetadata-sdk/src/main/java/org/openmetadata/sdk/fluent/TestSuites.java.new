package org.openmetadata.sdk.fluent;

import java.util.*;
import org.openmetadata.schema.tests.CreateTestSuite;
import org.openmetadata.schema.tests.TestSuite;
import org.openmetadata.sdk.client.OpenMetadataClient;

/**
 * Pure Fluent API for TestSuite operations.
 *
 * Usage:
 * <pre>
 * import static org.openmetadata.sdk.fluent.TestSuites.*;
 *
 * // Create
 * TestSuite testSuite = create()
 *     .name("testSuite_name")
 *     .withDescription("Description")
 *     .execute();
 *
 * // Find and load
 * TestSuite testSuite = find(testSuiteId)
 *     .includeOwner()
 *     .includeTags()
 *     .fetch();
 *
 * // Update
 * TestSuite updated = find(testSuiteId)
 *     .fetch()
 *     .withDescription("Updated description")
 *     .save();
 *
 * // Delete
 * find(testSuiteId)
 *     .delete()
 *     .confirm();
 *
 * // List
 * list()
 *     .limit(50)
 *     .forEach(testSuite -> process(testSuite));
 * </pre>
 */
public final class TestSuites {
  private static OpenMetadataClient defaultClient;

  private TestSuites() {} // Prevent instantiation

  public static void setDefaultClient(OpenMetadataClient client) {
    defaultClient = client;
  }

  private static OpenMetadataClient getClient() {
    if (defaultClient == null) {
      throw new IllegalStateException("Client not initialized. Call TestSuites.setDefaultClient() first.");
    }
    return defaultClient;
  }

  // ==================== Creation ====================

  public static TestSuiteCreator create() {
    return new TestSuiteCreator(getClient());
  }

  public static TestSuite create(CreateTestSuite request) {
    return getClient().testSuites().create(request);
  }

  // ==================== Finding/Retrieval ====================

  public static TestSuiteFinder find(String id) {
    return new TestSuiteFinder(getClient(), id);
  }

  public static TestSuiteFinder find(UUID id) {
    return find(id.toString());
  }

  public static TestSuiteFinder findByName(String fqn) {
    return new TestSuiteFinder(getClient(), fqn, true);
  }

  // ==================== Listing ====================

  public static TestSuiteLister list() {
    return new TestSuiteLister(getClient());
  }

  // ==================== Creator ====================

  public static class TestSuiteCreator {
    private final OpenMetadataClient client;
    private final CreateTestSuite request = new CreateTestSuite();

    TestSuiteCreator(OpenMetadataClient client) {
      this.client = client;
    }

    public TestSuiteCreator name(String name) {
      request.setName(name);
      return this;
    }

    public TestSuiteCreator withDescription(String description) {
      request.setDescription(description);
      return this;
    }

    public TestSuiteCreator withDisplayName(String displayName) {
      request.setDisplayName(displayName);
      return this;
    }

    

    public TestSuite execute() {
      return client.testSuites().create(request);
    }

    public TestSuite now() {
      return execute();
    }
  }

  // ==================== Finder ====================

  public static class TestSuiteFinder {
    private final OpenMetadataClient client;
    private final String identifier;
    private final boolean isFqn;
    private final Set<String> includes = new HashSet<>();

    TestSuiteFinder(OpenMetadataClient client, String identifier) {
      this(client, identifier, false);
    }

    TestSuiteFinder(OpenMetadataClient client, String identifier, boolean isFqn) {
      this.client = client;
      this.identifier = identifier;
      this.isFqn = isFqn;
    }

    public TestSuiteFinder includeOwner() {
      includes.add("owner");
      return this;
    }

    public TestSuiteFinder includeTags() {
      includes.add("tags");
      return this;
    }

    public TestSuiteFinder includeAll() {
      includes.addAll(Arrays.asList("owner", "tags", "followers", "domain"));
      return this;
    }

    public FluentTestSuite fetch() {
      TestSuite testSuite;
      if (includes.isEmpty()) {
        testSuite = isFqn ? client.testSuites().getByName(identifier)
                        : client.testSuites().get(identifier);
      } else {
        String fields = String.join(",", includes);
        testSuite = isFqn ? client.testSuites().getByName(identifier, fields)
                        : client.testSuites().get(identifier, fields);
      }
      return new FluentTestSuite(testSuite, client);
    }

    public TestSuiteDeleter delete() {
      return new TestSuiteDeleter(client, identifier);
    }
  }

  // ==================== Deleter ====================

  public static class TestSuiteDeleter {
    private final OpenMetadataClient client;
    private final String id;
    private boolean recursive = false;
    private boolean hardDelete = false;

    TestSuiteDeleter(OpenMetadataClient client, String id) {
      this.client = client;
      this.id = id;
    }

    public TestSuiteDeleter recursively() {
      this.recursive = true;
      return this;
    }

    public TestSuiteDeleter permanently() {
      this.hardDelete = true;
      return this;
    }

    public void confirm() {
      Map<String, String> params = new HashMap<>();
      if (recursive) params.put("recursive", "true");
      if (hardDelete) params.put("hardDelete", "true");
      client.testSuites().delete(id, params);
    }
  }

  // ==================== Lister ====================

  public static class TestSuiteLister {
    private final OpenMetadataClient client;
    private final Map<String, String> filters = new HashMap<>();
    private Integer limit;
    private String after;

    TestSuiteLister(OpenMetadataClient client) {
      this.client = client;
    }

    public TestSuiteLister limit(int limit) {
      this.limit = limit;
      return this;
    }

    public TestSuiteLister after(String cursor) {
      this.after = cursor;
      return this;
    }

    public List<FluentTestSuite> fetch() {
      var params = new org.openmetadata.sdk.models.ListParams();
      if (limit != null) params.setLimit(limit);
      if (after != null) params.setAfter(after);
      filters.forEach(params::addFilter);

      var response = client.testSuites().list(params);
      List<FluentTestSuite> items = new ArrayList<>();
      for (TestSuite item : response.getData()) {
        items.add(new FluentTestSuite(item, client));
      }
      return items;
    }

    public void forEach(java.util.function.Consumer<FluentTestSuite> action) {
      fetch().forEach(action);
    }
  }

  // ==================== Fluent Entity ====================

  public static class FluentTestSuite {
    private final TestSuite testSuite;
    private final OpenMetadataClient client;
    private boolean modified = false;

    public FluentTestSuite(TestSuite testSuite, OpenMetadataClient client) {
      this.testSuite = testSuite;
      this.client = client;
    }

    public TestSuite get() {
      return testSuite;
    }

    public FluentTestSuite withDescription(String description) {
      testSuite.setDescription(description);
      modified = true;
      return this;
    }

    public FluentTestSuite withDisplayName(String displayName) {
      testSuite.setDisplayName(displayName);
      modified = true;
      return this;
    }

    public FluentTestSuite save() {
      if (modified) {
        TestSuite updated = client.testSuites().update(testSuite.getId().toString(), testSuite);
        testSuite.setVersion(updated.getVersion());
        modified = false;
      }
      return this;
    }

    public TestSuiteDeleter delete() {
      return new TestSuiteDeleter(client, testSuite.getId().toString());
    }

    
  }
}
